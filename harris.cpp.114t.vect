
;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (_ZNKSt5ctypeIcE8do_widenEc, funcdef_no=907, decl_uid=18082, symbol_order=295)

virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (const struct ctype * const this, char __c)
{
  <bb 2>:
  return __c_1(D);

}



;; Function <built-in> (_Z10harris_optiiPfRS_._omp_fn.3, funcdef_no=4432, decl_uid=80597, symbol_order=3087)


Analyzing loop at harris.opt.cpp:157
harris.opt.cpp:157:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:157:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:157:5: note: ===== analyze_loop_nest_1 =====
harris.opt.cpp:157:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:157:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 1](no_overflow) < pretmp_89
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) pretmp_89 + 4294967293, bounded by 2147483644
harris.opt.cpp:157:5: note: Symbolic number of iterations is (unsigned int) pretmp_89 + 4294967294
harris.opt.cpp:157:5: note: not vectorized: control flow in loop.
harris.opt.cpp:157:5: note: bad loop form.

Analyzing loop at harris.opt.cpp:157
harris.opt.cpp:157:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:157:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:157:5: note: === get_loop_niters ===
harris.opt.cpp:157:5: note: Symbolic number of iterations is (unsigned int) pretmp_89 + 4294967294
harris.opt.cpp:157:5: note: === vect_analyze_data_refs ===
Creating dr for *_29
analyze_innermost: success.
	base_address: pretmp_109 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_109 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_32
analyze_innermost: success.
	base_address: pretmp_111 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_111 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_37
analyze_innermost: success.
	base_address: pretmp_113 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_113 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_43
analyze_innermost: success.
	base_address: pretmp_117 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_117 + (sizetype) ((long unsigned int) pretmp_108 * 4)
	Access function 0: {8B, +, 4}_2
harris.opt.cpp:157:5: note: got vectype for stmt: _30 = *_29;
vector(4) float
harris.opt.cpp:157:5: note: got vectype for stmt: _33 = *_32;
vector(4) float
harris.opt.cpp:157:5: note: got vectype for stmt: _38 = *_37;
vector(4) float
harris.opt.cpp:157:5: note: got vectype for stmt: *_43 = _46;
vector(4) float
harris.opt.cpp:157:5: note: === vect_analyze_scalar_cycles ===
harris.opt.cpp:157:5: note: Analyze phi: j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: Access function of PHI: {2, +, 1}_2
harris.opt.cpp:157:5: note: step: 1,  init: 2
harris.opt.cpp:157:5: note: Detected induction.
harris.opt.cpp:157:5: note: Analyze phi: .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: === vect_pattern_recog ===
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _26
harris.opt.cpp:157:5: note: def_stmt: _26 = (long unsigned int) index_25;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand index_25
harris.opt.cpp:157:5: note: def_stmt: index_25 = j_50 + pretmp_108;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:157:5: note: def_stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vect_analyze_data_ref_accesses ===
harris.opt.cpp:157:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.opt.cpp:157:5: note: init: phi relevant? j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: init: phi relevant? .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: init: stmt relevant? index_25 = j_50 + pretmp_108;

harris.opt.cpp:157:5: note: init: stmt relevant? _26 = (long unsigned int) index_25;

harris.opt.cpp:157:5: note: init: stmt relevant? _27 = _26 * 4;

harris.opt.cpp:157:5: note: init: stmt relevant? _29 = pretmp_109 + _27;

harris.opt.cpp:157:5: note: init: stmt relevant? _30 = *_29;

harris.opt.cpp:157:5: note: init: stmt relevant? _32 = pretmp_111 + _27;

harris.opt.cpp:157:5: note: init: stmt relevant? _33 = *_32;

harris.opt.cpp:157:5: note: init: stmt relevant? trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: init: stmt relevant? _35 = _30 * _33;

harris.opt.cpp:157:5: note: init: stmt relevant? _37 = pretmp_113 + _27;

harris.opt.cpp:157:5: note: init: stmt relevant? _38 = *_37;

harris.opt.cpp:157:5: note: init: stmt relevant? _39 = _38 * _38;

harris.opt.cpp:157:5: note: init: stmt relevant? det_40 = _35 - _39;

harris.opt.cpp:157:5: note: init: stmt relevant? _43 = pretmp_117 + _27;

harris.opt.cpp:157:5: note: init: stmt relevant? _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: init: stmt relevant? _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: init: stmt relevant? _46 = det_40 - _45;

harris.opt.cpp:157:5: note: init: stmt relevant? *_43 = _46;

harris.opt.cpp:157:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: init: stmt relevant? j_48 = j_50 + 1;

harris.opt.cpp:157:5: note: init: stmt relevant? if (j_48 < pretmp_89)

harris.opt.cpp:157:5: note: worklist: examine stmt: *_43 = _46;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:157:5: note: def_stmt: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: worklist: examine stmt: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand det_40
harris.opt.cpp:157:5: note: def_stmt: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:157:5: note: def_stmt: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: worklist: examine stmt: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:157:5: note: def_stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: worklist: examine stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: worklist: examine stmt: _33 = *_32;

harris.opt.cpp:157:5: note: worklist: examine stmt: _30 = *_29;

harris.opt.cpp:157:5: note: worklist: examine stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: already marked relevant/live.
harris.opt.cpp:157:5: note: worklist: examine stmt: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _35
harris.opt.cpp:157:5: note: def_stmt: _35 = _30 * _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _39
harris.opt.cpp:157:5: note: def_stmt: _39 = _38 * _38;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: worklist: examine stmt: _39 = _38 * _38;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: already marked relevant/live.
harris.opt.cpp:157:5: note: worklist: examine stmt: _38 = *_37;

harris.opt.cpp:157:5: note: worklist: examine stmt: _35 = _30 * _33;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: already marked relevant/live.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: mark relevant 4, live 0.
harris.opt.cpp:157:5: note: already marked relevant/live.
harris.opt.cpp:157:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _33 = *_32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _38 = *_37;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_43 = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_32;
  stmt_b: _38 = *_37;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_32;
  stmt_b: *_43 = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: *_43 = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _30 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _33 = *_32;
  stmt_b: _33 = *_32;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _38 = *_37;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_43 = _46;
  stmt_b: *_43 = _46;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.opt.cpp:157:5: note: versioning for alias required: can't determine dependence between *_29 and *_43
harris.opt.cpp:157:5: note: mark for run-time aliasing test between *_29 and *_43
harris.opt.cpp:157:5: note: versioning for alias required: can't determine dependence between *_32 and *_43
harris.opt.cpp:157:5: note: mark for run-time aliasing test between *_32 and *_43
harris.opt.cpp:157:5: note: versioning for alias required: can't determine dependence between *_37 and *_43
harris.opt.cpp:157:5: note: mark for run-time aliasing test between *_37 and *_43
harris.opt.cpp:157:5: note: === vect_determine_vectorization_factor ===
harris.opt.cpp:157:5: note: ==> examining phi: j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: ==> examining phi: .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: ==> examining statement: index_25 = j_50 + pretmp_108;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _26 = (long unsigned int) index_25;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _27 = _26 * 4;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _29 = pretmp_109 + _27;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _30 = *_29;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _32 = pretmp_111 + _27;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _33 = *_32;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _35 = _30 * _33;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _37 = pretmp_113 + _27;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _38 = *_37;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _39 = _38 * _38;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _43 = pretmp_117 + _27;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: *_43 = _46;

harris.opt.cpp:157:5: note: get vectype for scalar type:  float
harris.opt.cpp:157:5: note: vectype: vector(4) float
harris.opt.cpp:157:5: note: nunits = 4
harris.opt.cpp:157:5: note: ==> examining statement: j_48 = j_50 + 1;

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: ==> examining statement: if (j_48 < pretmp_89)

harris.opt.cpp:157:5: note: skip.
harris.opt.cpp:157:5: note: vectorization factor = 4
harris.opt.cpp:157:5: note: === vect_analyze_data_refs_alignment ===
harris.opt.cpp:157:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:157:5: note: can't force alignment of ref: *_29
harris.opt.cpp:157:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:157:5: note: can't force alignment of ref: *_32
harris.opt.cpp:157:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:157:5: note: can't force alignment of ref: *_37
harris.opt.cpp:157:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:157:5: note: can't force alignment of ref: *_43
harris.opt.cpp:157:5: note: === vect_prune_runtime_alias_test_list ===
harris.opt.cpp:157:5: note: improved number of alias checks from 3 to 3
harris.opt.cpp:157:5: note: === vect_enhance_data_refs_alignment ===
harris.opt.cpp:157:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:157:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:157:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:157:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:157:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:157:5: note: Analyze phi: j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: Analyze phi: .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: virtual phi. skip.
harris.opt.cpp:157:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:157:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:157:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:157:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Setting misalignment to -1.
harris.opt.cpp:157:5: note: Alignment of access forced using peeling.
harris.opt.cpp:157:5: note: Peeling for alignment will be applied.
harris.opt.cpp:157:5: note: Vectorizing an unaligned access.
harris.opt.cpp:157:5: note: Vectorizing an unaligned access.
harris.opt.cpp:157:5: note: Vectorizing an unaligned access.
harris.opt.cpp:157:5: note: === vect_analyze_slp ===
harris.opt.cpp:157:5: note: === vect_make_slp_decision ===
harris.opt.cpp:157:5: note: === vect_detect_hybrid_slp ===
harris.opt.cpp:157:5: note: === vect_analyze_loop_operations ===
harris.opt.cpp:157:5: note: examining phi: j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: examining phi: .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: ==> examining statement: index_25 = j_50 + pretmp_108;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _26 = (long unsigned int) index_25;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _27 = _26 * 4;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _29 = pretmp_109 + _27;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _30 = *_29;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_model_load_cost: aligned.
harris.opt.cpp:157:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _32 = pretmp_111 + _27;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _33 = *_32;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_32
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_32
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:157:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _35 = _30 * _33;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _37 = pretmp_113 + _27;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _38 = *_37;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_37
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand *_37
harris.opt.cpp:157:5: note: not ssa-name.
harris.opt.cpp:157:5: note: use not simple.
harris.opt.cpp:157:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:157:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _39 = _38 * _38;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _35
harris.opt.cpp:157:5: note: def_stmt: _35 = _30 * _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _39
harris.opt.cpp:157:5: note: def_stmt: _39 = _38 * _38;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _43 = pretmp_117 + _27;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:157:5: note: ==> examining statement: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:157:5: note: def_stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand det_40
harris.opt.cpp:157:5: note: def_stmt: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:157:5: note: def_stmt: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: === vectorizable_operation ===
harris.opt.cpp:157:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: *_43 = _46;

harris.opt.cpp:157:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:157:5: note: def_stmt: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:157:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:157:5: note: ==> examining statement: j_48 = j_50 + 1;

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: ==> examining statement: if (j_48 < pretmp_89)

harris.opt.cpp:157:5: note: irrelevant.
harris.opt.cpp:157:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.opt.cpp:157:5: note: Cost model analysis: 
  Vector inside of loop cost: 14
  Vector prologue cost: 37
  Vector epilogue cost: 22
  Scalar iteration cost: 11
  Scalar outside cost: 1
  Vector outside cost: 59
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 6

harris.opt.cpp:157:5: note:   Runtime profitability threshold = 5
harris.opt.cpp:157:5: note:   Static estimate profitability threshold = 5
harris.opt.cpp:157:5: note: epilog loop required
harris.opt.cpp:157:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:157:5: note: Analyze phi: j_50 = PHI <2(8), j_48(11)>

harris.opt.cpp:157:5: note: Analyze phi: .MEM_57 = PHI <.MEM_5(8), .MEM_47(11)>

harris.opt.cpp:157:5: note: virtual phi. skip.
harris.opt.cpp:157:5: note: loop vectorized
harris.opt.cpp:157:5: note: === vec_transform_loop ===
harris.opt.cpp:157:5: note: Profitability threshold is 5 loop iterations.
harris.opt.cpp:157:5: note: create runtime check for data references *_29 and *_43
harris.opt.cpp:157:5: note: create runtime check for data references *_32 and *_43
harris.opt.cpp:157:5: note: create runtime check for data references *_37 and *_43
harris.opt.cpp:157:5: note: created 3 versioning for alias checks.
harris.opt.cpp:157:5: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #9
Updating SSA information for statement index_25 = j_50 + pretmp_108;
Updating SSA information for statement _26 = (long unsigned int) index_25;
Updating SSA information for statement _27 = _26 * 4;
Updating SSA information for statement _29 = pretmp_109 + _27;
Updating SSA information for statement _30 = *_29;
Updating SSA information for statement _32 = pretmp_111 + _27;
Updating SSA information for statement _33 = *_32;
Updating SSA information for statement trace_34 = _30 + _33;
Updating SSA information for statement _35 = _30 * _33;
Updating SSA information for statement _37 = pretmp_113 + _27;
Updating SSA information for statement _38 = *_37;
Updating SSA information for statement _39 = _38 * _38;
Updating SSA information for statement det_40 = _35 - _39;
Updating SSA information for statement _43 = pretmp_117 + _27;
Updating SSA information for statement _44 = trace_34 * 3.9999999105930328369140625e-2;
Updating SSA information for statement _45 = _44 * trace_34;
Updating SSA information for statement _46 = det_40 - _45;
Updating SSA information for statement *_43 = _46;
Updating SSA information for statement j_48 = j_50 + 1;
Updating SSA information for statement if (j_48 < pretmp_89)
Registering new PHI nodes in block #11
Registering new PHI nodes in block #20
Registering new PHI nodes in block #19
Registering new PHI nodes in block #15
Updating SSA information for statement index_114 = j_50 + pretmp_108;
Updating SSA information for statement _112 = (long unsigned int) index_25;
Updating SSA information for statement _110 = _26 * 4;
Updating SSA information for statement _56 = pretmp_109 + _27;
Updating SSA information for statement _90 = *_29;
Updating SSA information for statement _123 = pretmp_111 + _27;
Updating SSA information for statement _124 = *_32;
Updating SSA information for statement trace_125 = _30 + _33;
Updating SSA information for statement _126 = _30 * _33;
Updating SSA information for statement _127 = pretmp_113 + _27;
Updating SSA information for statement _128 = *_37;
Updating SSA information for statement _129 = _38 * _38;
Updating SSA information for statement det_130 = _35 - _39;
Updating SSA information for statement _131 = pretmp_117 + _27;
Updating SSA information for statement _132 = trace_34 * 3.9999999105930328369140625e-2;
Updating SSA information for statement _133 = _44 * trace_34;
Updating SSA information for statement _134 = det_40 - _45;
Updating SSA information for statement *_43 = _46;
Updating SSA information for statement j_136 = j_50 + 1;
Updating SSA information for statement if (j_48 < pretmp_89)
Registering new PHI nodes in block #16
Registering new PHI nodes in block #10

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_56 -> { _29 }
_90 -> { _30 }
_110 -> { _27 }
_112 -> { _26 }
index_114 -> { index_25 }
.MEM_116 -> { .MEM_57 }
j_118 -> { j_50 }
_123 -> { _32 }
_124 -> { _33 }
trace_125 -> { trace_34 }
_126 -> { _35 }
_127 -> { _37 }
_128 -> { _38 }
_129 -> { _39 }
det_130 -> { det_40 }
_131 -> { _43 }
_132 -> { _44 }
_133 -> { _45 }
_134 -> { _46 }
.MEM_135 -> { .MEM_47 }
j_136 -> { j_48 }
Incremental SSA update started at block: 17
Number of blocks in CFG: 21
Number of blocks to update: 8 ( 38%)
Affected blocks: 9 10 11 15 16 18 19 20


harris.opt.cpp:157:5: note: loop peeled for vectorization to enhance alignment
harris.opt.cpp:157:5: note: created vectp.154_139
harris.opt.cpp:157:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.154_139 & 15) >> 2) & 3, niters.153_138>
Removing basic block 24
<bb 24>:


;; Scaling loop 4 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 2 with scale 0.777800, bounding iterations to 0 from guessed 14
;; guessed iterations are now 11

loop at harris.opt.cpp:158: if (ivtmp_178 < prolog_loop_niters.155_143)

Setting upper bound of nb iterations for prologue loop to 2
harris.opt.cpp:157:5: note: === vect_update_inits_of_dr ===
harris.opt.cpp:157:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 29
<bb 29>:


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 5 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.opt.cpp:157:5: note: vect_update_ivs_after_vectorizer: phi: j_50 = PHI <j_171(33), j_48(11)>

harris.opt.cpp:157:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_57 = PHI <.MEM_173(33), .MEM_47(11)>

harris.opt.cpp:157:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.opt.cpp:157:5: note: ------>vectorizing phi: j_50 = PHI <j_171(37), j_48(11)>

harris.opt.cpp:157:5: note: ------>vectorizing phi: .MEM_57 = PHI <.MEM_173(37), .MEM_47(11)>

harris.opt.cpp:157:5: note: ------>vectorizing statement: index_25 = j_50 + pretmp_108;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _26 = (long unsigned int) index_25;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _27 = _26 * 4;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _29 = pretmp_109 + _27;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _30 = *_29;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: transform load. ncopies = 1
harris.opt.cpp:157:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_109 + (sizetype) ((long unsigned int) pretmp_108 * 4)
harris.opt.cpp:157:5: note: created vectp.162_217
harris.opt.cpp:157:5: note: add new stmt: vect__30.163_224 = MEM[(float *)vectp.161_222];

harris.opt.cpp:157:5: note: ------>vectorizing statement: _32 = pretmp_111 + _27;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _33 = *_32;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: transform load. ncopies = 1
harris.opt.cpp:157:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_111 + (sizetype) ((long unsigned int) pretmp_108 * 4)
harris.opt.cpp:157:5: note: created vectp.165_225
harris.opt.cpp:157:5: note: add new stmt: vect__33.166_232 = MEM[(float *)vectp.164_230];

harris.opt.cpp:157:5: note: ------>vectorizing statement: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _30
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _30
  def_stmt =  _30 = *_29;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _33
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _33
  def_stmt =  _33 = *_32;

harris.opt.cpp:157:5: note: add new stmt: vect_trace_34.167_233 = vect__30.163_224 + vect__33.166_232;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _35 = _30 * _33;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _30
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:157:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _30
  def_stmt =  _30 = *_29;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _33
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _33
harris.opt.cpp:157:5: note: def_stmt: _33 = *_32;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _33
  def_stmt =  _33 = *_32;

harris.opt.cpp:157:5: note: add new stmt: vect__35.168_234 = vect__30.163_224 * vect__33.166_232;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _37 = pretmp_113 + _27;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _38 = *_37;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: transform load. ncopies = 1
harris.opt.cpp:157:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_113 + (sizetype) ((long unsigned int) pretmp_108 * 4)
harris.opt.cpp:157:5: note: created vectp.170_235
harris.opt.cpp:157:5: note: add new stmt: vect__38.171_242 = MEM[(float *)vectp.169_240];

harris.opt.cpp:157:5: note: ------>vectorizing statement: _39 = _38 * _38;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _38
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _38
  def_stmt =  _38 = *_37;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _38
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:157:5: note: def_stmt: _38 = *_37;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _38
  def_stmt =  _38 = *_37;

harris.opt.cpp:157:5: note: add new stmt: vect__39.172_243 = vect__38.171_242 * vect__38.171_242;

harris.opt.cpp:157:5: note: ------>vectorizing statement: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _35
harris.opt.cpp:157:5: note: def_stmt: _35 = _30 * _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _39
harris.opt.cpp:157:5: note: def_stmt: _39 = _38 * _38;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _35
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _35
harris.opt.cpp:157:5: note: def_stmt: _35 = _30 * _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _35
  def_stmt =  _35 = _30 * _33;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _39
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _39
harris.opt.cpp:157:5: note: def_stmt: _39 = _38 * _38;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _39
  def_stmt =  _39 = _38 * _38;

harris.opt.cpp:157:5: note: add new stmt: vect_det_40.173_244 = vect__35.168_234 - vect__39.172_243;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _43 = pretmp_117 + _27;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: trace_34
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  trace_34
  def_stmt =  trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: 3.9999999105930328369140625e-2
harris.opt.cpp:157:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.opt.cpp:157:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:157:5: note: created new init_stmt: vect_cst_.175_245 = { 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2 };

harris.opt.cpp:157:5: note: add new stmt: vect__44.174_246 = vect_trace_34.167_233 * vect_cst_.175_245;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:157:5: note: def_stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _44
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:157:5: note: def_stmt: _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _44
  def_stmt =  _44 = trace_34 * 3.9999999105930328369140625e-2;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: trace_34
harris.opt.cpp:157:5: note: vect_is_simple_use: operand trace_34
harris.opt.cpp:157:5: note: def_stmt: trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  trace_34
  def_stmt =  trace_34 = _30 + _33;

harris.opt.cpp:157:5: note: add new stmt: vect__45.176_247 = vect__44.174_246 * vect_trace_34.167_233;

harris.opt.cpp:157:5: note: ------>vectorizing statement: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand det_40
harris.opt.cpp:157:5: note: def_stmt: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:157:5: note: def_stmt: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform binary/unary operation.
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: det_40
harris.opt.cpp:157:5: note: vect_is_simple_use: operand det_40
harris.opt.cpp:157:5: note: def_stmt: det_40 = _35 - _39;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  det_40
  def_stmt =  det_40 = _35 - _39;

harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _45
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:157:5: note: def_stmt: _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _45
  def_stmt =  _45 = _44 * trace_34;

harris.opt.cpp:157:5: note: add new stmt: vect__46.177_248 = vect_det_40.173_244 - vect__45.176_247;

harris.opt.cpp:157:5: note: ------>vectorizing statement: *_43 = _46;

harris.opt.cpp:157:5: note: transform statement.
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:157:5: note: def_stmt: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: transform store. ncopies = 1
harris.opt.cpp:157:5: note: vect_get_vec_def_for_operand: _46
harris.opt.cpp:157:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:157:5: note: def_stmt: _46 = det_40 - _45;

harris.opt.cpp:157:5: note: type of def: 3.
harris.opt.cpp:157:5: note: def =  _46
  def_stmt =  _46 = det_40 - _45;

harris.opt.cpp:157:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_117 + (sizetype) ((long unsigned int) pretmp_108 * 4)
harris.opt.cpp:157:5: note: created vectp.179_249
harris.opt.cpp:157:5: note: add new stmt: MEM[(float *)vectp.178_254] = vect__46.177_248;

harris.opt.cpp:157:5: note: ------>vectorizing statement: j_48 = j_50 + 1;

harris.opt.cpp:157:5: note: ------>vectorizing statement: vectp.161_223 = vectp.161_222 + 16;

harris.opt.cpp:157:5: note: ------>vectorizing statement: vectp.164_231 = vectp.164_230 + 16;

harris.opt.cpp:157:5: note: ------>vectorizing statement: vectp.169_241 = vectp.169_240 + 16;

harris.opt.cpp:157:5: note: ------>vectorizing statement: vectp.178_255 = vectp.178_254 + 16;

harris.opt.cpp:157:5: note: ------>vectorizing statement: if (j_48 < pretmp_89)


loop at harris.opt.cpp:158: if (ivtmp_257 < bnd.158_181)

;; Scaling loop 2 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 2
harris.opt.cpp:157:5: note: LOOP VECTORIZED

harris.opt.cpp:155:11: note: vectorized 1 loops in function.
Merging blocks 8 and 17
Merging blocks 18 and 25
Merging blocks 21 and 33
Merging blocks 27 and 20
Merging blocks 35 and 28
Created preheader block for loop 4
<built-in> (struct .omp_data_s.3 * .omp_data_i)
{
  vector(4) float * vectp.179;
  vector(4) float * vectp.178;
  vector(4) float vect__46.177;
  vector(4) float vect__45.176;
  vector(4) float vect_cst_.175;
  vector(4) float vect__44.174;
  vector(4) float vect_det_40.173;
  vector(4) float vect__39.172;
  vector(4) float vect__38.171;
  vector(4) float * vectp.170;
  vector(4) float * vectp.169;
  vector(4) float vect__35.168;
  vector(4) float vect_trace_34.167;
  vector(4) float vect__33.166;
  vector(4) float * vectp.165;
  vector(4) float * vectp.164;
  vector(4) float vect__30.163;
  vector(4) float * vectp.162;
  vector(4) float * vectp.161;
  int tmp.160;
  unsigned int ratio_mult_vf.159;
  unsigned int bnd.158;
  unsigned int niters.157;
  sizetype prolog_loop_adjusted_niters.156;
  unsigned int prolog_loop_niters.155;
  vector(4) float * vectp.154;
  unsigned int niters.153;
  float det;
  float trace;
  int index;
  int j;
  int i;
  int q.8_1;
  int tt.9_2;
  bool _4;
  bool _6;
  sizetype _7;
  int _10;
  int _11;
  int _12;
  int _13;
  int q.8_14;
  int tt.9_15;
  int q.8_16;
  int _17;
  int _18;
  int _19;
  int _21;
  float * _22;
  unsigned int _24;
  long unsigned int _26;
  long unsigned int _27;
  unsigned int _28;
  float * _29;
  float _30;
  bool _31;
  float * _32;
  float _33;
  float _35;
  sizetype _36;
  float * _37;
  float _38;
  float _39;
  sizetype _41;
  sizetype _42;
  float * _43;
  float _44;
  float _45;
  float _46;
  unsigned int ivtmp_47;
  float * _51;
  sizetype _52;
  sizetype _53;
  sizetype _54;
  float * _55;
  float * _56;
  sizetype _59;
  sizetype _60;
  sizetype _61;
  sizetype _62;
  bool _63;
  float * _64;
  sizetype _65;
  sizetype _66;
  sizetype _67;
  float * _68;
  sizetype _69;
  sizetype _70;
  sizetype _71;
  bool _72;
  bool _73;
  bool _74;
  float * _75;
  sizetype _76;
  sizetype _77;
  sizetype _78;
  float * _79;
  sizetype _80;
  sizetype _81;
  sizetype _82;
  bool _83;
  float * _84;
  sizetype _85;
  sizetype _86;
  sizetype _87;
  float * _88;
  int pretmp_89;
  float _90;
  sizetype _91;
  sizetype _92;
  sizetype _93;
  bool _94;
  bool _95;
  bool _96;
  float * _97;
  sizetype _98;
  sizetype _99;
  sizetype _100;
  float * _101;
  sizetype _102;
  sizetype _103;
  sizetype _104;
  bool _105;
  float * _106;
  int pretmp_107;
  int pretmp_108;
  float * pretmp_109;
  long unsigned int _110;
  float * pretmp_111;
  long unsigned int _112;
  float * pretmp_113;
  float * & pretmp_115;
  float * pretmp_117;
  bool _119;
  sizetype _120;
  float * _123;
  float _124;
  float _126;
  float * _127;
  float _128;
  float _129;
  float * _131;
  float _132;
  float _133;
  float _134;
  sizetype _140;
  sizetype _141;
  sizetype _142;
  unsigned long _144;
  unsigned long _145;
  unsigned long _146;
  unsigned long _147;
  unsigned int _148;
  unsigned int _149;
  long unsigned int _153;
  long unsigned int _154;
  float * _155;
  float _156;
  float * _157;
  float _158;
  float _160;
  float * _161;
  float _162;
  float _163;
  float * _165;
  float _166;
  float _167;
  float _168;
  unsigned int ivtmp_177;
  unsigned int ivtmp_178;
  unsigned int _182;
  unsigned int _183;
  long unsigned int _188;
  long unsigned int _189;
  float * _190;
  float _191;
  float * _192;
  float _193;
  float _195;
  float * _196;
  float _197;
  float _198;
  float * _200;
  float _201;
  float _202;
  float _203;
  unsigned int _206;
  unsigned int _207;
  unsigned int _208;
  int _216;
  sizetype _218;
  sizetype _219;
  sizetype _220;
  sizetype _221;
  sizetype _226;
  sizetype _227;
  sizetype _228;
  sizetype _229;
  sizetype _236;
  sizetype _237;
  sizetype _238;
  sizetype _239;
  sizetype _250;
  sizetype _251;
  sizetype _252;
  sizetype _253;
  unsigned int ivtmp_257;
  unsigned int ivtmp_258;

  <bb 2>:
  _10 = .omp_data_i_9(D)->R;
  _11 = __builtin_omp_get_num_threads ();
  _12 = __builtin_omp_get_thread_num ();
  _13 = _10 + -2;
  q.8_14 = _13 / _11;
  tt.9_15 = _13 % _11;
  if (_12 < tt.9_15)
    goto <bb 30>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.8_1 = PHI <q.8_16(30), q.8_14(2)>
  # tt.9_2 = PHI <0(30), tt.9_15(2)>
  _17 = q.8_1 * _12;
  _18 = _17 + tt.9_2;
  _19 = _18 + q.8_1;
  if (_18 >= _19)
    goto <bb 29>;
  else
    goto <bb 4>;

  <bb 4>:
  i_20 = _18 + 2;
  _21 = _19 + 2;
  pretmp_89 = .omp_data_i_9(D)->C;

  <bb 5>:
  # i_3 = PHI <i_20(4), i_49(7)>
  if (pretmp_89 > 2)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 6>:
  i_49 = i_3 + 1;
  if (_21 > i_49)
    goto <bb 7>;
  else
    goto <bb 28>;

  <bb 7>:
  goto <bb 5>;

  <bb 8>:
  pretmp_107 = pretmp_89 + 2;
  pretmp_108 = i_3 * pretmp_107;
  pretmp_109 = .omp_data_i_9(D)->Sxx;
  pretmp_111 = .omp_data_i_9(D)->Syy;
  pretmp_113 = .omp_data_i_9(D)->Sxy;
  pretmp_115 = .omp_data_i_9(D)->harris;
  pretmp_117 = *pretmp_115;
  _24 = (unsigned int) pretmp_89;
  _28 = _24 + 4294967294;
  _31 = _28 > 5;
  _36 = (sizetype) pretmp_108;
  _41 = _36 + 6;
  _42 = _41 * 4;
  _22 = pretmp_109 + _42;
  _59 = (sizetype) pretmp_108;
  _7 = _59 + 2;
  _120 = _7 * 4;
  _106 = pretmp_117 + _120;
  _105 = _22 <= _106;
  _104 = (sizetype) pretmp_108;
  _103 = _104 + 6;
  _102 = _103 * 4;
  _101 = pretmp_117 + _102;
  _100 = (sizetype) pretmp_108;
  _99 = _100 + 2;
  _98 = _99 * 4;
  _97 = pretmp_109 + _98;
  _96 = _97 >= _101;
  _95 = _96 | _105;
  _94 = _31 & _95;
  _93 = (sizetype) pretmp_108;
  _92 = _93 + 6;
  _91 = _92 * 4;
  _88 = pretmp_111 + _91;
  _87 = (sizetype) pretmp_108;
  _86 = _87 + 2;
  _85 = _86 * 4;
  _84 = pretmp_117 + _85;
  _83 = _84 >= _88;
  _82 = (sizetype) pretmp_108;
  _81 = _82 + 6;
  _80 = _81 * 4;
  _79 = pretmp_117 + _80;
  _78 = (sizetype) pretmp_108;
  _77 = _78 + 2;
  _76 = _77 * 4;
  _75 = pretmp_111 + _76;
  _74 = _75 >= _79;
  _73 = _74 | _83;
  _72 = _73 & _94;
  _71 = (sizetype) pretmp_108;
  _70 = _71 + 6;
  _69 = _70 * 4;
  _68 = pretmp_113 + _69;
  _67 = (sizetype) pretmp_108;
  _66 = _67 + 2;
  _65 = _66 * 4;
  _64 = pretmp_117 + _65;
  _63 = _64 >= _68;
  _62 = (sizetype) pretmp_108;
  _61 = _62 + 6;
  _60 = _61 * 4;
  _55 = pretmp_117 + _60;
  _54 = (sizetype) pretmp_108;
  _53 = _54 + 2;
  _52 = _53 * 4;
  _51 = pretmp_113 + _52;
  _6 = _51 >= _55;
  _4 = _6 | _63;
  _119 = _4 & _72;
  if (_119 != 0)
    goto <bb 9>;
  else
    goto <bb 25>;

  <bb 9>:
  niters.153_138 = _24 + 4294967294;
  _140 = (sizetype) pretmp_108;
  _141 = _140 + 2;
  _142 = _141 * 4;
  vectp.154_139 = pretmp_109 + _142;
  _144 = (unsigned long) vectp.154_139;
  _145 = _144 & 15;
  _146 = _145 >> 2;
  _147 = -_146;
  _148 = (unsigned int) _147;
  _149 = _148 & 3;
  prolog_loop_niters.155_143 = MIN_EXPR <niters.153_138, _149>;
  if (prolog_loop_niters.155_143 == 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 10>:
  # j_175 = PHI <2(9)>
  # ivtmp_258 = PHI <0(9)>

  <bb 31>:
  # j_150 = PHI <j_175(10), j_170(11)>
  # ivtmp_177 = PHI <ivtmp_258(10), ivtmp_178(11)>
  index_152 = j_150 + pretmp_108;
  _153 = (long unsigned int) index_152;
  _154 = _153 * 4;
  _155 = pretmp_109 + _154;
  _156 = *_155;
  _157 = pretmp_111 + _154;
  _158 = *_157;
  trace_159 = _156 + _158;
  _160 = _156 * _158;
  _161 = pretmp_113 + _154;
  _162 = *_161;
  _163 = _162 * _162;
  det_164 = _160 - _163;
  _165 = pretmp_117 + _154;
  _166 = trace_159 * 3.9999999105930328369140625e-2;
  _167 = _166 * trace_159;
  _168 = det_164 - _167;
  *_165 = _168;
  j_170 = j_150 + 1;
  ivtmp_178 = ivtmp_177 + 1;
  if (ivtmp_178 < prolog_loop_niters.155_143)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  goto <bb 31>;

  <bb 12>:
  # j_172 = PHI <j_170(31)>
  if (niters.153_138 == prolog_loop_niters.155_143)
    goto <bb 22>;
  else
    goto <bb 13>;

  <bb 13>:
  # j_171 = PHI <j_172(12), 2(9)>
  prolog_loop_adjusted_niters.156_179 = (sizetype) prolog_loop_niters.155_143;
  niters.157_180 = niters.153_138 - prolog_loop_niters.155_143;
  _182 = niters.157_180 + 4294967292;
  _183 = _182 >> 2;
  bnd.158_181 = _183 + 1;
  ratio_mult_vf.159_184 = bnd.158_181 << 2;
  _206 = (unsigned int) pretmp_89;
  _207 = _206 - prolog_loop_niters.155_143;
  _208 = _207 + 4294967293;
  if (_208 <= 2)
    goto <bb 19>;
  else
    goto <bb 14>;

  <bb 14>:
  _218 = (sizetype) pretmp_108;
  _219 = prolog_loop_adjusted_niters.156_179 + _218;
  _220 = _219 + 2;
  _221 = _220 * 4;
  vectp.162_217 = pretmp_109 + _221;
  _226 = (sizetype) pretmp_108;
  _227 = prolog_loop_adjusted_niters.156_179 + _226;
  _228 = _227 + 2;
  _229 = _228 * 4;
  vectp.165_225 = pretmp_111 + _229;
  _236 = (sizetype) pretmp_108;
  _237 = prolog_loop_adjusted_niters.156_179 + _236;
  _238 = _237 + 2;
  _239 = _238 * 4;
  vectp.170_235 = pretmp_113 + _239;
  vect_cst_.175_245 = { 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2 };
  _250 = (sizetype) pretmp_108;
  _251 = prolog_loop_adjusted_niters.156_179 + _250;
  _252 = _251 + 2;
  _253 = _252 * 4;
  vectp.179_249 = pretmp_117 + _253;

  <bb 15>:
  # j_50 = PHI <j_171(14), j_48(24)>
  # vectp.161_222 = PHI <vectp.162_217(14), vectp.161_223(24)>
  # vectp.164_230 = PHI <vectp.165_225(14), vectp.164_231(24)>
  # vectp.169_240 = PHI <vectp.170_235(14), vectp.169_241(24)>
  # vectp.178_254 = PHI <vectp.179_249(14), vectp.178_255(24)>
  # ivtmp_47 = PHI <0(14), ivtmp_257(24)>
  index_25 = j_50 + pretmp_108;
  _26 = (long unsigned int) index_25;
  _27 = _26 * 4;
  _29 = pretmp_109 + _27;
  vect__30.163_224 = MEM[(float *)vectp.161_222];
  _30 = *_29;
  _32 = pretmp_111 + _27;
  vect__33.166_232 = MEM[(float *)vectp.164_230];
  _33 = *_32;
  vect_trace_34.167_233 = vect__30.163_224 + vect__33.166_232;
  trace_34 = _30 + _33;
  vect__35.168_234 = vect__30.163_224 * vect__33.166_232;
  _35 = _30 * _33;
  _37 = pretmp_113 + _27;
  vect__38.171_242 = MEM[(float *)vectp.169_240];
  _38 = *_37;
  vect__39.172_243 = vect__38.171_242 * vect__38.171_242;
  _39 = _38 * _38;
  vect_det_40.173_244 = vect__35.168_234 - vect__39.172_243;
  det_40 = _35 - _39;
  _43 = pretmp_117 + _27;
  vect__44.174_246 = vect_trace_34.167_233 * vect_cst_.175_245;
  _44 = trace_34 * 3.9999999105930328369140625e-2;
  vect__45.176_247 = vect__44.174_246 * vect_trace_34.167_233;
  _45 = _44 * trace_34;
  vect__46.177_248 = vect_det_40.173_244 - vect__45.176_247;
  _46 = det_40 - _45;
  MEM[(float *)vectp.178_254] = vect__46.177_248;
  j_48 = j_50 + 1;
  vectp.161_223 = vectp.161_222 + 16;
  vectp.164_231 = vectp.164_230 + 16;
  vectp.169_241 = vectp.169_240 + 16;
  vectp.178_255 = vectp.178_254 + 16;
  ivtmp_257 = ivtmp_47 + 1;
  if (ivtmp_257 < bnd.158_181)
    goto <bb 24>;
  else
    goto <bb 18>;

  <bb 16>:
  # j_185 = PHI <j_205(17), j_209(19)>
  index_187 = j_185 + pretmp_108;
  _188 = (long unsigned int) index_187;
  _189 = _188 * 4;
  _190 = pretmp_109 + _189;
  _191 = *_190;
  _192 = pretmp_111 + _189;
  _193 = *_192;
  trace_194 = _191 + _193;
  _195 = _191 * _193;
  _196 = pretmp_113 + _189;
  _197 = *_196;
  _198 = _197 * _197;
  det_199 = _195 - _198;
  _200 = pretmp_117 + _189;
  _201 = trace_194 * 3.9999999105930328369140625e-2;
  _202 = _201 * trace_194;
  _203 = det_199 - _202;
  *_200 = _203;
  j_205 = j_185 + 1;
  if (j_205 < pretmp_89)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:
  goto <bb 16>;

  <bb 18>:
  # j_210 = PHI <j_48(15)>
  _216 = (int) ratio_mult_vf.159_184;
  tmp.160_215 = j_171 + _216;
  if (niters.157_180 == ratio_mult_vf.159_184)
    goto <bb 21>;
  else
    goto <bb 19>;

  <bb 19>:
  # j_209 = PHI <tmp.160_215(18), j_171(13)>
  goto <bb 16>;

  <bb 20>:

  <bb 21>:

  <bb 22>:

  <bb 23>:
  goto <bb 6>;

  <bb 24>:
  goto <bb 15>;

  <bb 25>:

  <bb 26>:
  # j_118 = PHI <2(25), j_136(27)>
  index_114 = j_118 + pretmp_108;
  _112 = (long unsigned int) index_114;
  _110 = _112 * 4;
  _56 = pretmp_109 + _110;
  _90 = *_56;
  _123 = pretmp_111 + _110;
  _124 = *_123;
  trace_125 = _90 + _124;
  _126 = _90 * _124;
  _127 = pretmp_113 + _110;
  _128 = *_127;
  _129 = _128 * _128;
  det_130 = _126 - _129;
  _131 = pretmp_117 + _110;
  _132 = trace_125 * 3.9999999105930328369140625e-2;
  _133 = _132 * trace_125;
  _134 = det_130 - _133;
  *_131 = _134;
  j_136 = j_118 + 1;
  if (j_136 < pretmp_89)
    goto <bb 27>;
  else
    goto <bb 23>;

  <bb 27>:
  goto <bb 26>;

  <bb 28>:

  <bb 29>:
  return;

  <bb 30>:
  q.8_16 = q.8_14 + 1;
  goto <bb 3>;

}



;; Function <built-in> (_Z10harris_optiiPfRS_._omp_fn.2, funcdef_no=4431, decl_uid=80574, symbol_order=3090)


Analyzing loop at harris.opt.cpp:112
harris.opt.cpp:112:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:112:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:112:5: note: ===== analyze_loop_nest_1 =====
harris.opt.cpp:112:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:112:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 1](no_overflow) < pretmp_234
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) pretmp_234 + 4294967293, bounded by 2147483644
harris.opt.cpp:112:5: note: Symbolic number of iterations is (unsigned int) pretmp_234 + 4294967294
harris.opt.cpp:112:5: note: not vectorized: control flow in loop.
harris.opt.cpp:112:5: note: bad loop form.

Analyzing loop at harris.opt.cpp:112
harris.opt.cpp:112:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:112:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:112:5: note: === get_loop_niters ===
harris.opt.cpp:112:5: note: Symbolic number of iterations is (unsigned int) pretmp_234 + 4294967294
harris.opt.cpp:112:5: note: === vect_analyze_data_refs ===
Creating dr for *_40
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_42
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_47
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) pretmp_286 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) pretmp_286 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_51
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_54
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_59
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) pretmp_287 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) pretmp_287 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_65
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_68
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_73
analyze_innermost: success.
	base_address: pretmp_292 + (sizetype) pretmp_289 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_292 + (sizetype) pretmp_289 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_35
analyze_innermost: success.
	base_address: pretmp_290 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_290 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_80
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_82
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_85
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) pretmp_286 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) pretmp_286 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_88
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_91
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_94
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) pretmp_287 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) pretmp_287 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_97
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_100
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_103
analyze_innermost: success.
	base_address: pretmp_296 + (sizetype) pretmp_289 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_296 + (sizetype) pretmp_289 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_78
analyze_innermost: success.
	base_address: pretmp_294 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_294 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_110
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_112
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_286 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_115
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) pretmp_286 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) pretmp_286 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_118
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_121
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_124
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) pretmp_287 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) pretmp_287 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_127
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 4(OVF)
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {4B(OVF), +, 4}_2
Creating dr for *_130
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) ((long unsigned int) pretmp_289 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_133
analyze_innermost: success.
	base_address: pretmp_300 + (sizetype) pretmp_289 * 4
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *pretmp_300 + (sizetype) pretmp_289 * 4
	Access function 0: {12B, +, 4}_2
Creating dr for *_108
analyze_innermost: success.
	base_address: pretmp_298 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_298 + (sizetype) ((long unsigned int) pretmp_287 * 4)
	Access function 0: {8B, +, 4}_2
harris.opt.cpp:112:5: note: got vectype for stmt: _41 = *_40;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _43 = *_42;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _48 = *_47;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _52 = *_51;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _55 = *_54;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _60 = *_59;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _66 = *_65;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _69 = *_68;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _74 = *_73;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: *_35 = _75;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _81 = *_80;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _83 = *_82;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _86 = *_85;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _89 = *_88;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _92 = *_91;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _95 = *_94;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _98 = *_97;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _101 = *_100;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _104 = *_103;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: *_78 = _105;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _111 = *_110;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _113 = *_112;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _116 = *_115;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _119 = *_118;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _122 = *_121;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _125 = *_124;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _128 = *_127;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _131 = *_130;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: _134 = *_133;
vector(4) float
harris.opt.cpp:112:5: note: got vectype for stmt: *_108 = _135;
vector(4) float
harris.opt.cpp:112:5: note: === vect_analyze_scalar_cycles ===
harris.opt.cpp:112:5: note: Analyze phi: j_139 = PHI <2(9), j_137(12)>

harris.opt.cpp:112:5: note: Access function of PHI: {2, +, 1}_2
harris.opt.cpp:112:5: note: step: 1,  init: 2
harris.opt.cpp:112:5: note: Detected induction.
harris.opt.cpp:112:5: note: Analyze phi: .MEM_146 = PHI <.MEM_5(9), .MEM_136(12)>

harris.opt.cpp:112:5: note: === vect_pattern_recog ===
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _32
harris.opt.cpp:112:5: note: def_stmt: _32 = (long unsigned int) index2_28;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand index2_28
harris.opt.cpp:112:5: note: def_stmt: index2_28 = j_139 + pretmp_287;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:112:5: note: def_stmt: _36 = (long unsigned int) index1_26;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand index1_26
harris.opt.cpp:112:5: note: def_stmt: index1_26 = j_139 + pretmp_286;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:112:5: note: def_stmt: _45 = _36 + 1;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _57
harris.opt.cpp:112:5: note: def_stmt: _57 = _32 + 1;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _62
harris.opt.cpp:112:5: note: def_stmt: _62 = (long unsigned int) index3_31;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand index3_31
harris.opt.cpp:112:5: note: def_stmt: index3_31 = j_139 + pretmp_289;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _71
harris.opt.cpp:112:5: note: def_stmt: _71 = _62 + 1;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: === vect_analyze_data_ref_accesses ===
harris.opt.cpp:112:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.opt.cpp:112:5: note: init: phi relevant? j_139 = PHI <2(9), j_137(12)>

harris.opt.cpp:112:5: note: init: phi relevant? .MEM_146 = PHI <.MEM_5(9), .MEM_136(12)>

harris.opt.cpp:112:5: note: init: stmt relevant? index1_26 = j_139 + pretmp_286;

harris.opt.cpp:112:5: note: init: stmt relevant? index2_28 = j_139 + pretmp_287;

harris.opt.cpp:112:5: note: init: stmt relevant? index3_31 = j_139 + pretmp_289;

harris.opt.cpp:112:5: note: init: stmt relevant? _32 = (long unsigned int) index2_28;

harris.opt.cpp:112:5: note: init: stmt relevant? _33 = _32 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _35 = pretmp_290 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _36 = (long unsigned int) index1_26;

harris.opt.cpp:112:5: note: init: stmt relevant? _37 = _36 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _38 = _37 + 18446744073709551612;

harris.opt.cpp:112:5: note: init: stmt relevant? _40 = pretmp_292 + _38;

harris.opt.cpp:112:5: note: init: stmt relevant? _41 = *_40;

harris.opt.cpp:112:5: note: init: stmt relevant? _42 = pretmp_292 + _37;

harris.opt.cpp:112:5: note: init: stmt relevant? _43 = *_42;

harris.opt.cpp:112:5: note: init: stmt relevant? _44 = _41 + _43;

harris.opt.cpp:112:5: note: init: stmt relevant? _45 = _36 + 1;

harris.opt.cpp:112:5: note: init: stmt relevant? _46 = _45 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _47 = pretmp_292 + _46;

harris.opt.cpp:112:5: note: init: stmt relevant? _48 = *_47;

harris.opt.cpp:112:5: note: init: stmt relevant? _49 = _44 + _48;

harris.opt.cpp:112:5: note: init: stmt relevant? _50 = _33 + 18446744073709551612;

harris.opt.cpp:112:5: note: init: stmt relevant? _51 = pretmp_292 + _50;

harris.opt.cpp:112:5: note: init: stmt relevant? _52 = *_51;

harris.opt.cpp:112:5: note: init: stmt relevant? _53 = _49 + _52;

harris.opt.cpp:112:5: note: init: stmt relevant? _54 = pretmp_292 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _55 = *_54;

harris.opt.cpp:112:5: note: init: stmt relevant? _56 = _53 + _55;

harris.opt.cpp:112:5: note: init: stmt relevant? _57 = _32 + 1;

harris.opt.cpp:112:5: note: init: stmt relevant? _58 = _57 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _59 = pretmp_292 + _58;

harris.opt.cpp:112:5: note: init: stmt relevant? _60 = *_59;

harris.opt.cpp:112:5: note: init: stmt relevant? _61 = _56 + _60;

harris.opt.cpp:112:5: note: init: stmt relevant? _62 = (long unsigned int) index3_31;

harris.opt.cpp:112:5: note: init: stmt relevant? _63 = _62 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _64 = _63 + 18446744073709551612;

harris.opt.cpp:112:5: note: init: stmt relevant? _65 = pretmp_292 + _64;

harris.opt.cpp:112:5: note: init: stmt relevant? _66 = *_65;

harris.opt.cpp:112:5: note: init: stmt relevant? _67 = _61 + _66;

harris.opt.cpp:112:5: note: init: stmt relevant? _68 = pretmp_292 + _63;

harris.opt.cpp:112:5: note: init: stmt relevant? _69 = *_68;

harris.opt.cpp:112:5: note: init: stmt relevant? _70 = _67 + _69;

harris.opt.cpp:112:5: note: init: stmt relevant? _71 = _62 + 1;

harris.opt.cpp:112:5: note: init: stmt relevant? _72 = _71 * 4;

harris.opt.cpp:112:5: note: init: stmt relevant? _73 = pretmp_292 + _72;

harris.opt.cpp:112:5: note: init: stmt relevant? _74 = *_73;

harris.opt.cpp:112:5: note: init: stmt relevant? _75 = _70 + _74;

harris.opt.cpp:112:5: note: init: stmt relevant? *_35 = _75;

harris.opt.cpp:112:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: init: stmt relevant? _78 = pretmp_294 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _80 = pretmp_296 + _38;

harris.opt.cpp:112:5: note: init: stmt relevant? _81 = *_80;

harris.opt.cpp:112:5: note: init: stmt relevant? _82 = pretmp_296 + _37;

harris.opt.cpp:112:5: note: init: stmt relevant? _83 = *_82;

harris.opt.cpp:112:5: note: init: stmt relevant? _84 = _81 + _83;

harris.opt.cpp:112:5: note: init: stmt relevant? _85 = pretmp_296 + _46;

harris.opt.cpp:112:5: note: init: stmt relevant? _86 = *_85;

harris.opt.cpp:112:5: note: init: stmt relevant? _87 = _84 + _86;

harris.opt.cpp:112:5: note: init: stmt relevant? _88 = pretmp_296 + _50;

harris.opt.cpp:112:5: note: init: stmt relevant? _89 = *_88;

harris.opt.cpp:112:5: note: init: stmt relevant? _90 = _87 + _89;

harris.opt.cpp:112:5: note: init: stmt relevant? _91 = pretmp_296 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _92 = *_91;

harris.opt.cpp:112:5: note: init: stmt relevant? _93 = _90 + _92;

harris.opt.cpp:112:5: note: init: stmt relevant? _94 = pretmp_296 + _58;

harris.opt.cpp:112:5: note: init: stmt relevant? _95 = *_94;

harris.opt.cpp:112:5: note: init: stmt relevant? _96 = _93 + _95;

harris.opt.cpp:112:5: note: init: stmt relevant? _97 = pretmp_296 + _64;

harris.opt.cpp:112:5: note: init: stmt relevant? _98 = *_97;

harris.opt.cpp:112:5: note: init: stmt relevant? _99 = _96 + _98;

harris.opt.cpp:112:5: note: init: stmt relevant? _100 = pretmp_296 + _63;

harris.opt.cpp:112:5: note: init: stmt relevant? _101 = *_100;

harris.opt.cpp:112:5: note: init: stmt relevant? _102 = _99 + _101;

harris.opt.cpp:112:5: note: init: stmt relevant? _103 = pretmp_296 + _72;

harris.opt.cpp:112:5: note: init: stmt relevant? _104 = *_103;

harris.opt.cpp:112:5: note: init: stmt relevant? _105 = _102 + _104;

harris.opt.cpp:112:5: note: init: stmt relevant? *_78 = _105;

harris.opt.cpp:112:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: init: stmt relevant? _108 = pretmp_298 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _110 = pretmp_300 + _38;

harris.opt.cpp:112:5: note: init: stmt relevant? _111 = *_110;

harris.opt.cpp:112:5: note: init: stmt relevant? _112 = pretmp_300 + _37;

harris.opt.cpp:112:5: note: init: stmt relevant? _113 = *_112;

harris.opt.cpp:112:5: note: init: stmt relevant? _114 = _111 + _113;

harris.opt.cpp:112:5: note: init: stmt relevant? _115 = pretmp_300 + _46;

harris.opt.cpp:112:5: note: init: stmt relevant? _116 = *_115;

harris.opt.cpp:112:5: note: init: stmt relevant? _117 = _114 + _116;

harris.opt.cpp:112:5: note: init: stmt relevant? _118 = pretmp_300 + _50;

harris.opt.cpp:112:5: note: init: stmt relevant? _119 = *_118;

harris.opt.cpp:112:5: note: init: stmt relevant? _120 = _117 + _119;

harris.opt.cpp:112:5: note: init: stmt relevant? _121 = pretmp_300 + _33;

harris.opt.cpp:112:5: note: init: stmt relevant? _122 = *_121;

harris.opt.cpp:112:5: note: init: stmt relevant? _123 = _120 + _122;

harris.opt.cpp:112:5: note: init: stmt relevant? _124 = pretmp_300 + _58;

harris.opt.cpp:112:5: note: init: stmt relevant? _125 = *_124;

harris.opt.cpp:112:5: note: init: stmt relevant? _126 = _123 + _125;

harris.opt.cpp:112:5: note: init: stmt relevant? _127 = pretmp_300 + _64;

harris.opt.cpp:112:5: note: init: stmt relevant? _128 = *_127;

harris.opt.cpp:112:5: note: init: stmt relevant? _129 = _126 + _128;

harris.opt.cpp:112:5: note: init: stmt relevant? _130 = pretmp_300 + _63;

harris.opt.cpp:112:5: note: init: stmt relevant? _131 = *_130;

harris.opt.cpp:112:5: note: init: stmt relevant? _132 = _129 + _131;

harris.opt.cpp:112:5: note: init: stmt relevant? _133 = pretmp_300 + _72;

harris.opt.cpp:112:5: note: init: stmt relevant? _134 = *_133;

harris.opt.cpp:112:5: note: init: stmt relevant? _135 = _132 + _134;

harris.opt.cpp:112:5: note: init: stmt relevant? *_108 = _135;

harris.opt.cpp:112:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: init: stmt relevant? j_137 = j_139 + 1;

harris.opt.cpp:112:5: note: init: stmt relevant? if (j_137 < pretmp_234)

harris.opt.cpp:112:5: note: worklist: examine stmt: *_108 = _135;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _135
harris.opt.cpp:112:5: note: def_stmt: _135 = _132 + _134;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _135 = _132 + _134;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _132
harris.opt.cpp:112:5: note: def_stmt: _132 = _129 + _131;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _134
harris.opt.cpp:112:5: note: def_stmt: _134 = *_133;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _134 = *_133;

harris.opt.cpp:112:5: note: worklist: examine stmt: _132 = _129 + _131;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _129
harris.opt.cpp:112:5: note: def_stmt: _129 = _126 + _128;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _131
harris.opt.cpp:112:5: note: def_stmt: _131 = *_130;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _131 = *_130;

harris.opt.cpp:112:5: note: worklist: examine stmt: _129 = _126 + _128;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _126
harris.opt.cpp:112:5: note: def_stmt: _126 = _123 + _125;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _128
harris.opt.cpp:112:5: note: def_stmt: _128 = *_127;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _128 = *_127;

harris.opt.cpp:112:5: note: worklist: examine stmt: _126 = _123 + _125;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _123
harris.opt.cpp:112:5: note: def_stmt: _123 = _120 + _122;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _125
harris.opt.cpp:112:5: note: def_stmt: _125 = *_124;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _125 = *_124;

harris.opt.cpp:112:5: note: worklist: examine stmt: _123 = _120 + _122;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _120
harris.opt.cpp:112:5: note: def_stmt: _120 = _117 + _119;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _122
harris.opt.cpp:112:5: note: def_stmt: _122 = *_121;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _122 = *_121;

harris.opt.cpp:112:5: note: worklist: examine stmt: _120 = _117 + _119;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _117
harris.opt.cpp:112:5: note: def_stmt: _117 = _114 + _116;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _119
harris.opt.cpp:112:5: note: def_stmt: _119 = *_118;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _119 = *_118;

harris.opt.cpp:112:5: note: worklist: examine stmt: _117 = _114 + _116;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _114
harris.opt.cpp:112:5: note: def_stmt: _114 = _111 + _113;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _116
harris.opt.cpp:112:5: note: def_stmt: _116 = *_115;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _116 = *_115;

harris.opt.cpp:112:5: note: worklist: examine stmt: _114 = _111 + _113;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _111
harris.opt.cpp:112:5: note: def_stmt: _111 = *_110;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _113
harris.opt.cpp:112:5: note: def_stmt: _113 = *_112;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _113 = *_112;

harris.opt.cpp:112:5: note: worklist: examine stmt: _111 = *_110;

harris.opt.cpp:112:5: note: worklist: examine stmt: *_78 = _105;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _105
harris.opt.cpp:112:5: note: def_stmt: _105 = _102 + _104;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _105 = _102 + _104;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _102
harris.opt.cpp:112:5: note: def_stmt: _102 = _99 + _101;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _104
harris.opt.cpp:112:5: note: def_stmt: _104 = *_103;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _104 = *_103;

harris.opt.cpp:112:5: note: worklist: examine stmt: _102 = _99 + _101;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _99
harris.opt.cpp:112:5: note: def_stmt: _99 = _96 + _98;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:112:5: note: def_stmt: _101 = *_100;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _101 = *_100;

harris.opt.cpp:112:5: note: worklist: examine stmt: _99 = _96 + _98;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _96
harris.opt.cpp:112:5: note: def_stmt: _96 = _93 + _95;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:112:5: note: def_stmt: _98 = *_97;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _98 = *_97;

harris.opt.cpp:112:5: note: worklist: examine stmt: _96 = _93 + _95;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _93
harris.opt.cpp:112:5: note: def_stmt: _93 = _90 + _92;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:112:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _95 = *_94;

harris.opt.cpp:112:5: note: worklist: examine stmt: _93 = _90 + _92;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _90
harris.opt.cpp:112:5: note: def_stmt: _90 = _87 + _89;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _92
harris.opt.cpp:112:5: note: def_stmt: _92 = *_91;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _92 = *_91;

harris.opt.cpp:112:5: note: worklist: examine stmt: _90 = _87 + _89;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _87
harris.opt.cpp:112:5: note: def_stmt: _87 = _84 + _86;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _89
harris.opt.cpp:112:5: note: def_stmt: _89 = *_88;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _89 = *_88;

harris.opt.cpp:112:5: note: worklist: examine stmt: _87 = _84 + _86;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _84
harris.opt.cpp:112:5: note: def_stmt: _84 = _81 + _83;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _86
harris.opt.cpp:112:5: note: def_stmt: _86 = *_85;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _86 = *_85;

harris.opt.cpp:112:5: note: worklist: examine stmt: _84 = _81 + _83;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:112:5: note: def_stmt: _81 = *_80;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _83
harris.opt.cpp:112:5: note: def_stmt: _83 = *_82;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _83 = *_82;

harris.opt.cpp:112:5: note: worklist: examine stmt: _81 = *_80;

harris.opt.cpp:112:5: note: worklist: examine stmt: *_35 = _75;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _75
harris.opt.cpp:112:5: note: def_stmt: _75 = _70 + _74;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _75 = _70 + _74;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _70
harris.opt.cpp:112:5: note: def_stmt: _70 = _67 + _69;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _74
harris.opt.cpp:112:5: note: def_stmt: _74 = *_73;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _74 = *_73;

harris.opt.cpp:112:5: note: worklist: examine stmt: _70 = _67 + _69;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _67
harris.opt.cpp:112:5: note: def_stmt: _67 = _61 + _66;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _69
harris.opt.cpp:112:5: note: def_stmt: _69 = *_68;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _69 = *_68;

harris.opt.cpp:112:5: note: worklist: examine stmt: _67 = _61 + _66;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _61
harris.opt.cpp:112:5: note: def_stmt: _61 = _56 + _60;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:112:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _66 = *_65;

harris.opt.cpp:112:5: note: worklist: examine stmt: _61 = _56 + _60;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _56
harris.opt.cpp:112:5: note: def_stmt: _56 = _53 + _55;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _60
harris.opt.cpp:112:5: note: def_stmt: _60 = *_59;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _60 = *_59;

harris.opt.cpp:112:5: note: worklist: examine stmt: _56 = _53 + _55;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _53
harris.opt.cpp:112:5: note: def_stmt: _53 = _49 + _52;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _55
harris.opt.cpp:112:5: note: def_stmt: _55 = *_54;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _55 = *_54;

harris.opt.cpp:112:5: note: worklist: examine stmt: _53 = _49 + _52;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _49
harris.opt.cpp:112:5: note: def_stmt: _49 = _44 + _48;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _52
harris.opt.cpp:112:5: note: def_stmt: _52 = *_51;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _52 = *_51;

harris.opt.cpp:112:5: note: worklist: examine stmt: _49 = _44 + _48;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:112:5: note: def_stmt: _44 = _41 + _43;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _48
harris.opt.cpp:112:5: note: def_stmt: _48 = *_47;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _48 = *_47;

harris.opt.cpp:112:5: note: worklist: examine stmt: _44 = _41 + _43;

harris.opt.cpp:112:5: note: vect_is_simple_use: operand _41
harris.opt.cpp:112:5: note: def_stmt: _41 = *_40;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: vect_is_simple_use: operand _43
harris.opt.cpp:112:5: note: def_stmt: _43 = *_42;

harris.opt.cpp:112:5: note: type of def: 3.
harris.opt.cpp:112:5: note: mark relevant 4, live 0.
harris.opt.cpp:112:5: note: worklist: examine stmt: _43 = *_42;

harris.opt.cpp:112:5: note: worklist: examine stmt: _41 = *_40;

harris.opt.cpp:112:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _43 = *_42;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _48 = *_47;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _52 = *_51;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _55 = *_54;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _48 = *_47;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _52 = *_51;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _55 = *_54;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _52 = *_51;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _55 = *_54;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _55 = *_54;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _69 = *_68;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _74 = *_73;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _69 = *_68;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _74 = *_73;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _74 = *_73;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: *_35 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _81 = *_80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _83 = *_82;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _86 = *_85;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _83 = *_82;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _86 = *_85;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _86 = *_85;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _89 = *_88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _92 = *_91;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _92 = *_91;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _98 = *_97;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _101 = *_100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _104 = *_103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _101 = *_100;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _104 = *_103;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _104 = *_103;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: *_78 = _105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _111 = *_110;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _116 = *_115;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _116 = *_115;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _116 = *_115;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _119 = *_118;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _122 = *_121;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _125 = *_124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _122 = *_121;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _125 = *_124;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: _125 = *_124;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *_124;
  stmt_b: _128 = *_127;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *_124;
  stmt_b: _131 = *_130;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *_124;
  stmt_b: _134 = *_133;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *_124;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *_127;
  stmt_b: _131 = *_130;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _128 = *_127;
  stmt_b: _134 = *_133;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _128 = *_127;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _134 = *_133;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _134 = *_133;
  stmt_b: *_108 = _135;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _43 = *_42;
  stmt_b: _43 = *_42;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _48 = *_47;
  stmt_b: _48 = *_47;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _52 = *_51;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _55 = *_54;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _66 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _69 = *_68;
  stmt_b: _69 = *_68;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _74 = *_73;
  stmt_b: _74 = *_73;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_35 = _75;
  stmt_b: *_35 = _75;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _81 = *_80;
  stmt_b: _81 = *_80;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _83 = *_82;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _86 = *_85;
  stmt_b: _86 = *_85;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _89 = *_88;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _92 = *_91;
  stmt_b: _92 = *_91;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _98 = *_97;
  stmt_b: _98 = *_97;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _101 = *_100;
  stmt_b: _101 = *_100;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _104 = *_103;
  stmt_b: _104 = *_103;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_78 = _105;
  stmt_b: *_78 = _105;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _111 = *_110;
  stmt_b: _111 = *_110;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _116 = *_115;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _119 = *_118;
  stmt_b: _119 = *_118;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _122 = *_121;
  stmt_b: _122 = *_121;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _125 = *_124;
  stmt_b: _125 = *_124;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _128 = *_127;
  stmt_b: _128 = *_127;
(analyze_overlapping_iterations 
  (chrec_a = {4B(OVF), +, 4}_2)
  (chrec_b = {4B(OVF), +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _131 = *_130;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _134 = *_133;
  stmt_b: _134 = *_133;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_2)
  (chrec_b = {12B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_108 = _135;
  stmt_b: *_108 = _135;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_40 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_40 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_40 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_40 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_40 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_40 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_42 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_42 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_42 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_42 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_42 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_42 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_47 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_47 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_47 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_47 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_47 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_47 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_51 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_51 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_51 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_51 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_51 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_51 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_54 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_54 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_54 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_54 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_54 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_54 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_59 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_59 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_59 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_59 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_59 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_59 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_65 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_65 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_65 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_65 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_65 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_65 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_68 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_68 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_68 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_68 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_68 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_68 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_73 and *_35
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_73 and *_35
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_73 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_73 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_73 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_73 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_80
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_80
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_82
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_82
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_85
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_85
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_88
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_88
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_91
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_91
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_94
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_94
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_97
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_97
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_100
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_100
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_103
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_103
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_110
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_110
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_112
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_112
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_115
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_115
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_118
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_118
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_121
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_121
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_124
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_124
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_127
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_127
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_130
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_130
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_133
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_133
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_35 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_35 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_80 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_80 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_80 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_80 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_82 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_82 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_82 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_82 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_85 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_85 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_85 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_85 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_88 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_88 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_88 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_88 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_91 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_91 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_91 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_91 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_94 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_94 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_94 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_94 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_97 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_97 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_97 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_97 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_100 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_100 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_100 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_100 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_103 and *_78
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_103 and *_78
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_103 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_103 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_110
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_110
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_112
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_112
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_115
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_115
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_118
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_118
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_121
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_121
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_124
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_124
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_127
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_127
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_130
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_130
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_133
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_133
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_78 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_78 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_110 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_110 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_112 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_112 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_115 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_115 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_118 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_118 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_121 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_121 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_124 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_124 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_127 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_127 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_130 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_130 and *_108
harris.opt.cpp:112:5: note: versioning for alias required: can't determine dependence between *_133 and *_108
harris.opt.cpp:112:5: note: mark for run-time aliasing test between *_133 and *_108
harris.opt.cpp:112:5: note: === vect_determine_vectorization_factor ===
harris.opt.cpp:112:5: note: ==> examining phi: j_139 = PHI <2(9), j_137(12)>

harris.opt.cpp:112:5: note: ==> examining phi: .MEM_146 = PHI <.MEM_5(9), .MEM_136(12)>

harris.opt.cpp:112:5: note: ==> examining statement: index1_26 = j_139 + pretmp_286;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: index2_28 = j_139 + pretmp_287;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: index3_31 = j_139 + pretmp_289;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _32 = (long unsigned int) index2_28;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _33 = _32 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _35 = pretmp_290 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _36 = (long unsigned int) index1_26;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _37 = _36 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _38 = _37 + 18446744073709551612;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _40 = pretmp_292 + _38;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _41 = *_40;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _42 = pretmp_292 + _37;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _43 = *_42;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _44 = _41 + _43;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _45 = _36 + 1;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _46 = _45 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _47 = pretmp_292 + _46;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _48 = *_47;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _49 = _44 + _48;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _50 = _33 + 18446744073709551612;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _51 = pretmp_292 + _50;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _52 = *_51;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _53 = _49 + _52;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _54 = pretmp_292 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _55 = *_54;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _56 = _53 + _55;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _57 = _32 + 1;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _58 = _57 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _59 = pretmp_292 + _58;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _60 = *_59;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _61 = _56 + _60;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _62 = (long unsigned int) index3_31;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _63 = _62 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _64 = _63 + 18446744073709551612;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _65 = pretmp_292 + _64;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _66 = *_65;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _67 = _61 + _66;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _68 = pretmp_292 + _63;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _69 = *_68;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _70 = _67 + _69;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _71 = _62 + 1;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _72 = _71 * 4;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _73 = pretmp_292 + _72;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _74 = *_73;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _75 = _70 + _74;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: *_35 = _75;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _78 = pretmp_294 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _80 = pretmp_296 + _38;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _81 = *_80;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _82 = pretmp_296 + _37;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _83 = *_82;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _84 = _81 + _83;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _85 = pretmp_296 + _46;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _86 = *_85;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _87 = _84 + _86;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _88 = pretmp_296 + _50;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _89 = *_88;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _90 = _87 + _89;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _91 = pretmp_296 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _92 = *_91;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _93 = _90 + _92;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _94 = pretmp_296 + _58;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _95 = *_94;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _96 = _93 + _95;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _97 = pretmp_296 + _64;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _98 = *_97;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _99 = _96 + _98;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _100 = pretmp_296 + _63;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _101 = *_100;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _102 = _99 + _101;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _103 = pretmp_296 + _72;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _104 = *_103;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _105 = _102 + _104;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: *_78 = _105;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _108 = pretmp_298 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _110 = pretmp_300 + _38;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _111 = *_110;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _112 = pretmp_300 + _37;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _113 = *_112;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _114 = _111 + _113;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _115 = pretmp_300 + _46;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _116 = *_115;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _117 = _114 + _116;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _118 = pretmp_300 + _50;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _119 = *_118;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _120 = _117 + _119;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _121 = pretmp_300 + _33;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _122 = *_121;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _123 = _120 + _122;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _124 = pretmp_300 + _58;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _125 = *_124;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _126 = _123 + _125;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _127 = pretmp_300 + _64;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _128 = *_127;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _129 = _126 + _128;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _130 = pretmp_300 + _63;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _131 = *_130;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _132 = _129 + _131;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _133 = pretmp_300 + _72;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: _134 = *_133;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: _135 = _132 + _134;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: *_108 = _135;

harris.opt.cpp:112:5: note: get vectype for scalar type:  float
harris.opt.cpp:112:5: note: vectype: vector(4) float
harris.opt.cpp:112:5: note: nunits = 4
harris.opt.cpp:112:5: note: ==> examining statement: j_137 = j_139 + 1;

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: ==> examining statement: if (j_137 < pretmp_234)

harris.opt.cpp:112:5: note: skip.
harris.opt.cpp:112:5: note: vectorization factor = 4
harris.opt.cpp:112:5: note: === vect_analyze_data_refs_alignment ===
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: dependence distance  = 2.
harris.opt.cpp:112:5: note: dependence distance  = 1.
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_40
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_42
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_47
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_51
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_54
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_59
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_65
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_68
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_73
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_35
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_80
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_82
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_85
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_88
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_91
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_94
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_97
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_100
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_103
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_78
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_110
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_112
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_115
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_118
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_121
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_124
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_127
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_130
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_133
harris.opt.cpp:112:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:112:5: note: can't force alignment of ref: *_108
harris.opt.cpp:112:5: note: === vect_prune_runtime_alias_test_list ===
harris.opt.cpp:112:5: note: merging ranges for *_40, *_35 and *_42, *_35
harris.opt.cpp:112:5: note: merging ranges for *_40, *_78 and *_42, *_78
harris.opt.cpp:112:5: note: merging ranges for *_40, *_108 and *_42, *_108
harris.opt.cpp:112:5: note: merging ranges for *_80, *_35 and *_82, *_35
harris.opt.cpp:112:5: note: merging ranges for *_80, *_78 and *_82, *_78
harris.opt.cpp:112:5: note: merging ranges for *_80, *_108 and *_82, *_108
harris.opt.cpp:112:5: note: merging ranges for *_110, *_35 and *_112, *_35
harris.opt.cpp:112:5: note: merging ranges for *_110, *_78 and *_112, *_78
harris.opt.cpp:112:5: note: merging ranges for *_110, *_108 and *_112, *_108
harris.opt.cpp:112:5: note: merging ranges for *_51, *_35 and *_54, *_35
harris.opt.cpp:112:5: note: merging ranges for *_88, *_35 and *_91, *_35
harris.opt.cpp:112:5: note: merging ranges for *_118, *_35 and *_121, *_35
harris.opt.cpp:112:5: note: merging ranges for *_65, *_35 and *_68, *_35
harris.opt.cpp:112:5: note: merging ranges for *_97, *_35 and *_100, *_35
harris.opt.cpp:112:5: note: merging ranges for *_127, *_35 and *_130, *_35
harris.opt.cpp:112:5: note: merging ranges for *_51, *_78 and *_54, *_78
harris.opt.cpp:112:5: note: merging ranges for *_51, *_108 and *_54, *_108
harris.opt.cpp:112:5: note: merging ranges for *_88, *_78 and *_91, *_78
harris.opt.cpp:112:5: note: merging ranges for *_118, *_78 and *_121, *_78
harris.opt.cpp:112:5: note: merging ranges for *_65, *_78 and *_68, *_78
harris.opt.cpp:112:5: note: merging ranges for *_97, *_78 and *_100, *_78
harris.opt.cpp:112:5: note: merging ranges for *_127, *_78 and *_130, *_78
harris.opt.cpp:112:5: note: merging ranges for *_88, *_108 and *_91, *_108
harris.opt.cpp:112:5: note: merging ranges for *_118, *_108 and *_121, *_108
harris.opt.cpp:112:5: note: merging ranges for *_65, *_108 and *_68, *_108
harris.opt.cpp:112:5: note: merging ranges for *_97, *_108 and *_100, *_108
harris.opt.cpp:112:5: note: merging ranges for *_127, *_108 and *_130, *_108
harris.opt.cpp:112:5: note: improved number of alias checks from 84 to 57
harris.opt.cpp:112:5: note: number of versioning for alias run-time tests exceeds 10 (--param vect-max-version-for-alias-checks)
harris.opt.cpp:110:11: note: vectorized 0 loops in function.
<built-in> (struct .omp_data_s.2 * .omp_data_i)
{
  int index3;
  int index2;
  int index1;
  int j;
  int i;
  int q.10_1;
  int tt.11_2;
  int _10;
  int _11;
  int _12;
  int _13;
  int q.10_14;
  int tt.11_15;
  int q.10_16;
  int _17;
  int _18;
  int _19;
  int _21;
  long unsigned int _32;
  long unsigned int _33;
  float * _35;
  long unsigned int _36;
  long unsigned int _37;
  sizetype _38;
  float * _40;
  float _41;
  float * _42;
  float _43;
  float _44;
  sizetype _45;
  sizetype _46;
  float * _47;
  float _48;
  float _49;
  sizetype _50;
  float * _51;
  float _52;
  float _53;
  float * _54;
  float _55;
  float _56;
  sizetype _57;
  sizetype _58;
  float * _59;
  float _60;
  float _61;
  long unsigned int _62;
  long unsigned int _63;
  sizetype _64;
  float * _65;
  float _66;
  float _67;
  float * _68;
  float _69;
  float _70;
  sizetype _71;
  sizetype _72;
  float * _73;
  float _74;
  float _75;
  float * _78;
  float * _80;
  float _81;
  float * _82;
  float _83;
  float _84;
  float * _85;
  float _86;
  float _87;
  float * _88;
  float _89;
  float _90;
  float * _91;
  float _92;
  float _93;
  float * _94;
  float _95;
  float _96;
  float * _97;
  float _98;
  float _99;
  float * _100;
  float _101;
  float _102;
  float * _103;
  float _104;
  float _105;
  float * _108;
  float * _110;
  float _111;
  float * _112;
  float _113;
  float _114;
  float * _115;
  float _116;
  float _117;
  float * _118;
  float _119;
  float _120;
  float * _121;
  float _122;
  float _123;
  float * _124;
  float _125;
  float _126;
  float * _127;
  float _128;
  float _129;
  float * _130;
  float _131;
  float _132;
  float * _133;
  float _134;
  float _135;
  int pretmp_138;
  int pretmp_234;
  int pretmp_284;
  int pretmp_285;
  int pretmp_286;
  int pretmp_287;
  int pretmp_288;
  int pretmp_289;
  float * pretmp_290;
  float * pretmp_292;
  float * pretmp_294;
  float * pretmp_296;
  float * pretmp_298;
  float * pretmp_300;
  int pretmp_321;
  int prephitmp_322;

  <bb 2>:
  _10 = .omp_data_i_9(D)->R;
  _11 = __builtin_omp_get_num_threads ();
  _12 = __builtin_omp_get_thread_num ();
  _13 = _10 + -2;
  q.10_14 = _13 / _11;
  tt.11_15 = _13 % _11;
  if (_12 < tt.11_15)
    goto <bb 15>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.10_1 = PHI <q.10_16(15), q.10_14(2)>
  # tt.11_2 = PHI <0(15), tt.11_15(2)>
  _17 = q.10_1 * _12;
  _18 = _17 + tt.11_2;
  _19 = _18 + q.10_1;
  if (_18 >= _19)
    goto <bb 14>;
  else
    goto <bb 4>;

  <bb 4>:
  i_20 = _18 + 2;
  _21 = _19 + 2;
  pretmp_234 = .omp_data_i_9(D)->C;

  <bb 5>:
  # i_3 = PHI <i_20(4), prephitmp_322(8)>
  if (pretmp_234 > 2)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 6>:
  pretmp_321 = i_3 + 1;

  <bb 7>:
  # prephitmp_322 = PHI <pretmp_288(11), pretmp_321(6)>
  if (_21 > prephitmp_322)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:
  pretmp_284 = i_3 + -1;
  pretmp_285 = pretmp_234 + 2;
  pretmp_286 = pretmp_284 * pretmp_285;
  pretmp_287 = i_3 * pretmp_285;
  pretmp_288 = i_3 + 1;
  pretmp_289 = pretmp_285 * pretmp_288;
  pretmp_290 = .omp_data_i_9(D)->Syy;
  pretmp_292 = .omp_data_i_9(D)->Iyy;
  pretmp_294 = .omp_data_i_9(D)->Sxy;
  pretmp_296 = .omp_data_i_9(D)->Ixy;
  pretmp_298 = .omp_data_i_9(D)->Sxx;
  pretmp_300 = .omp_data_i_9(D)->Ixx;

  <bb 10>:
  # j_139 = PHI <2(9), j_137(12)>
  index1_26 = j_139 + pretmp_286;
  index2_28 = j_139 + pretmp_287;
  index3_31 = j_139 + pretmp_289;
  _32 = (long unsigned int) index2_28;
  _33 = _32 * 4;
  _35 = pretmp_290 + _33;
  _36 = (long unsigned int) index1_26;
  _37 = _36 * 4;
  _38 = _37 + 18446744073709551612;
  _40 = pretmp_292 + _38;
  _41 = *_40;
  _42 = pretmp_292 + _37;
  _43 = *_42;
  _44 = _41 + _43;
  _45 = _36 + 1;
  _46 = _45 * 4;
  _47 = pretmp_292 + _46;
  _48 = *_47;
  _49 = _44 + _48;
  _50 = _33 + 18446744073709551612;
  _51 = pretmp_292 + _50;
  _52 = *_51;
  _53 = _49 + _52;
  _54 = pretmp_292 + _33;
  _55 = *_54;
  _56 = _53 + _55;
  _57 = _32 + 1;
  _58 = _57 * 4;
  _59 = pretmp_292 + _58;
  _60 = *_59;
  _61 = _56 + _60;
  _62 = (long unsigned int) index3_31;
  _63 = _62 * 4;
  _64 = _63 + 18446744073709551612;
  _65 = pretmp_292 + _64;
  _66 = *_65;
  _67 = _61 + _66;
  _68 = pretmp_292 + _63;
  _69 = *_68;
  _70 = _67 + _69;
  _71 = _62 + 1;
  _72 = _71 * 4;
  _73 = pretmp_292 + _72;
  _74 = *_73;
  _75 = _70 + _74;
  *_35 = _75;
  _78 = pretmp_294 + _33;
  _80 = pretmp_296 + _38;
  _81 = *_80;
  _82 = pretmp_296 + _37;
  _83 = *_82;
  _84 = _81 + _83;
  _85 = pretmp_296 + _46;
  _86 = *_85;
  _87 = _84 + _86;
  _88 = pretmp_296 + _50;
  _89 = *_88;
  _90 = _87 + _89;
  _91 = pretmp_296 + _33;
  _92 = *_91;
  _93 = _90 + _92;
  _94 = pretmp_296 + _58;
  _95 = *_94;
  _96 = _93 + _95;
  _97 = pretmp_296 + _64;
  _98 = *_97;
  _99 = _96 + _98;
  _100 = pretmp_296 + _63;
  _101 = *_100;
  _102 = _99 + _101;
  _103 = pretmp_296 + _72;
  _104 = *_103;
  _105 = _102 + _104;
  *_78 = _105;
  _108 = pretmp_298 + _33;
  _110 = pretmp_300 + _38;
  _111 = *_110;
  _112 = pretmp_300 + _37;
  _113 = *_112;
  _114 = _111 + _113;
  _115 = pretmp_300 + _46;
  _116 = *_115;
  _117 = _114 + _116;
  _118 = pretmp_300 + _50;
  _119 = *_118;
  _120 = _117 + _119;
  _121 = pretmp_300 + _33;
  _122 = *_121;
  _123 = _120 + _122;
  _124 = pretmp_300 + _58;
  _125 = *_124;
  _126 = _123 + _125;
  _127 = pretmp_300 + _64;
  _128 = *_127;
  _129 = _126 + _128;
  _130 = pretmp_300 + _63;
  _131 = *_130;
  _132 = _129 + _131;
  _133 = pretmp_300 + _72;
  _134 = *_133;
  _135 = _132 + _134;
  *_108 = _135;
  j_137 = j_139 + 1;
  if (j_137 < pretmp_234)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  pretmp_138 = pretmp_288;
  goto <bb 7>;

  <bb 12>:
  goto <bb 10>;

  <bb 13>:

  <bb 14>:
  return;

  <bb 15>:
  q.10_16 = q.10_14 + 1;
  goto <bb 3>;

}



;; Function <built-in> (_Z10harris_optiiPfRS_._omp_fn.1, funcdef_no=4430, decl_uid=80553, symbol_order=3091)


Analyzing loop at harris.opt.cpp:98
harris.opt.cpp:98:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:98:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:98:5: note: ===== analyze_loop_nest_1 =====
harris.opt.cpp:98:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:98:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [2, + , 1](no_overflow) <= pretmp_66
  bounds on difference of bases: -1 ... 2147483645
  result:
    # of iterations (unsigned int) pretmp_66 + 4294967295, bounded by 2147483646
harris.opt.cpp:98:5: note: Symbolic number of iterations is (unsigned int) pretmp_66
harris.opt.cpp:98:5: note: not vectorized: control flow in loop.
harris.opt.cpp:98:5: note: bad loop form.

Analyzing loop at harris.opt.cpp:98
harris.opt.cpp:98:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:98:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:98:5: note: === get_loop_niters ===
harris.opt.cpp:98:5: note: Symbolic number of iterations is (unsigned int) pretmp_66
harris.opt.cpp:98:5: note: === vect_analyze_data_refs ===
Creating dr for *_29
analyze_innermost: success.
	base_address: pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_27
analyze_innermost: success.
	base_address: pretmp_76 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_76 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_36
analyze_innermost: success.
	base_address: pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_34
analyze_innermost: success.
	base_address: pretmp_80 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_80 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_29
analyze_innermost: success.
	base_address: pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_36
analyze_innermost: success.
	base_address: pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_41
analyze_innermost: success.
	base_address: pretmp_84 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_84 + (sizetype) ((long unsigned int) pretmp_75 * 4)
	Access function 0: {4B, +, 4}_2
harris.opt.cpp:98:5: note: got vectype for stmt: _30 = *_29;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: *_27 = _31;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: _37 = *_36;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: *_34 = _38;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: _42 = *_29;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: _43 = *_36;
vector(4) float
harris.opt.cpp:98:5: note: got vectype for stmt: *_41 = _44;
vector(4) float
harris.opt.cpp:98:5: note: === vect_analyze_scalar_cycles ===
harris.opt.cpp:98:5: note: Analyze phi: j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: Access function of PHI: {1, +, 1}_2
harris.opt.cpp:98:5: note: step: 1,  init: 1
harris.opt.cpp:98:5: note: Detected induction.
harris.opt.cpp:98:5: note: Analyze phi: .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: === vect_pattern_recog ===
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _24
harris.opt.cpp:98:5: note: def_stmt: _24 = (long unsigned int) _23;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _23
harris.opt.cpp:98:5: note: def_stmt: _23 = j_57 + pretmp_75;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _42
harris.opt.cpp:98:5: note: def_stmt: _42 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: === vect_analyze_data_ref_accesses ===
harris.opt.cpp:98:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.opt.cpp:98:5: note: init: phi relevant? j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: init: phi relevant? .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: init: stmt relevant? _23 = j_57 + pretmp_75;

harris.opt.cpp:98:5: note: init: stmt relevant? _24 = (long unsigned int) _23;

harris.opt.cpp:98:5: note: init: stmt relevant? _25 = _24 * 4;

harris.opt.cpp:98:5: note: init: stmt relevant? _27 = pretmp_76 + _25;

harris.opt.cpp:98:5: note: init: stmt relevant? _29 = pretmp_78 + _25;

harris.opt.cpp:98:5: note: init: stmt relevant? _30 = *_29;

harris.opt.cpp:98:5: note: init: stmt relevant? _31 = _30 * _30;

harris.opt.cpp:98:5: note: init: stmt relevant? *_27 = _31;

harris.opt.cpp:98:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: init: stmt relevant? _34 = pretmp_80 + _25;

harris.opt.cpp:98:5: note: init: stmt relevant? _36 = pretmp_82 + _25;

harris.opt.cpp:98:5: note: init: stmt relevant? _37 = *_36;

harris.opt.cpp:98:5: note: init: stmt relevant? _38 = _37 * _37;

harris.opt.cpp:98:5: note: init: stmt relevant? *_34 = _38;

harris.opt.cpp:98:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: init: stmt relevant? _41 = pretmp_84 + _25;

harris.opt.cpp:98:5: note: init: stmt relevant? _42 = *_29;

harris.opt.cpp:98:5: note: init: stmt relevant? _43 = *_36;

harris.opt.cpp:98:5: note: init: stmt relevant? _44 = _42 * _43;

harris.opt.cpp:98:5: note: init: stmt relevant? *_41 = _44;

harris.opt.cpp:98:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: init: stmt relevant? j_46 = j_57 + 1;

harris.opt.cpp:98:5: note: init: stmt relevant? if (j_46 <= pretmp_66)

harris.opt.cpp:98:5: note: worklist: examine stmt: *_41 = _44;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:98:5: note: def_stmt: _44 = _42 * _43;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: worklist: examine stmt: _44 = _42 * _43;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _42
harris.opt.cpp:98:5: note: def_stmt: _42 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _43
harris.opt.cpp:98:5: note: def_stmt: _43 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: worklist: examine stmt: _43 = *_36;

harris.opt.cpp:98:5: note: worklist: examine stmt: _42 = *_29;

harris.opt.cpp:98:5: note: worklist: examine stmt: *_34 = _38;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:98:5: note: def_stmt: _38 = _37 * _37;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: worklist: examine stmt: _38 = _37 * _37;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: already marked relevant/live.
harris.opt.cpp:98:5: note: worklist: examine stmt: _37 = *_36;

harris.opt.cpp:98:5: note: worklist: examine stmt: *_27 = _31;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _31
harris.opt.cpp:98:5: note: def_stmt: _31 = _30 * _30;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: worklist: examine stmt: _31 = _30 * _30;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: mark relevant 4, live 0.
harris.opt.cpp:98:5: note: already marked relevant/live.
harris.opt.cpp:98:5: note: worklist: examine stmt: _30 = *_29;

harris.opt.cpp:98:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_27 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _37 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_34 = _38;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _42 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _43 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: _37 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: *_34 = _38;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: _42 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: _43 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_34 = _38;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _42 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _43 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_34 = _38;
  stmt_b: _42 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_34 = _38;
  stmt_b: _43 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_34 = _38;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _42 = *_29;
  stmt_b: _43 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _42 = *_29;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *_36;
  stmt_b: *_41 = _44;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _30 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_27 = _31;
  stmt_b: *_27 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _37 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_34 = _38;
  stmt_b: *_34 = _38;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _42 = *_29;
  stmt_b: _42 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _43 = *_36;
  stmt_b: _43 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_41 = _44;
  stmt_b: *_41 = _44;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_29 and *_27
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_29 and *_27
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_29 and *_34
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_29 and *_34
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_29 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_29 and *_41
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_27 and *_36
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_27 and *_36
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_27 and *_34
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_27 and *_34
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_27 and *_29
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_27 and *_29
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_27 and *_36
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_27 and *_36
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_27 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_27 and *_41
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_36 and *_34
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_36 and *_34
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_36 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_36 and *_41
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_34 and *_29
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_34 and *_29
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_34 and *_36
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_34 and *_36
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_34 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_34 and *_41
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_29 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_29 and *_41
harris.opt.cpp:98:5: note: versioning for alias required: can't determine dependence between *_36 and *_41
harris.opt.cpp:98:5: note: mark for run-time aliasing test between *_36 and *_41
harris.opt.cpp:98:5: note: === vect_determine_vectorization_factor ===
harris.opt.cpp:98:5: note: ==> examining phi: j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: ==> examining phi: .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: ==> examining statement: _23 = j_57 + pretmp_75;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _24 = (long unsigned int) _23;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _25 = _24 * 4;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _27 = pretmp_76 + _25;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _29 = pretmp_78 + _25;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _30 = *_29;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _31 = _30 * _30;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: *_27 = _31;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _34 = pretmp_80 + _25;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _36 = pretmp_82 + _25;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _37 = *_36;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _38 = _37 * _37;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: *_34 = _38;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _41 = pretmp_84 + _25;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: _42 = *_29;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _43 = *_36;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: _44 = _42 * _43;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: *_41 = _44;

harris.opt.cpp:98:5: note: get vectype for scalar type:  float
harris.opt.cpp:98:5: note: vectype: vector(4) float
harris.opt.cpp:98:5: note: nunits = 4
harris.opt.cpp:98:5: note: ==> examining statement: j_46 = j_57 + 1;

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: ==> examining statement: if (j_46 <= pretmp_66)

harris.opt.cpp:98:5: note: skip.
harris.opt.cpp:98:5: note: vectorization factor = 4
harris.opt.cpp:98:5: note: === vect_analyze_data_refs_alignment ===
harris.opt.cpp:98:5: note: dependence distance  = 0.
harris.opt.cpp:98:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_29 and *_29
harris.opt.cpp:98:5: note: dependence distance  = 0.
harris.opt.cpp:98:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_36 and *_36
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_29
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_27
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_36
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_34
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_29
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_36
harris.opt.cpp:98:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:98:5: note: can't force alignment of ref: *_41
harris.opt.cpp:98:5: note: === vect_prune_runtime_alias_test_list ===
harris.opt.cpp:98:5: note: found equal ranges *_27, *_29 and *_27, *_29
harris.opt.cpp:98:5: note: found equal ranges *_27, *_36 and *_27, *_36
harris.opt.cpp:98:5: note: found equal ranges *_29, *_34 and *_29, *_34
harris.opt.cpp:98:5: note: found equal ranges *_29, *_41 and *_29, *_41
harris.opt.cpp:98:5: note: found equal ranges *_34, *_36 and *_34, *_36
harris.opt.cpp:98:5: note: found equal ranges *_36, *_41 and *_36, *_41
harris.opt.cpp:98:5: note: improved number of alias checks from 15 to 9
harris.opt.cpp:98:5: note: === vect_enhance_data_refs_alignment ===
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:98:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:98:5: note: Analyze phi: j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: Analyze phi: .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: virtual phi. skip.
harris.opt.cpp:98:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:98:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Setting misalignment to -1.
harris.opt.cpp:98:5: note: Alignment of access forced using peeling.
harris.opt.cpp:98:5: note: Peeling for alignment will be applied.
harris.opt.cpp:98:5: note: Vectorizing an unaligned access.
harris.opt.cpp:98:5: note: Vectorizing an unaligned access.
harris.opt.cpp:98:5: note: Vectorizing an unaligned access.
harris.opt.cpp:98:5: note: Vectorizing an unaligned access.
harris.opt.cpp:98:5: note: Vectorizing an unaligned access.
harris.opt.cpp:98:5: note: === vect_analyze_slp ===
harris.opt.cpp:98:5: note: === vect_make_slp_decision ===
harris.opt.cpp:98:5: note: === vect_detect_hybrid_slp ===
harris.opt.cpp:98:5: note: === vect_analyze_loop_operations ===
harris.opt.cpp:98:5: note: examining phi: j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: examining phi: .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: ==> examining statement: _23 = j_57 + pretmp_75;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _24 = (long unsigned int) _23;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _25 = _24 * 4;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _27 = pretmp_76 + _25;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _29 = pretmp_78 + _25;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _30 = *_29;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_model_load_cost: aligned.
harris.opt.cpp:98:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _31 = _30 * _30;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: === vectorizable_operation ===
harris.opt.cpp:98:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: *_27 = _31;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _31
harris.opt.cpp:98:5: note: def_stmt: _31 = _30 * _30;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _34 = pretmp_80 + _25;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _36 = pretmp_82 + _25;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _37 = *_36;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_36
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_36
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _38 = _37 * _37;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: === vectorizable_operation ===
harris.opt.cpp:98:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: *_34 = _38;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:98:5: note: def_stmt: _38 = _37 * _37;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _41 = pretmp_84 + _25;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: _42 = *_29;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_29
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_model_load_cost: aligned.
harris.opt.cpp:98:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _43 = *_36;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_36
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand *_36
harris.opt.cpp:98:5: note: not ssa-name.
harris.opt.cpp:98:5: note: use not simple.
harris.opt.cpp:98:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: _44 = _42 * _43;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _42
harris.opt.cpp:98:5: note: def_stmt: _42 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _43
harris.opt.cpp:98:5: note: def_stmt: _43 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: === vectorizable_operation ===
harris.opt.cpp:98:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: *_41 = _44;

harris.opt.cpp:98:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:98:5: note: def_stmt: _44 = _42 * _43;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:98:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:98:5: note: ==> examining statement: j_46 = j_57 + 1;

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: ==> examining statement: if (j_46 <= pretmp_66)

harris.opt.cpp:98:5: note: irrelevant.
harris.opt.cpp:98:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.opt.cpp:98:5: note: Cost model analysis: 
  Vector inside of loop cost: 15
  Vector prologue cost: 46
  Vector epilogue cost: 20
  Scalar iteration cost: 10
  Scalar outside cost: 1
  Vector outside cost: 66
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 9

harris.opt.cpp:98:5: note:   Runtime profitability threshold = 8
harris.opt.cpp:98:5: note:   Static estimate profitability threshold = 8
harris.opt.cpp:98:5: note: epilog loop required
harris.opt.cpp:98:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:98:5: note: Analyze phi: j_57 = PHI <1(8), j_46(11)>

harris.opt.cpp:98:5: note: Analyze phi: .MEM_48 = PHI <.MEM_5(8), .MEM_45(11)>

harris.opt.cpp:98:5: note: virtual phi. skip.
harris.opt.cpp:98:5: note: loop vectorized
harris.opt.cpp:98:5: note: === vec_transform_loop ===
harris.opt.cpp:98:5: note: Profitability threshold is 8 loop iterations.
harris.opt.cpp:98:5: note: create runtime check for data references *_27 and *_29
harris.opt.cpp:98:5: note: create runtime check for data references *_27 and *_34
harris.opt.cpp:98:5: note: create runtime check for data references *_27 and *_36
harris.opt.cpp:98:5: note: create runtime check for data references *_27 and *_41
harris.opt.cpp:98:5: note: create runtime check for data references *_29 and *_34
harris.opt.cpp:98:5: note: create runtime check for data references *_29 and *_41
harris.opt.cpp:98:5: note: create runtime check for data references *_34 and *_36
harris.opt.cpp:98:5: note: create runtime check for data references *_34 and *_41
harris.opt.cpp:98:5: note: create runtime check for data references *_36 and *_41
harris.opt.cpp:98:5: note: created 9 versioning for alias checks.
harris.opt.cpp:98:5: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #9
Updating SSA information for statement _23 = j_57 + pretmp_75;
Updating SSA information for statement _24 = (long unsigned int) _23;
Updating SSA information for statement _25 = _24 * 4;
Updating SSA information for statement _27 = pretmp_76 + _25;
Updating SSA information for statement _29 = pretmp_78 + _25;
Updating SSA information for statement _30 = *_29;
Updating SSA information for statement _31 = _30 * _30;
Updating SSA information for statement *_27 = _31;
Updating SSA information for statement _34 = pretmp_80 + _25;
Updating SSA information for statement _36 = pretmp_82 + _25;
Updating SSA information for statement _37 = *_36;
Updating SSA information for statement _38 = _37 * _37;
Updating SSA information for statement *_34 = _38;
Updating SSA information for statement _41 = pretmp_84 + _25;
Updating SSA information for statement _42 = *_29;
Updating SSA information for statement _43 = *_36;
Updating SSA information for statement _44 = _42 * _43;
Updating SSA information for statement *_41 = _44;
Updating SSA information for statement j_46 = j_57 + 1;
Updating SSA information for statement if (j_46 <= pretmp_66)
Registering new PHI nodes in block #11
Registering new PHI nodes in block #20
Registering new PHI nodes in block #19
Registering new PHI nodes in block #15
Updating SSA information for statement _235 = j_57 + pretmp_75;
Updating SSA information for statement _236 = (long unsigned int) _23;
Updating SSA information for statement _237 = _24 * 4;
Updating SSA information for statement _238 = pretmp_76 + _25;
Updating SSA information for statement _239 = pretmp_78 + _25;
Updating SSA information for statement _240 = *_29;
Updating SSA information for statement _241 = _30 * _30;
Updating SSA information for statement *_27 = _31;
Updating SSA information for statement _243 = pretmp_80 + _25;
Updating SSA information for statement _244 = pretmp_82 + _25;
Updating SSA information for statement _245 = *_36;
Updating SSA information for statement _246 = _37 * _37;
Updating SSA information for statement *_34 = _38;
Updating SSA information for statement _248 = pretmp_84 + _25;
Updating SSA information for statement _249 = *_29;
Updating SSA information for statement _250 = *_36;
Updating SSA information for statement _251 = _42 * _43;
Updating SSA information for statement *_41 = _44;
Updating SSA information for statement j_253 = j_57 + 1;
Updating SSA information for statement if (j_46 <= pretmp_66)
Registering new PHI nodes in block #16
Registering new PHI nodes in block #10

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_233 -> { j_57 }
.MEM_234 -> { .MEM_48 }
_235 -> { _23 }
_236 -> { _24 }
_237 -> { _25 }
_238 -> { _27 }
_239 -> { _29 }
_240 -> { _30 }
_241 -> { _31 }
.MEM_242 -> { .MEM_32 }
_243 -> { _34 }
_244 -> { _36 }
_245 -> { _37 }
_246 -> { _38 }
.MEM_247 -> { .MEM_39 }
_248 -> { _41 }
_249 -> { _42 }
_250 -> { _43 }
_251 -> { _44 }
.MEM_252 -> { .MEM_45 }
j_253 -> { j_46 }
Incremental SSA update started at block: 17
Number of blocks in CFG: 21
Number of blocks to update: 8 ( 38%)
Affected blocks: 9 10 11 15 16 18 19 20


harris.opt.cpp:98:5: note: loop peeled for vectorization to enhance alignment
harris.opt.cpp:98:5: note: created vectp.281_256
harris.opt.cpp:98:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.281_256 & 15) >> 2) & 3, niters.280_255>
Removing basic block 24
<bb 24>:


;; Scaling loop 4 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 2 with scale 0.777800, bounding iterations to 0 from guessed 14
;; guessed iterations are now 11

loop at harris.opt.cpp:100: if (ivtmp_295 < prolog_loop_niters.282_260)

Setting upper bound of nb iterations for prologue loop to 2
harris.opt.cpp:98:5: note: === vect_update_inits_of_dr ===
harris.opt.cpp:98:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 29
<bb 29>:


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 5 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.opt.cpp:98:5: note: vect_update_ivs_after_vectorizer: phi: j_57 = PHI <j_288(33), j_46(11)>

harris.opt.cpp:98:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_48 = PHI <.MEM_290(33), .MEM_45(11)>

harris.opt.cpp:98:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.opt.cpp:98:5: note: ------>vectorizing phi: j_57 = PHI <j_288(37), j_46(11)>

harris.opt.cpp:98:5: note: ------>vectorizing phi: .MEM_48 = PHI <.MEM_290(37), .MEM_45(11)>

harris.opt.cpp:98:5: note: ------>vectorizing statement: _23 = j_57 + pretmp_75;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _24 = (long unsigned int) _23;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _25 = _24 * 4;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _27 = pretmp_76 + _25;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _29 = pretmp_78 + _25;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _30 = *_29;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: transform load. ncopies = 1
harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.289_334
harris.opt.cpp:98:5: note: add new stmt: vect__30.290_341 = MEM[(float *)vectp.288_339];

harris.opt.cpp:98:5: note: ------>vectorizing statement: _31 = _30 * _30;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform binary/unary operation.
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _30
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _30
  def_stmt =  _30 = *_29;

harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _30
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _30
harris.opt.cpp:98:5: note: def_stmt: _30 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _30
  def_stmt =  _30 = *_29;

harris.opt.cpp:98:5: note: add new stmt: vect__31.291_342 = vect__30.290_341 * vect__30.290_341;

harris.opt.cpp:98:5: note: ------>vectorizing statement: *_27 = _31;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _31
harris.opt.cpp:98:5: note: def_stmt: _31 = _30 * _30;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform store. ncopies = 1
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _31
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _31
harris.opt.cpp:98:5: note: def_stmt: _31 = _30 * _30;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _31
  def_stmt =  _31 = _30 * _30;

harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_76 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.293_343
harris.opt.cpp:98:5: note: add new stmt: MEM[(float *)vectp.292_348] = vect__31.291_342;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _34 = pretmp_80 + _25;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _36 = pretmp_82 + _25;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _37 = *_36;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: transform load. ncopies = 1
harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.295_32
harris.opt.cpp:98:5: note: add new stmt: vect__37.296_357 = MEM[(float *)vectp.294_355];

harris.opt.cpp:98:5: note: ------>vectorizing statement: _38 = _37 * _37;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform binary/unary operation.
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _37
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _37
  def_stmt =  _37 = *_36;

harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _37
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:98:5: note: def_stmt: _37 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _37
  def_stmt =  _37 = *_36;

harris.opt.cpp:98:5: note: add new stmt: vect__38.297_358 = vect__37.296_357 * vect__37.296_357;

harris.opt.cpp:98:5: note: ------>vectorizing statement: *_34 = _38;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:98:5: note: def_stmt: _38 = _37 * _37;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform store. ncopies = 1
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _38
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _38
harris.opt.cpp:98:5: note: def_stmt: _38 = _37 * _37;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _38
  def_stmt =  _38 = _37 * _37;

harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_80 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.299_359
harris.opt.cpp:98:5: note: add new stmt: MEM[(float *)vectp.298_364] = vect__38.297_358;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _41 = pretmp_84 + _25;

harris.opt.cpp:98:5: note: ------>vectorizing statement: _42 = *_29;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: transform load. ncopies = 1
harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_78 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.301_39
harris.opt.cpp:98:5: note: add new stmt: vect__42.302_373 = MEM[(float *)vectp.300_371];

harris.opt.cpp:98:5: note: ------>vectorizing statement: _43 = *_36;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: transform load. ncopies = 1
harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_82 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.304_374
harris.opt.cpp:98:5: note: add new stmt: vect__43.305_381 = MEM[(float *)vectp.303_379];

harris.opt.cpp:98:5: note: ------>vectorizing statement: _44 = _42 * _43;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _42
harris.opt.cpp:98:5: note: def_stmt: _42 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _43
harris.opt.cpp:98:5: note: def_stmt: _43 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform binary/unary operation.
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _42
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _42
harris.opt.cpp:98:5: note: def_stmt: _42 = *_29;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _42
  def_stmt =  _42 = *_29;

harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _43
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _43
harris.opt.cpp:98:5: note: def_stmt: _43 = *_36;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _43
  def_stmt =  _43 = *_36;

harris.opt.cpp:98:5: note: add new stmt: vect__44.306_382 = vect__42.302_373 * vect__43.305_381;

harris.opt.cpp:98:5: note: ------>vectorizing statement: *_41 = _44;

harris.opt.cpp:98:5: note: transform statement.
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:98:5: note: def_stmt: _44 = _42 * _43;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: transform store. ncopies = 1
harris.opt.cpp:98:5: note: vect_get_vec_def_for_operand: _44
harris.opt.cpp:98:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:98:5: note: def_stmt: _44 = _42 * _43;

harris.opt.cpp:98:5: note: type of def: 3.
harris.opt.cpp:98:5: note: def =  _44
  def_stmt =  _44 = _42 * _43;

harris.opt.cpp:98:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_84 + (sizetype) ((long unsigned int) pretmp_75 * 4)
harris.opt.cpp:98:5: note: created vectp.308_383
harris.opt.cpp:98:5: note: add new stmt: MEM[(float *)vectp.307_388] = vect__44.306_382;

harris.opt.cpp:98:5: note: ------>vectorizing statement: j_46 = j_57 + 1;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.288_340 = vectp.288_339 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.292_349 = vectp.292_348 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.294_356 = vectp.294_355 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.298_365 = vectp.298_364 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.300_372 = vectp.300_371 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.303_380 = vectp.303_379 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: vectp.307_389 = vectp.307_388 + 16;

harris.opt.cpp:98:5: note: ------>vectorizing statement: if (j_46 <= pretmp_66)


loop at harris.opt.cpp:100: if (ivtmp_391 < bnd.285_298)

;; Scaling loop 2 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 2
harris.opt.cpp:98:5: note: LOOP VECTORIZED

harris.opt.cpp:96:11: note: vectorized 1 loops in function.
Merging blocks 8 and 17
Merging blocks 18 and 25
Merging blocks 21 and 33
Merging blocks 27 and 20
Merging blocks 35 and 28
Created preheader block for loop 4
<built-in> (struct .omp_data_s.1 * .omp_data_i)
{
  vector(4) float * vectp.308;
  vector(4) float * vectp.307;
  vector(4) float vect__44.306;
  vector(4) float vect__43.305;
  vector(4) float * vectp.304;
  vector(4) float * vectp.303;
  vector(4) float vect__42.302;
  vector(4) float * vectp.301;
  vector(4) float * vectp.300;
  vector(4) float * vectp.299;
  vector(4) float * vectp.298;
  vector(4) float vect__38.297;
  vector(4) float vect__37.296;
  vector(4) float * vectp.295;
  vector(4) float * vectp.294;
  vector(4) float * vectp.293;
  vector(4) float * vectp.292;
  vector(4) float vect__31.291;
  vector(4) float vect__30.290;
  vector(4) float * vectp.289;
  vector(4) float * vectp.288;
  int tmp.287;
  unsigned int ratio_mult_vf.286;
  unsigned int bnd.285;
  unsigned int niters.284;
  sizetype prolog_loop_adjusted_niters.283;
  unsigned int prolog_loop_niters.282;
  vector(4) float * vectp.281;
  unsigned int niters.280;
  int j;
  int i;
  int q.12_1;
  int tt.13_2;
  bool _4;
  float * _6;
  sizetype _7;
  int _10;
  int _11;
  int _12;
  int q.12_13;
  int tt.13_14;
  int q.12_15;
  int _16;
  int _17;
  int _18;
  sizetype _20;
  unsigned int _22;
  int _23;
  long unsigned int _24;
  long unsigned int _25;
  bool _26;
  float * _27;
  sizetype _28;
  float * _29;
  float _30;
  float _31;
  sizetype _33;
  float * _34;
  sizetype _35;
  float * _36;
  float _37;
  float _38;
  float * _40;
  float * _41;
  float _42;
  float _43;
  float _44;
  unsigned int ivtmp_45;
  sizetype _49;
  sizetype _50;
  sizetype _51;
  float * _52;
  sizetype _53;
  sizetype _54;
  sizetype _55;
  sizetype _56;
  sizetype _59;
  bool _60;
  bool _61;
  bool _62;
  float * _63;
  sizetype _64;
  sizetype _65;
  int pretmp_66;
  float * _67;
  sizetype _68;
  float * _69;
  sizetype _70;
  sizetype _71;
  sizetype _72;
  bool _73;
  int pretmp_74;
  int pretmp_75;
  float * pretmp_76;
  sizetype _77;
  float * pretmp_78;
  sizetype _79;
  float * pretmp_80;
  float * _81;
  float * pretmp_82;
  sizetype _83;
  float * pretmp_84;
  sizetype _85;
  sizetype _86;
  float * _87;
  bool _90;
  bool _91;
  bool _92;
  sizetype _93;
  sizetype _94;
  sizetype _95;
  float * _96;
  sizetype _97;
  sizetype _98;
  sizetype _99;
  float * _100;
  bool _101;
  sizetype _102;
  sizetype _103;
  sizetype _104;
  float * _105;
  sizetype _106;
  sizetype _107;
  sizetype _108;
  float * _109;
  bool _110;
  bool _111;
  bool _112;
  sizetype _113;
  sizetype _114;
  sizetype _115;
  float * _116;
  sizetype _117;
  sizetype _118;
  sizetype _119;
  float * _120;
  bool _121;
  sizetype _122;
  sizetype _123;
  sizetype _124;
  float * _125;
  sizetype _126;
  sizetype _127;
  sizetype _128;
  float * _129;
  bool _130;
  bool _131;
  bool _132;
  sizetype _133;
  sizetype _134;
  sizetype _135;
  float * _136;
  sizetype _137;
  sizetype _138;
  sizetype _139;
  float * _140;
  bool _141;
  sizetype _142;
  sizetype _143;
  sizetype _144;
  float * _145;
  sizetype _146;
  sizetype _147;
  sizetype _148;
  float * _149;
  bool _150;
  bool _151;
  bool _152;
  sizetype _153;
  sizetype _154;
  sizetype _155;
  float * _156;
  sizetype _157;
  sizetype _158;
  sizetype _159;
  float * _160;
  bool _161;
  sizetype _162;
  sizetype _163;
  sizetype _164;
  float * _165;
  sizetype _166;
  sizetype _167;
  sizetype _168;
  float * _169;
  bool _170;
  bool _171;
  bool _172;
  sizetype _173;
  sizetype _174;
  sizetype _175;
  float * _176;
  sizetype _177;
  sizetype _178;
  sizetype _179;
  float * _180;
  bool _181;
  sizetype _182;
  sizetype _183;
  sizetype _184;
  float * _185;
  sizetype _186;
  sizetype _187;
  sizetype _188;
  float * _189;
  bool _190;
  bool _191;
  bool _192;
  sizetype _193;
  sizetype _194;
  sizetype _195;
  float * _196;
  sizetype _197;
  sizetype _198;
  sizetype _199;
  float * _200;
  bool _201;
  sizetype _202;
  sizetype _203;
  sizetype _204;
  float * _205;
  sizetype _206;
  sizetype _207;
  sizetype _208;
  float * _209;
  bool _210;
  bool _211;
  bool _212;
  sizetype _213;
  sizetype _214;
  sizetype _215;
  float * _216;
  sizetype _217;
  sizetype _218;
  sizetype _219;
  float * _220;
  bool _221;
  sizetype _222;
  sizetype _223;
  sizetype _224;
  float * _225;
  sizetype _226;
  sizetype _227;
  sizetype _228;
  float * _229;
  bool _230;
  bool _231;
  bool _232;
  int _235;
  long unsigned int _236;
  long unsigned int _237;
  float * _238;
  float * _239;
  float _240;
  float _241;
  float * _243;
  float * _244;
  float _245;
  float _246;
  float * _248;
  float _249;
  float _250;
  float _251;
  sizetype _257;
  sizetype _258;
  sizetype _259;
  unsigned long _261;
  unsigned long _262;
  unsigned long _263;
  unsigned long _264;
  unsigned int _265;
  unsigned int _266;
  int _269;
  long unsigned int _270;
  long unsigned int _271;
  float * _272;
  float * _273;
  float _274;
  float _275;
  float * _277;
  float * _278;
  float _279;
  float _280;
  float * _282;
  float _283;
  float _284;
  float _285;
  unsigned int ivtmp_294;
  unsigned int ivtmp_295;
  unsigned int _299;
  unsigned int _300;
  int _304;
  long unsigned int _305;
  long unsigned int _306;
  float * _307;
  float * _308;
  float _309;
  float _310;
  float * _312;
  float * _313;
  float _314;
  float _315;
  float * _317;
  float _318;
  float _319;
  float _320;
  unsigned int _323;
  unsigned int _324;
  unsigned int _325;
  int _333;
  sizetype _335;
  sizetype _336;
  sizetype _337;
  sizetype _338;
  sizetype _344;
  sizetype _345;
  sizetype _346;
  sizetype _347;
  sizetype _351;
  sizetype _352;
  sizetype _353;
  sizetype _354;
  sizetype _360;
  sizetype _361;
  sizetype _362;
  sizetype _363;
  sizetype _367;
  sizetype _368;
  sizetype _369;
  sizetype _370;
  sizetype _375;
  sizetype _376;
  sizetype _377;
  sizetype _378;
  sizetype _384;
  sizetype _385;
  sizetype _386;
  sizetype _387;
  unsigned int ivtmp_391;
  unsigned int ivtmp_392;

  <bb 2>:
  _10 = .omp_data_i_9(D)->R;
  _11 = __builtin_omp_get_num_threads ();
  _12 = __builtin_omp_get_thread_num ();
  q.12_13 = _10 / _11;
  tt.13_14 = _10 % _11;
  if (_12 < tt.13_14)
    goto <bb 30>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.12_1 = PHI <q.12_15(30), q.12_13(2)>
  # tt.13_2 = PHI <0(30), tt.13_14(2)>
  _16 = q.12_1 * _12;
  _17 = _16 + tt.13_2;
  _18 = _17 + q.12_1;
  if (_17 >= _18)
    goto <bb 29>;
  else
    goto <bb 4>;

  <bb 4>:
  i_19 = _17 + 1;
  pretmp_66 = .omp_data_i_9(D)->C;

  <bb 5>:
  # i_3 = PHI <i_19(4), i_47(7)>
  if (pretmp_66 > 0)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 6>:
  i_47 = i_3 + 1;
  if (_18 >= i_47)
    goto <bb 7>;
  else
    goto <bb 28>;

  <bb 7>:
  goto <bb 5>;

  <bb 8>:
  pretmp_74 = pretmp_66 + 2;
  pretmp_75 = i_3 * pretmp_74;
  pretmp_76 = .omp_data_i_9(D)->Ixx;
  pretmp_78 = .omp_data_i_9(D)->Ix;
  pretmp_80 = .omp_data_i_9(D)->Iyy;
  pretmp_82 = .omp_data_i_9(D)->Iy;
  pretmp_84 = .omp_data_i_9(D)->Ixy;
  _22 = (unsigned int) pretmp_66;
  _26 = _22 > 8;
  _28 = (sizetype) pretmp_75;
  _33 = _28 + 5;
  _35 = _33 * 4;
  _40 = pretmp_76 + _35;
  _20 = (sizetype) pretmp_75;
  _56 = _20 + 1;
  _7 = _56 * 4;
  _87 = pretmp_78 + _7;
  _73 = _40 <= _87;
  _72 = (sizetype) pretmp_75;
  _71 = _72 + 5;
  _70 = _71 * 4;
  _69 = pretmp_78 + _70;
  _68 = (sizetype) pretmp_75;
  _65 = _68 + 1;
  _64 = _65 * 4;
  _63 = pretmp_76 + _64;
  _62 = _63 >= _69;
  _61 = _62 | _73;
  _60 = _26 & _61;
  _55 = (sizetype) pretmp_75;
  _54 = _55 + 5;
  _53 = _54 * 4;
  _52 = pretmp_76 + _53;
  _51 = (sizetype) pretmp_75;
  _50 = _51 + 1;
  _49 = _50 * 4;
  _6 = pretmp_80 + _49;
  _4 = _6 >= _52;
  _86 = (sizetype) pretmp_75;
  _85 = _86 + 5;
  _83 = _85 * 4;
  _81 = pretmp_80 + _83;
  _79 = (sizetype) pretmp_75;
  _77 = _79 + 1;
  _59 = _77 * 4;
  _67 = pretmp_76 + _59;
  _90 = _67 >= _81;
  _91 = _4 | _90;
  _92 = _60 & _91;
  _93 = (sizetype) pretmp_75;
  _94 = _93 + 5;
  _95 = _94 * 4;
  _96 = pretmp_76 + _95;
  _97 = (sizetype) pretmp_75;
  _98 = _97 + 1;
  _99 = _98 * 4;
  _100 = pretmp_82 + _99;
  _101 = _96 <= _100;
  _102 = (sizetype) pretmp_75;
  _103 = _102 + 5;
  _104 = _103 * 4;
  _105 = pretmp_82 + _104;
  _106 = (sizetype) pretmp_75;
  _107 = _106 + 1;
  _108 = _107 * 4;
  _109 = pretmp_76 + _108;
  _110 = _105 <= _109;
  _111 = _101 | _110;
  _112 = _92 & _111;
  _113 = (sizetype) pretmp_75;
  _114 = _113 + 5;
  _115 = _114 * 4;
  _116 = pretmp_76 + _115;
  _117 = (sizetype) pretmp_75;
  _118 = _117 + 1;
  _119 = _118 * 4;
  _120 = pretmp_84 + _119;
  _121 = _116 <= _120;
  _122 = (sizetype) pretmp_75;
  _123 = _122 + 5;
  _124 = _123 * 4;
  _125 = pretmp_84 + _124;
  _126 = (sizetype) pretmp_75;
  _127 = _126 + 1;
  _128 = _127 * 4;
  _129 = pretmp_76 + _128;
  _130 = _125 <= _129;
  _131 = _121 | _130;
  _132 = _112 & _131;
  _133 = (sizetype) pretmp_75;
  _134 = _133 + 5;
  _135 = _134 * 4;
  _136 = pretmp_78 + _135;
  _137 = (sizetype) pretmp_75;
  _138 = _137 + 1;
  _139 = _138 * 4;
  _140 = pretmp_80 + _139;
  _141 = _136 <= _140;
  _142 = (sizetype) pretmp_75;
  _143 = _142 + 5;
  _144 = _143 * 4;
  _145 = pretmp_80 + _144;
  _146 = (sizetype) pretmp_75;
  _147 = _146 + 1;
  _148 = _147 * 4;
  _149 = pretmp_78 + _148;
  _150 = _145 <= _149;
  _151 = _141 | _150;
  _152 = _132 & _151;
  _153 = (sizetype) pretmp_75;
  _154 = _153 + 5;
  _155 = _154 * 4;
  _156 = pretmp_78 + _155;
  _157 = (sizetype) pretmp_75;
  _158 = _157 + 1;
  _159 = _158 * 4;
  _160 = pretmp_84 + _159;
  _161 = _156 <= _160;
  _162 = (sizetype) pretmp_75;
  _163 = _162 + 5;
  _164 = _163 * 4;
  _165 = pretmp_84 + _164;
  _166 = (sizetype) pretmp_75;
  _167 = _166 + 1;
  _168 = _167 * 4;
  _169 = pretmp_78 + _168;
  _170 = _165 <= _169;
  _171 = _161 | _170;
  _172 = _152 & _171;
  _173 = (sizetype) pretmp_75;
  _174 = _173 + 5;
  _175 = _174 * 4;
  _176 = pretmp_80 + _175;
  _177 = (sizetype) pretmp_75;
  _178 = _177 + 1;
  _179 = _178 * 4;
  _180 = pretmp_82 + _179;
  _181 = _176 <= _180;
  _182 = (sizetype) pretmp_75;
  _183 = _182 + 5;
  _184 = _183 * 4;
  _185 = pretmp_82 + _184;
  _186 = (sizetype) pretmp_75;
  _187 = _186 + 1;
  _188 = _187 * 4;
  _189 = pretmp_80 + _188;
  _190 = _185 <= _189;
  _191 = _181 | _190;
  _192 = _172 & _191;
  _193 = (sizetype) pretmp_75;
  _194 = _193 + 5;
  _195 = _194 * 4;
  _196 = pretmp_80 + _195;
  _197 = (sizetype) pretmp_75;
  _198 = _197 + 1;
  _199 = _198 * 4;
  _200 = pretmp_84 + _199;
  _201 = _196 <= _200;
  _202 = (sizetype) pretmp_75;
  _203 = _202 + 5;
  _204 = _203 * 4;
  _205 = pretmp_84 + _204;
  _206 = (sizetype) pretmp_75;
  _207 = _206 + 1;
  _208 = _207 * 4;
  _209 = pretmp_80 + _208;
  _210 = _205 <= _209;
  _211 = _201 | _210;
  _212 = _192 & _211;
  _213 = (sizetype) pretmp_75;
  _214 = _213 + 5;
  _215 = _214 * 4;
  _216 = pretmp_82 + _215;
  _217 = (sizetype) pretmp_75;
  _218 = _217 + 1;
  _219 = _218 * 4;
  _220 = pretmp_84 + _219;
  _221 = _216 <= _220;
  _222 = (sizetype) pretmp_75;
  _223 = _222 + 5;
  _224 = _223 * 4;
  _225 = pretmp_84 + _224;
  _226 = (sizetype) pretmp_75;
  _227 = _226 + 1;
  _228 = _227 * 4;
  _229 = pretmp_82 + _228;
  _230 = _225 <= _229;
  _231 = _221 | _230;
  _232 = _212 & _231;
  if (_232 != 0)
    goto <bb 9>;
  else
    goto <bb 25>;

  <bb 9>:
  niters.280_255 = (unsigned int) pretmp_66;
  _257 = (sizetype) pretmp_75;
  _258 = _257 + 1;
  _259 = _258 * 4;
  vectp.281_256 = pretmp_78 + _259;
  _261 = (unsigned long) vectp.281_256;
  _262 = _261 & 15;
  _263 = _262 >> 2;
  _264 = -_263;
  _265 = (unsigned int) _264;
  _266 = _265 & 3;
  prolog_loop_niters.282_260 = MIN_EXPR <niters.280_255, _266>;
  if (prolog_loop_niters.282_260 == 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 10>:
  # j_292 = PHI <1(9)>
  # ivtmp_392 = PHI <0(9)>

  <bb 31>:
  # j_267 = PHI <j_292(10), j_287(11)>
  # ivtmp_294 = PHI <ivtmp_392(10), ivtmp_295(11)>
  _269 = j_267 + pretmp_75;
  _270 = (long unsigned int) _269;
  _271 = _270 * 4;
  _272 = pretmp_76 + _271;
  _273 = pretmp_78 + _271;
  _274 = *_273;
  _275 = _274 * _274;
  *_272 = _275;
  _277 = pretmp_80 + _271;
  _278 = pretmp_82 + _271;
  _279 = *_278;
  _280 = _279 * _279;
  *_277 = _280;
  _282 = pretmp_84 + _271;
  _283 = *_273;
  _284 = *_278;
  _285 = _283 * _284;
  *_282 = _285;
  j_287 = j_267 + 1;
  ivtmp_295 = ivtmp_294 + 1;
  if (ivtmp_295 < prolog_loop_niters.282_260)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  goto <bb 31>;

  <bb 12>:
  # j_289 = PHI <j_287(31)>
  if (niters.280_255 == prolog_loop_niters.282_260)
    goto <bb 22>;
  else
    goto <bb 13>;

  <bb 13>:
  # j_288 = PHI <j_289(12), 1(9)>
  prolog_loop_adjusted_niters.283_296 = (sizetype) prolog_loop_niters.282_260;
  niters.284_297 = niters.280_255 - prolog_loop_niters.282_260;
  _299 = niters.284_297 + 4294967292;
  _300 = _299 >> 2;
  bnd.285_298 = _300 + 1;
  ratio_mult_vf.286_301 = bnd.285_298 << 2;
  _323 = (unsigned int) pretmp_66;
  _324 = _323 - prolog_loop_niters.282_260;
  _325 = _324 + 4294967295;
  if (_325 <= 2)
    goto <bb 19>;
  else
    goto <bb 14>;

  <bb 14>:
  _335 = (sizetype) pretmp_75;
  _336 = prolog_loop_adjusted_niters.283_296 + _335;
  _337 = _336 + 1;
  _338 = _337 * 4;
  vectp.289_334 = pretmp_78 + _338;
  _344 = (sizetype) pretmp_75;
  _345 = prolog_loop_adjusted_niters.283_296 + _344;
  _346 = _345 + 1;
  _347 = _346 * 4;
  vectp.293_343 = pretmp_76 + _347;
  _351 = (sizetype) pretmp_75;
  _352 = prolog_loop_adjusted_niters.283_296 + _351;
  _353 = _352 + 1;
  _354 = _353 * 4;
  vectp.295_32 = pretmp_82 + _354;
  _360 = (sizetype) pretmp_75;
  _361 = prolog_loop_adjusted_niters.283_296 + _360;
  _362 = _361 + 1;
  _363 = _362 * 4;
  vectp.299_359 = pretmp_80 + _363;
  _367 = (sizetype) pretmp_75;
  _368 = prolog_loop_adjusted_niters.283_296 + _367;
  _369 = _368 + 1;
  _370 = _369 * 4;
  vectp.301_39 = pretmp_78 + _370;
  _375 = (sizetype) pretmp_75;
  _376 = prolog_loop_adjusted_niters.283_296 + _375;
  _377 = _376 + 1;
  _378 = _377 * 4;
  vectp.304_374 = pretmp_82 + _378;
  _384 = (sizetype) pretmp_75;
  _385 = prolog_loop_adjusted_niters.283_296 + _384;
  _386 = _385 + 1;
  _387 = _386 * 4;
  vectp.308_383 = pretmp_84 + _387;

  <bb 15>:
  # j_57 = PHI <j_288(14), j_46(24)>
  # vectp.288_339 = PHI <vectp.289_334(14), vectp.288_340(24)>
  # vectp.292_348 = PHI <vectp.293_343(14), vectp.292_349(24)>
  # vectp.294_355 = PHI <vectp.295_32(14), vectp.294_356(24)>
  # vectp.298_364 = PHI <vectp.299_359(14), vectp.298_365(24)>
  # vectp.300_371 = PHI <vectp.301_39(14), vectp.300_372(24)>
  # vectp.303_379 = PHI <vectp.304_374(14), vectp.303_380(24)>
  # vectp.307_388 = PHI <vectp.308_383(14), vectp.307_389(24)>
  # ivtmp_45 = PHI <0(14), ivtmp_391(24)>
  _23 = j_57 + pretmp_75;
  _24 = (long unsigned int) _23;
  _25 = _24 * 4;
  _27 = pretmp_76 + _25;
  _29 = pretmp_78 + _25;
  vect__30.290_341 = MEM[(float *)vectp.288_339];
  _30 = *_29;
  vect__31.291_342 = vect__30.290_341 * vect__30.290_341;
  _31 = _30 * _30;
  MEM[(float *)vectp.292_348] = vect__31.291_342;
  _34 = pretmp_80 + _25;
  _36 = pretmp_82 + _25;
  vect__37.296_357 = MEM[(float *)vectp.294_355];
  _37 = *_36;
  vect__38.297_358 = vect__37.296_357 * vect__37.296_357;
  _38 = _37 * _37;
  MEM[(float *)vectp.298_364] = vect__38.297_358;
  _41 = pretmp_84 + _25;
  vect__42.302_373 = MEM[(float *)vectp.300_371];
  _42 = *_29;
  vect__43.305_381 = MEM[(float *)vectp.303_379];
  _43 = *_36;
  vect__44.306_382 = vect__42.302_373 * vect__43.305_381;
  _44 = _42 * _43;
  MEM[(float *)vectp.307_388] = vect__44.306_382;
  j_46 = j_57 + 1;
  vectp.288_340 = vectp.288_339 + 16;
  vectp.292_349 = vectp.292_348 + 16;
  vectp.294_356 = vectp.294_355 + 16;
  vectp.298_365 = vectp.298_364 + 16;
  vectp.300_372 = vectp.300_371 + 16;
  vectp.303_380 = vectp.303_379 + 16;
  vectp.307_389 = vectp.307_388 + 16;
  ivtmp_391 = ivtmp_45 + 1;
  if (ivtmp_391 < bnd.285_298)
    goto <bb 24>;
  else
    goto <bb 18>;

  <bb 16>:
  # j_302 = PHI <j_322(17), j_326(19)>
  _304 = j_302 + pretmp_75;
  _305 = (long unsigned int) _304;
  _306 = _305 * 4;
  _307 = pretmp_76 + _306;
  _308 = pretmp_78 + _306;
  _309 = *_308;
  _310 = _309 * _309;
  *_307 = _310;
  _312 = pretmp_80 + _306;
  _313 = pretmp_82 + _306;
  _314 = *_313;
  _315 = _314 * _314;
  *_312 = _315;
  _317 = pretmp_84 + _306;
  _318 = *_308;
  _319 = *_313;
  _320 = _318 * _319;
  *_317 = _320;
  j_322 = j_302 + 1;
  if (j_322 <= pretmp_66)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:
  goto <bb 16>;

  <bb 18>:
  # j_327 = PHI <j_46(15)>
  _333 = (int) ratio_mult_vf.286_301;
  tmp.287_332 = j_288 + _333;
  if (niters.284_297 == ratio_mult_vf.286_301)
    goto <bb 21>;
  else
    goto <bb 19>;

  <bb 19>:
  # j_326 = PHI <tmp.287_332(18), j_288(13)>
  goto <bb 16>;

  <bb 20>:

  <bb 21>:

  <bb 22>:

  <bb 23>:
  goto <bb 6>;

  <bb 24>:
  goto <bb 15>;

  <bb 25>:

  <bb 26>:
  # j_233 = PHI <1(25), j_253(27)>
  _235 = j_233 + pretmp_75;
  _236 = (long unsigned int) _235;
  _237 = _236 * 4;
  _238 = pretmp_76 + _237;
  _239 = pretmp_78 + _237;
  _240 = *_239;
  _241 = _240 * _240;
  *_238 = _241;
  _243 = pretmp_80 + _237;
  _244 = pretmp_82 + _237;
  _245 = *_244;
  _246 = _245 * _245;
  *_243 = _246;
  _248 = pretmp_84 + _237;
  _249 = *_239;
  _250 = *_244;
  _251 = _249 * _250;
  *_248 = _251;
  j_253 = j_233 + 1;
  if (j_253 <= pretmp_66)
    goto <bb 27>;
  else
    goto <bb 23>;

  <bb 27>:
  goto <bb 26>;

  <bb 28>:

  <bb 29>:
  return;

  <bb 30>:
  q.12_15 = q.12_13 + 1;
  goto <bb 3>;

}



;; Function <built-in> (_Z10harris_optiiPfRS_._omp_fn.0, funcdef_no=4429, decl_uid=80536, symbol_order=3092)


Analyzing loop at harris.opt.cpp:77
harris.opt.cpp:77:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:77:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:77:5: note: ===== analyze_loop_nest_1 =====
harris.opt.cpp:77:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:77:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [2, + , 1](no_overflow) <= pretmp_203
  bounds on difference of bases: -1 ... 2147483645
  result:
    # of iterations (unsigned int) pretmp_203 + 4294967295, bounded by 2147483646
harris.opt.cpp:77:5: note: Symbolic number of iterations is (unsigned int) pretmp_203
harris.opt.cpp:77:5: note: not vectorized: control flow in loop.
harris.opt.cpp:77:5: note: bad loop form.

Analyzing loop at harris.opt.cpp:77
harris.opt.cpp:77:5: note: ===== analyze_loop_nest =====
harris.opt.cpp:77:5: note: === vect_analyze_loop_form ===
harris.opt.cpp:77:5: note: === get_loop_niters ===
harris.opt.cpp:77:5: note: Symbolic number of iterations is (unsigned int) pretmp_203
harris.opt.cpp:77:5: note: === vect_analyze_data_refs ===
Creating dr for *_35
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	Access function 0: {0B, +, 4}_2
Creating dr for *_43
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	Access function 0: {0B, +, 4}_2
Creating dr for *_50
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_57
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_65
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_72
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_27
analyze_innermost: success.
	base_address: pretmp_264 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_264 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	Access function 0: {4B, +, 4}_2
Creating dr for *_35
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	Access function 0: {0B, +, 4}_2
Creating dr for *_65
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_87
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	Access function 0: {0B, +, 4}_2
Creating dr for *_94
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_43
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	Access function 0: {0B, +, 4}_2
Creating dr for *_72
analyze_innermost: success.
	base_address: pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
	Access function 0: {8B, +, 4}_2
Creating dr for *_78
analyze_innermost: success.
	base_address: pretmp_282 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *pretmp_282 + (sizetype) ((long unsigned int) pretmp_260 * 4)
	Access function 0: {4B, +, 4}_2
harris.opt.cpp:77:5: note: got vectype for stmt: _36 = *_35;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _44 = *_43;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _51 = *_50;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _58 = *_57;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _66 = *_65;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _73 = *_72;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: *_27 = _75;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _79 = *_35;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _81 = *_65;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _88 = *_87;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _95 = *_94;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _98 = *_43;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: _101 = *_72;
vector(4) float
harris.opt.cpp:77:5: note: got vectype for stmt: *_78 = _103;
vector(4) float
harris.opt.cpp:77:5: note: === vect_analyze_scalar_cycles ===
harris.opt.cpp:77:5: note: Analyze phi: j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: Access function of PHI: {1, +, 1}_2
harris.opt.cpp:77:5: note: step: 1,  init: 1
harris.opt.cpp:77:5: note: Detected induction.
harris.opt.cpp:77:5: note: Analyze phi: .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: === vect_pattern_recog ===
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _24
harris.opt.cpp:77:5: note: def_stmt: _24 = (long unsigned int) _23;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _23
harris.opt.cpp:77:5: note: def_stmt: _23 = j_117 + pretmp_260;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _32
harris.opt.cpp:77:5: note: def_stmt: _32 = (long unsigned int) _31;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _31
harris.opt.cpp:77:5: note: def_stmt: _31 = _30 + pretmp_267;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:77:5: note: def_stmt: _36 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _41
harris.opt.cpp:77:5: note: def_stmt: _41 = (long unsigned int) _40;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _40
harris.opt.cpp:77:5: note: def_stmt: _40 = _30 + pretmp_272;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:77:5: note: def_stmt: _44 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _48
harris.opt.cpp:77:5: note: def_stmt: _48 = (long unsigned int) _47;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _47
harris.opt.cpp:77:5: note: def_stmt: _47 = j_117 + pretmp_267;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _51
harris.opt.cpp:77:5: note: def_stmt: _51 = *_50;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _55
harris.opt.cpp:77:5: note: def_stmt: _55 = (long unsigned int) _54;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _54
harris.opt.cpp:77:5: note: def_stmt: _54 = j_117 + pretmp_272;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _58
harris.opt.cpp:77:5: note: def_stmt: _58 = *_57;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _63
harris.opt.cpp:77:5: note: def_stmt: _63 = (long unsigned int) _62;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _62
harris.opt.cpp:77:5: note: def_stmt: _62 = j_61 + pretmp_267;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:77:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _70
harris.opt.cpp:77:5: note: def_stmt: _70 = (long unsigned int) _69;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _69
harris.opt.cpp:77:5: note: def_stmt: _69 = j_61 + pretmp_272;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _73
harris.opt.cpp:77:5: note: def_stmt: _73 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _79
harris.opt.cpp:77:5: note: def_stmt: _79 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:77:5: note: def_stmt: _81 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _85
harris.opt.cpp:77:5: note: def_stmt: _85 = (long unsigned int) _84;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _84
harris.opt.cpp:77:5: note: def_stmt: _84 = _30 + pretmp_260;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _88
harris.opt.cpp:77:5: note: def_stmt: _88 = *_87;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _92
harris.opt.cpp:77:5: note: def_stmt: _92 = (long unsigned int) _91;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _91
harris.opt.cpp:77:5: note: def_stmt: _91 = j_61 + pretmp_260;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 4
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:77:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:77:5: note: def_stmt: _98 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:77:5: note: def_stmt: _101 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vect_analyze_data_ref_accesses ===
harris.opt.cpp:77:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.opt.cpp:77:5: note: init: phi relevant? j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: init: phi relevant? .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: init: stmt relevant? _23 = j_117 + pretmp_260;

harris.opt.cpp:77:5: note: init: stmt relevant? _24 = (long unsigned int) _23;

harris.opt.cpp:77:5: note: init: stmt relevant? _25 = _24 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _27 = pretmp_264 + _25;

harris.opt.cpp:77:5: note: init: stmt relevant? _30 = j_117 + -1;

harris.opt.cpp:77:5: note: init: stmt relevant? _31 = _30 + pretmp_267;

harris.opt.cpp:77:5: note: init: stmt relevant? _32 = (long unsigned int) _31;

harris.opt.cpp:77:5: note: init: stmt relevant? _33 = _32 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _35 = pretmp_269 + _33;

harris.opt.cpp:77:5: note: init: stmt relevant? _36 = *_35;

harris.opt.cpp:77:5: note: init: stmt relevant? _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _40 = _30 + pretmp_272;

harris.opt.cpp:77:5: note: init: stmt relevant? _41 = (long unsigned int) _40;

harris.opt.cpp:77:5: note: init: stmt relevant? _42 = _41 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _43 = pretmp_269 + _42;

harris.opt.cpp:77:5: note: init: stmt relevant? _44 = *_43;

harris.opt.cpp:77:5: note: init: stmt relevant? _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _46 = _37 + _45;

harris.opt.cpp:77:5: note: init: stmt relevant? _47 = j_117 + pretmp_267;

harris.opt.cpp:77:5: note: init: stmt relevant? _48 = (long unsigned int) _47;

harris.opt.cpp:77:5: note: init: stmt relevant? _49 = _48 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _50 = pretmp_269 + _49;

harris.opt.cpp:77:5: note: init: stmt relevant? _51 = *_50;

harris.opt.cpp:77:5: note: init: stmt relevant? _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: init: stmt relevant? _53 = _46 + _52;

harris.opt.cpp:77:5: note: init: stmt relevant? _54 = j_117 + pretmp_272;

harris.opt.cpp:77:5: note: init: stmt relevant? _55 = (long unsigned int) _54;

harris.opt.cpp:77:5: note: init: stmt relevant? _56 = _55 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _57 = pretmp_269 + _56;

harris.opt.cpp:77:5: note: init: stmt relevant? _58 = *_57;

harris.opt.cpp:77:5: note: init: stmt relevant? _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: init: stmt relevant? _60 = _53 + _59;

harris.opt.cpp:77:5: note: init: stmt relevant? j_61 = j_117 + 1;

harris.opt.cpp:77:5: note: init: stmt relevant? _62 = j_61 + pretmp_267;

harris.opt.cpp:77:5: note: init: stmt relevant? _63 = (long unsigned int) _62;

harris.opt.cpp:77:5: note: init: stmt relevant? _64 = _63 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _65 = pretmp_269 + _64;

harris.opt.cpp:77:5: note: init: stmt relevant? _66 = *_65;

harris.opt.cpp:77:5: note: init: stmt relevant? _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _68 = _60 + _67;

harris.opt.cpp:77:5: note: init: stmt relevant? _69 = j_61 + pretmp_272;

harris.opt.cpp:77:5: note: init: stmt relevant? _70 = (long unsigned int) _69;

harris.opt.cpp:77:5: note: init: stmt relevant? _71 = _70 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _72 = pretmp_269 + _71;

harris.opt.cpp:77:5: note: init: stmt relevant? _73 = *_72;

harris.opt.cpp:77:5: note: init: stmt relevant? _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _75 = _68 + _74;

harris.opt.cpp:77:5: note: init: stmt relevant? *_27 = _75;

harris.opt.cpp:77:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: init: stmt relevant? _78 = pretmp_282 + _25;

harris.opt.cpp:77:5: note: init: stmt relevant? _79 = *_35;

harris.opt.cpp:77:5: note: init: stmt relevant? _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _81 = *_65;

harris.opt.cpp:77:5: note: init: stmt relevant? _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _83 = _80 + _82;

harris.opt.cpp:77:5: note: init: stmt relevant? _84 = _30 + pretmp_260;

harris.opt.cpp:77:5: note: init: stmt relevant? _85 = (long unsigned int) _84;

harris.opt.cpp:77:5: note: init: stmt relevant? _86 = _85 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _87 = pretmp_269 + _86;

harris.opt.cpp:77:5: note: init: stmt relevant? _88 = *_87;

harris.opt.cpp:77:5: note: init: stmt relevant? _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: init: stmt relevant? _90 = _83 + _89;

harris.opt.cpp:77:5: note: init: stmt relevant? _91 = j_61 + pretmp_260;

harris.opt.cpp:77:5: note: init: stmt relevant? _92 = (long unsigned int) _91;

harris.opt.cpp:77:5: note: init: stmt relevant? _93 = _92 * 4;

harris.opt.cpp:77:5: note: init: stmt relevant? _94 = pretmp_269 + _93;

harris.opt.cpp:77:5: note: init: stmt relevant? _95 = *_94;

harris.opt.cpp:77:5: note: init: stmt relevant? _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: init: stmt relevant? _97 = _90 + _96;

harris.opt.cpp:77:5: note: init: stmt relevant? _98 = *_43;

harris.opt.cpp:77:5: note: init: stmt relevant? _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _100 = _97 + _99;

harris.opt.cpp:77:5: note: init: stmt relevant? _101 = *_72;

harris.opt.cpp:77:5: note: init: stmt relevant? _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: init: stmt relevant? _103 = _100 + _102;

harris.opt.cpp:77:5: note: init: stmt relevant? *_78 = _103;

harris.opt.cpp:77:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: init: stmt relevant? if (j_61 <= pretmp_203)

harris.opt.cpp:77:5: note: worklist: examine stmt: *_78 = _103;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _103
harris.opt.cpp:77:5: note: def_stmt: _103 = _100 + _102;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _103 = _100 + _102;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _100
harris.opt.cpp:77:5: note: def_stmt: _100 = _97 + _99;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _102
harris.opt.cpp:77:5: note: def_stmt: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:77:5: note: def_stmt: _101 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _101 = *_72;

harris.opt.cpp:77:5: note: worklist: examine stmt: _100 = _97 + _99;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _97
harris.opt.cpp:77:5: note: def_stmt: _97 = _90 + _96;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _99
harris.opt.cpp:77:5: note: def_stmt: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:77:5: note: def_stmt: _98 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _98 = *_43;

harris.opt.cpp:77:5: note: worklist: examine stmt: _97 = _90 + _96;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _90
harris.opt.cpp:77:5: note: def_stmt: _90 = _83 + _89;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _96
harris.opt.cpp:77:5: note: def_stmt: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:77:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _95 = *_94;

harris.opt.cpp:77:5: note: worklist: examine stmt: _90 = _83 + _89;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _83
harris.opt.cpp:77:5: note: def_stmt: _83 = _80 + _82;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _89
harris.opt.cpp:77:5: note: def_stmt: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _88
harris.opt.cpp:77:5: note: def_stmt: _88 = *_87;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _88 = *_87;

harris.opt.cpp:77:5: note: worklist: examine stmt: _83 = _80 + _82;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _80
harris.opt.cpp:77:5: note: def_stmt: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _82
harris.opt.cpp:77:5: note: def_stmt: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:77:5: note: def_stmt: _81 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _81 = *_65;

harris.opt.cpp:77:5: note: worklist: examine stmt: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _79
harris.opt.cpp:77:5: note: def_stmt: _79 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _79 = *_35;

harris.opt.cpp:77:5: note: worklist: examine stmt: *_27 = _75;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _75
harris.opt.cpp:77:5: note: def_stmt: _75 = _68 + _74;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _75 = _68 + _74;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _68
harris.opt.cpp:77:5: note: def_stmt: _68 = _60 + _67;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _74
harris.opt.cpp:77:5: note: def_stmt: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _73
harris.opt.cpp:77:5: note: def_stmt: _73 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _73 = *_72;

harris.opt.cpp:77:5: note: worklist: examine stmt: _68 = _60 + _67;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _60
harris.opt.cpp:77:5: note: def_stmt: _60 = _53 + _59;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _67
harris.opt.cpp:77:5: note: def_stmt: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:77:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _66 = *_65;

harris.opt.cpp:77:5: note: worklist: examine stmt: _60 = _53 + _59;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _53
harris.opt.cpp:77:5: note: def_stmt: _53 = _46 + _52;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _59
harris.opt.cpp:77:5: note: def_stmt: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _58
harris.opt.cpp:77:5: note: def_stmt: _58 = *_57;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _58 = *_57;

harris.opt.cpp:77:5: note: worklist: examine stmt: _53 = _46 + _52;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:77:5: note: def_stmt: _46 = _37 + _45;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _52
harris.opt.cpp:77:5: note: def_stmt: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _51
harris.opt.cpp:77:5: note: def_stmt: _51 = *_50;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _51 = *_50;

harris.opt.cpp:77:5: note: worklist: examine stmt: _46 = _37 + _45;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:77:5: note: def_stmt: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:77:5: note: def_stmt: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:77:5: note: def_stmt: _44 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _44 = *_43;

harris.opt.cpp:77:5: note: worklist: examine stmt: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:77:5: note: def_stmt: _36 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: mark relevant 4, live 0.
harris.opt.cpp:77:5: note: worklist: examine stmt: _36 = *_35;

harris.opt.cpp:77:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _44 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _51 = *_50;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _58 = *_57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _66 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _73 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _79 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _81 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _51 = *_50;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _58 = *_57;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _73 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _79 = *_35;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _81 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _98 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _101 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _58 = *_57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _66 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _73 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _79 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _81 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _73 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _79 = *_35;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _81 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _98 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _101 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _73 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _79 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _81 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: *_27 = _75;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _79 = *_35;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _81 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _98 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _101 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _79 = *_35;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _81 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _81 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _98 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _101 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_43;
  stmt_b: _101 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _98 = *_43;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _101 = *_72;
  stmt_b: *_78 = _103;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _36 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _44 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _51 = *_50;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _58 = *_57;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _66 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _73 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_27 = _75;
  stmt_b: *_27 = _75;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _79 = *_35;
  stmt_b: _79 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _81 = *_65;
  stmt_b: _81 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _88 = *_87;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _98 = *_43;
  stmt_b: _98 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _101 = *_72;
  stmt_b: _101 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_2)
  (chrec_b = {8B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_78 = _103;
  stmt_b: *_78 = _103;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_2)
  (chrec_b = {4B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_35 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_35 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_35 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_35 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_43 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_43 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_43 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_43 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_50 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_50 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_50 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_50 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_57 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_57 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_57 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_57 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_65 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_65 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_65 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_65 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_72 and *_27
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_72 and *_27
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_72 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_72 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_35
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_35
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_65
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_65
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_87
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_87
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_94
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_94
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_43
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_43
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_72
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_72
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_27 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_27 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_35 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_35 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_65 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_65 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_87 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_87 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_94 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_94 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_43 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_43 and *_78
harris.opt.cpp:77:5: note: versioning for alias required: can't determine dependence between *_72 and *_78
harris.opt.cpp:77:5: note: mark for run-time aliasing test between *_72 and *_78
harris.opt.cpp:77:5: note: === vect_determine_vectorization_factor ===
harris.opt.cpp:77:5: note: ==> examining phi: j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: ==> examining phi: .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: ==> examining statement: _23 = j_117 + pretmp_260;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _24 = (long unsigned int) _23;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _25 = _24 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _27 = pretmp_264 + _25;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _30 = j_117 + -1;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _31 = _30 + pretmp_267;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _32 = (long unsigned int) _31;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _33 = _32 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _35 = pretmp_269 + _33;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _36 = *_35;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _40 = _30 + pretmp_272;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _41 = (long unsigned int) _40;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _42 = _41 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _43 = pretmp_269 + _42;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _44 = *_43;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _46 = _37 + _45;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _47 = j_117 + pretmp_267;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _48 = (long unsigned int) _47;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _49 = _48 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _50 = pretmp_269 + _49;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _51 = *_50;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _53 = _46 + _52;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _54 = j_117 + pretmp_272;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _55 = (long unsigned int) _54;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _56 = _55 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _57 = pretmp_269 + _56;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _58 = *_57;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _60 = _53 + _59;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: j_61 = j_117 + 1;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _62 = j_61 + pretmp_267;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _63 = (long unsigned int) _62;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _64 = _63 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _65 = pretmp_269 + _64;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _66 = *_65;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _68 = _60 + _67;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _69 = j_61 + pretmp_272;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _70 = (long unsigned int) _69;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _71 = _70 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _72 = pretmp_269 + _71;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _73 = *_72;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _75 = _68 + _74;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: *_27 = _75;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _78 = pretmp_282 + _25;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _79 = *_35;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _81 = *_65;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _83 = _80 + _82;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _84 = _30 + pretmp_260;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _85 = (long unsigned int) _84;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _86 = _85 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _87 = pretmp_269 + _86;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _88 = *_87;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _90 = _83 + _89;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _91 = j_61 + pretmp_260;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _92 = (long unsigned int) _91;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _93 = _92 * 4;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _94 = pretmp_269 + _93;

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: ==> examining statement: _95 = *_94;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _97 = _90 + _96;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _98 = *_43;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _100 = _97 + _99;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _101 = *_72;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: _103 = _100 + _102;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: *_78 = _103;

harris.opt.cpp:77:5: note: get vectype for scalar type:  float
harris.opt.cpp:77:5: note: vectype: vector(4) float
harris.opt.cpp:77:5: note: nunits = 4
harris.opt.cpp:77:5: note: ==> examining statement: if (j_61 <= pretmp_203)

harris.opt.cpp:77:5: note: skip.
harris.opt.cpp:77:5: note: vectorization factor = 4
harris.opt.cpp:77:5: note: === vect_analyze_data_refs_alignment ===
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 0.
harris.opt.cpp:77:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_35 and *_35
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 0.
harris.opt.cpp:77:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_43 and *_43
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 1.
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 0.
harris.opt.cpp:77:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_65 and *_65
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 0.
harris.opt.cpp:77:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_72 and *_72
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: dependence distance  = 2.
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_35
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_43
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_50
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_57
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_65
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_72
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_27
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_35
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_65
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_87
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_94
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_43
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_72
harris.opt.cpp:77:5: note: vect_compute_data_ref_alignment:
harris.opt.cpp:77:5: note: can't force alignment of ref: *_78
harris.opt.cpp:77:5: note: === vect_prune_runtime_alias_test_list ===
harris.opt.cpp:77:5: note: merging ranges for *_87, *_27 and *_94, *_27
harris.opt.cpp:77:5: note: found equal ranges *_27, *_35 and *_27, *_35
harris.opt.cpp:77:5: note: merging ranges for *_35, *_27 and *_50, *_27
harris.opt.cpp:77:5: note: merging ranges for *_35, *_27 and *_65, *_27
harris.opt.cpp:77:5: note: merging ranges for *_35, *_27 and *_65, *_27
harris.opt.cpp:77:5: note: found equal ranges *_27, *_43 and *_27, *_43
harris.opt.cpp:77:5: note: merging ranges for *_43, *_27 and *_57, *_27
harris.opt.cpp:77:5: note: merging ranges for *_43, *_27 and *_72, *_27
harris.opt.cpp:77:5: note: merging ranges for *_43, *_27 and *_72, *_27
harris.opt.cpp:77:5: note: merging ranges for *_87, *_78 and *_94, *_78
harris.opt.cpp:77:5: note: found equal ranges *_78, *_35 and *_78, *_35
harris.opt.cpp:77:5: note: merging ranges for *_35, *_78 and *_50, *_78
harris.opt.cpp:77:5: note: merging ranges for *_35, *_78 and *_65, *_78
harris.opt.cpp:77:5: note: merging ranges for *_35, *_78 and *_65, *_78
harris.opt.cpp:77:5: note: found equal ranges *_78, *_43 and *_78, *_43
harris.opt.cpp:77:5: note: merging ranges for *_43, *_78 and *_57, *_78
harris.opt.cpp:77:5: note: merging ranges for *_43, *_78 and *_72, *_78
harris.opt.cpp:77:5: note: merging ranges for *_43, *_78 and *_72, *_78
harris.opt.cpp:77:5: note: improved number of alias checks from 25 to 7
harris.opt.cpp:77:5: note: === vect_enhance_data_refs_alignment ===
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: Unknown misalignment, is_packed = 0
harris.opt.cpp:77:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:77:5: note: Analyze phi: j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: Analyze phi: .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: virtual phi. skip.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:77:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Setting misalignment to -1.
harris.opt.cpp:77:5: note: Alignment of access forced using peeling.
harris.opt.cpp:77:5: note: Peeling for alignment will be applied.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: Vectorizing an unaligned access.
harris.opt.cpp:77:5: note: === vect_analyze_slp ===
harris.opt.cpp:77:5: note: === vect_make_slp_decision ===
harris.opt.cpp:77:5: note: === vect_detect_hybrid_slp ===
harris.opt.cpp:77:5: note: === vect_analyze_loop_operations ===
harris.opt.cpp:77:5: note: examining phi: j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: examining phi: .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: ==> examining statement: _23 = j_117 + pretmp_260;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _24 = (long unsigned int) _23;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _25 = _24 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _27 = pretmp_264 + _25;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _30 = j_117 + -1;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _31 = _30 + pretmp_267;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _32 = (long unsigned int) _31;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _33 = _32 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _35 = pretmp_269 + _33;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _36 = *_35;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_35
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_35
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: aligned.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:77:5: note: def_stmt: _36 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _40 = _30 + pretmp_272;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _41 = (long unsigned int) _40;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _42 = _41 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _43 = pretmp_269 + _42;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _44 = *_43;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_43
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_43
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:77:5: note: def_stmt: _44 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _46 = _37 + _45;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:77:5: note: def_stmt: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:77:5: note: def_stmt: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _47 = j_117 + pretmp_267;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _48 = (long unsigned int) _47;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _49 = _48 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _50 = pretmp_269 + _49;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _51 = *_50;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_50
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_50
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _51
harris.opt.cpp:77:5: note: def_stmt: _51 = *_50;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _53 = _46 + _52;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:77:5: note: def_stmt: _46 = _37 + _45;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _52
harris.opt.cpp:77:5: note: def_stmt: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _54 = j_117 + pretmp_272;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _55 = (long unsigned int) _54;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _56 = _55 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _57 = pretmp_269 + _56;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _58 = *_57;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_57
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_57
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _58
harris.opt.cpp:77:5: note: def_stmt: _58 = *_57;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _60 = _53 + _59;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _53
harris.opt.cpp:77:5: note: def_stmt: _53 = _46 + _52;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _59
harris.opt.cpp:77:5: note: def_stmt: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: j_61 = j_117 + 1;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _62 = j_61 + pretmp_267;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _63 = (long unsigned int) _62;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _64 = _63 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _65 = pretmp_269 + _64;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _66 = *_65;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_65
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_65
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:77:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _68 = _60 + _67;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _60
harris.opt.cpp:77:5: note: def_stmt: _60 = _53 + _59;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _67
harris.opt.cpp:77:5: note: def_stmt: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _69 = j_61 + pretmp_272;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _70 = (long unsigned int) _69;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _71 = _70 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _72 = pretmp_269 + _71;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _73 = *_72;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_72
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_72
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _73
harris.opt.cpp:77:5: note: def_stmt: _73 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _75 = _68 + _74;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _68
harris.opt.cpp:77:5: note: def_stmt: _68 = _60 + _67;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _74
harris.opt.cpp:77:5: note: def_stmt: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: *_27 = _75;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _75
harris.opt.cpp:77:5: note: def_stmt: _75 = _68 + _74;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _78 = pretmp_282 + _25;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _79 = *_35;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_35
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_35
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: aligned.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _79
harris.opt.cpp:77:5: note: def_stmt: _79 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _81 = *_65;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_65
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_65
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:77:5: note: def_stmt: _81 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _83 = _80 + _82;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _80
harris.opt.cpp:77:5: note: def_stmt: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _82
harris.opt.cpp:77:5: note: def_stmt: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _84 = _30 + pretmp_260;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _85 = (long unsigned int) _84;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _86 = _85 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _87 = pretmp_269 + _86;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _88 = *_87;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_87
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_87
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _88
harris.opt.cpp:77:5: note: def_stmt: _88 = *_87;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _90 = _83 + _89;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _83
harris.opt.cpp:77:5: note: def_stmt: _83 = _80 + _82;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _89
harris.opt.cpp:77:5: note: def_stmt: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _91 = j_61 + pretmp_260;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _92 = (long unsigned int) _91;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _93 = _92 * 4;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _94 = pretmp_269 + _93;

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: ==> examining statement: _95 = *_94;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_94
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_94
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:77:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _97 = _90 + _96;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _90
harris.opt.cpp:77:5: note: def_stmt: _90 = _83 + _89;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _96
harris.opt.cpp:77:5: note: def_stmt: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _98 = *_43;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_43
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_43
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:77:5: note: def_stmt: _98 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _100 = _97 + _99;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _97
harris.opt.cpp:77:5: note: def_stmt: _97 = _90 + _96;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _99
harris.opt.cpp:77:5: note: def_stmt: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _101 = *_72;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_72
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand *_72
harris.opt.cpp:77:5: note: not ssa-name.
harris.opt.cpp:77:5: note: use not simple.
harris.opt.cpp:77:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:77:5: note: def_stmt: _101 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.opt.cpp:77:5: note: ==> examining statement: _103 = _100 + _102;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _100
harris.opt.cpp:77:5: note: def_stmt: _100 = _97 + _99;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _102
harris.opt.cpp:77:5: note: def_stmt: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: === vectorizable_operation ===
harris.opt.cpp:77:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: *_78 = _103;

harris.opt.cpp:77:5: note: vect_is_simple_use: operand _103
harris.opt.cpp:77:5: note: def_stmt: _103 = _100 + _102;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.opt.cpp:77:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.opt.cpp:77:5: note: ==> examining statement: if (j_61 <= pretmp_203)

harris.opt.cpp:77:5: note: irrelevant.
harris.opt.cpp:77:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.opt.cpp:77:5: note: Cost model analysis: 
  Vector inside of loop cost: 48
  Vector prologue cost: 120
  Vector epilogue cost: 72
  Scalar iteration cost: 36
  Scalar outside cost: 1
  Vector outside cost: 192
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 6

harris.opt.cpp:77:5: note:   Runtime profitability threshold = 5
harris.opt.cpp:77:5: note:   Static estimate profitability threshold = 5
harris.opt.cpp:77:5: note: epilog loop required
harris.opt.cpp:77:5: note: vect_can_advance_ivs_p:
harris.opt.cpp:77:5: note: Analyze phi: j_117 = PHI <1(9), j_61(12)>

harris.opt.cpp:77:5: note: Analyze phi: .MEM_115 = PHI <.MEM_5(9), .MEM_104(12)>

harris.opt.cpp:77:5: note: virtual phi. skip.
harris.opt.cpp:77:5: note: loop vectorized
harris.opt.cpp:77:5: note: === vec_transform_loop ===
harris.opt.cpp:77:5: note: Profitability threshold is 5 loop iterations.
harris.opt.cpp:77:5: note: create runtime check for data references *_27 and *_87
harris.opt.cpp:77:5: note: create runtime check for data references *_27 and *_78
harris.opt.cpp:77:5: note: create runtime check for data references *_27 and *_35
harris.opt.cpp:77:5: note: create runtime check for data references *_27 and *_43
harris.opt.cpp:77:5: note: create runtime check for data references *_87 and *_78
harris.opt.cpp:77:5: note: create runtime check for data references *_78 and *_35
harris.opt.cpp:77:5: note: create runtime check for data references *_78 and *_43
harris.opt.cpp:77:5: note: created 7 versioning for alias checks.
harris.opt.cpp:77:5: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #10
Updating SSA information for statement _23 = j_117 + pretmp_260;
Updating SSA information for statement _24 = (long unsigned int) _23;
Updating SSA information for statement _25 = _24 * 4;
Updating SSA information for statement _27 = pretmp_264 + _25;
Updating SSA information for statement _30 = j_117 + -1;
Updating SSA information for statement _31 = _30 + pretmp_267;
Updating SSA information for statement _32 = (long unsigned int) _31;
Updating SSA information for statement _33 = _32 * 4;
Updating SSA information for statement _35 = pretmp_269 + _33;
Updating SSA information for statement _36 = *_35;
Updating SSA information for statement _37 = _36 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _40 = _30 + pretmp_272;
Updating SSA information for statement _41 = (long unsigned int) _40;
Updating SSA information for statement _42 = _41 * 4;
Updating SSA information for statement _43 = pretmp_269 + _42;
Updating SSA information for statement _44 = *_43;
Updating SSA information for statement _45 = _44 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _46 = _37 + _45;
Updating SSA information for statement _47 = j_117 + pretmp_267;
Updating SSA information for statement _48 = (long unsigned int) _47;
Updating SSA information for statement _49 = _48 * 4;
Updating SSA information for statement _50 = pretmp_269 + _49;
Updating SSA information for statement _51 = *_50;
Updating SSA information for statement _52 = _51 * -1.6666667163372039794921875e-1;
Updating SSA information for statement _53 = _46 + _52;
Updating SSA information for statement _54 = j_117 + pretmp_272;
Updating SSA information for statement _55 = (long unsigned int) _54;
Updating SSA information for statement _56 = _55 * 4;
Updating SSA information for statement _57 = pretmp_269 + _56;
Updating SSA information for statement _58 = *_57;
Updating SSA information for statement _59 = _58 * 1.6666667163372039794921875e-1;
Updating SSA information for statement _60 = _53 + _59;
Updating SSA information for statement j_61 = j_117 + 1;
Updating SSA information for statement _62 = j_61 + pretmp_267;
Updating SSA information for statement _63 = (long unsigned int) _62;
Updating SSA information for statement _64 = _63 * 4;
Updating SSA information for statement _65 = pretmp_269 + _64;
Updating SSA information for statement _66 = *_65;
Updating SSA information for statement _67 = _66 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _68 = _60 + _67;
Updating SSA information for statement _69 = j_61 + pretmp_272;
Updating SSA information for statement _70 = (long unsigned int) _69;
Updating SSA information for statement _71 = _70 * 4;
Updating SSA information for statement _72 = pretmp_269 + _71;
Updating SSA information for statement _73 = *_72;
Updating SSA information for statement _74 = _73 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _75 = _68 + _74;
Updating SSA information for statement *_27 = _75;
Updating SSA information for statement _78 = pretmp_282 + _25;
Updating SSA information for statement _79 = *_35;
Updating SSA information for statement _80 = _79 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _81 = *_65;
Updating SSA information for statement _82 = _81 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _83 = _80 + _82;
Updating SSA information for statement _84 = _30 + pretmp_260;
Updating SSA information for statement _85 = (long unsigned int) _84;
Updating SSA information for statement _86 = _85 * 4;
Updating SSA information for statement _87 = pretmp_269 + _86;
Updating SSA information for statement _88 = *_87;
Updating SSA information for statement _89 = _88 * -1.6666667163372039794921875e-1;
Updating SSA information for statement _90 = _83 + _89;
Updating SSA information for statement _91 = j_61 + pretmp_260;
Updating SSA information for statement _92 = (long unsigned int) _91;
Updating SSA information for statement _93 = _92 * 4;
Updating SSA information for statement _94 = pretmp_269 + _93;
Updating SSA information for statement _95 = *_94;
Updating SSA information for statement _96 = _95 * 1.6666667163372039794921875e-1;
Updating SSA information for statement _97 = _90 + _96;
Updating SSA information for statement _98 = *_43;
Updating SSA information for statement _99 = _98 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _100 = _97 + _99;
Updating SSA information for statement _101 = *_72;
Updating SSA information for statement _102 = _101 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _103 = _100 + _102;
Updating SSA information for statement *_78 = _103;
Updating SSA information for statement if (j_61 <= pretmp_203)
Registering new PHI nodes in block #12
Registering new PHI nodes in block #21
Registering new PHI nodes in block #20
Registering new PHI nodes in block #16
Updating SSA information for statement _151 = j_117 + pretmp_260;
Updating SSA information for statement _150 = (long unsigned int) _23;
Updating SSA information for statement _149 = _24 * 4;
Updating SSA information for statement _148 = pretmp_264 + _25;
Updating SSA information for statement _147 = j_117 + -1;
Updating SSA information for statement _146 = _30 + pretmp_267;
Updating SSA information for statement _145 = (long unsigned int) _31;
Updating SSA information for statement _144 = _32 * 4;
Updating SSA information for statement _143 = pretmp_269 + _33;
Updating SSA information for statement _142 = *_35;
Updating SSA information for statement _141 = _36 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _140 = _30 + pretmp_272;
Updating SSA information for statement _139 = (long unsigned int) _40;
Updating SSA information for statement _138 = _41 * 4;
Updating SSA information for statement _137 = pretmp_269 + _42;
Updating SSA information for statement _136 = *_43;
Updating SSA information for statement _135 = _44 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _134 = _37 + _45;
Updating SSA information for statement _133 = j_117 + pretmp_267;
Updating SSA information for statement _132 = (long unsigned int) _47;
Updating SSA information for statement _131 = _48 * 4;
Updating SSA information for statement _130 = pretmp_269 + _49;
Updating SSA information for statement _129 = *_50;
Updating SSA information for statement _128 = _51 * -1.6666667163372039794921875e-1;
Updating SSA information for statement _127 = _46 + _52;
Updating SSA information for statement _126 = j_117 + pretmp_272;
Updating SSA information for statement _125 = (long unsigned int) _54;
Updating SSA information for statement _124 = _55 * 4;
Updating SSA information for statement _123 = pretmp_269 + _56;
Updating SSA information for statement _122 = *_57;
Updating SSA information for statement _121 = _58 * 1.6666667163372039794921875e-1;
Updating SSA information for statement _120 = _53 + _59;
Updating SSA information for statement j_119 = j_117 + 1;
Updating SSA information for statement _113 = j_61 + pretmp_267;
Updating SSA information for statement _112 = (long unsigned int) _62;
Updating SSA information for statement _111 = _63 * 4;
Updating SSA information for statement _110 = pretmp_269 + _64;
Updating SSA information for statement _109 = *_65;
Updating SSA information for statement _108 = _66 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _107 = _60 + _67;
Updating SSA information for statement _106 = j_61 + pretmp_272;
Updating SSA information for statement _6 = (long unsigned int) _69;
Updating SSA information for statement _4 = _70 * 4;
Updating SSA information for statement _281 = pretmp_269 + _71;
Updating SSA information for statement _280 = *_72;
Updating SSA information for statement _279 = _73 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _278 = _68 + _74;
Updating SSA information for statement *_27 = _75;
Updating SSA information for statement _276 = pretmp_282 + _25;
Updating SSA information for statement _275 = *_35;
Updating SSA information for statement _274 = _79 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _273 = *_65;
Updating SSA information for statement _268 = _81 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _263 = _80 + _82;
Updating SSA information for statement _262 = _30 + pretmp_260;
Updating SSA information for statement _261 = (long unsigned int) _84;
Updating SSA information for statement _283 = _85 * 4;
Updating SSA information for statement _270 = pretmp_269 + _86;
Updating SSA information for statement _265 = *_87;
Updating SSA information for statement _114 = _88 * -1.6666667163372039794921875e-1;
Updating SSA information for statement _204 = _83 + _89;
Updating SSA information for statement _304 = j_61 + pretmp_260;
Updating SSA information for statement _305 = (long unsigned int) _91;
Updating SSA information for statement _306 = _92 * 4;
Updating SSA information for statement _307 = pretmp_269 + _93;
Updating SSA information for statement _308 = *_94;
Updating SSA information for statement _309 = _95 * 1.6666667163372039794921875e-1;
Updating SSA information for statement _310 = _90 + _96;
Updating SSA information for statement _311 = *_43;
Updating SSA information for statement _312 = _98 * -8.3333335816860198974609375e-2;
Updating SSA information for statement _313 = _97 + _99;
Updating SSA information for statement _314 = *_72;
Updating SSA information for statement _315 = _101 * 8.3333335816860198974609375e-2;
Updating SSA information for statement _316 = _100 + _102;
Updating SSA information for statement *_78 = _103;
Updating SSA information for statement if (j_61 <= pretmp_203)
Registering new PHI nodes in block #17
Registering new PHI nodes in block #11

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_4 -> { _71 }
_6 -> { _70 }
_106 -> { _69 }
_107 -> { _68 }
_108 -> { _67 }
_109 -> { _66 }
_110 -> { _65 }
_111 -> { _64 }
_112 -> { _63 }
_113 -> { _62 }
_114 -> { _89 }
j_119 -> { j_61 }
_120 -> { _60 }
_121 -> { _59 }
_122 -> { _58 }
_123 -> { _57 }
_124 -> { _56 }
_125 -> { _55 }
_126 -> { _54 }
_127 -> { _53 }
_128 -> { _52 }
_129 -> { _51 }
_130 -> { _50 }
_131 -> { _49 }
_132 -> { _48 }
_133 -> { _47 }
_134 -> { _46 }
_135 -> { _45 }
_136 -> { _44 }
_137 -> { _43 }
_138 -> { _42 }
_139 -> { _41 }
_140 -> { _40 }
_141 -> { _37 }
_142 -> { _36 }
_143 -> { _35 }
_144 -> { _33 }
_145 -> { _32 }
_146 -> { _31 }
_147 -> { _30 }
_148 -> { _27 }
_149 -> { _25 }
_150 -> { _24 }
_151 -> { _23 }
.MEM_152 -> { .MEM_115 }
j_153 -> { j_117 }
_204 -> { _90 }
_261 -> { _85 }
_262 -> { _84 }
_263 -> { _83 }
_265 -> { _88 }
_268 -> { _82 }
_270 -> { _87 }
_273 -> { _81 }
_274 -> { _80 }
_275 -> { _79 }
_276 -> { _78 }
.MEM_277 -> { .MEM_76 }
_278 -> { _75 }
_279 -> { _74 }
_280 -> { _73 }
_281 -> { _72 }
_283 -> { _86 }
_304 -> { _91 }
_305 -> { _92 }
_306 -> { _93 }
_307 -> { _94 }
_308 -> { _95 }
_309 -> { _96 }
_310 -> { _97 }
_311 -> { _98 }
_312 -> { _99 }
_313 -> { _100 }
_314 -> { _101 }
_315 -> { _102 }
_316 -> { _103 }
.MEM_317 -> { .MEM_104 }
Incremental SSA update started at block: 18
Number of blocks in CFG: 22
Number of blocks to update: 8 ( 36%)
Affected blocks: 10 11 12 16 17 19 20 21


harris.opt.cpp:77:5: note: loop peeled for vectorization to enhance alignment
harris.opt.cpp:77:5: note: created vectp.360_320
harris.opt.cpp:77:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.360_320 & 15) >> 2) & 3, niters.359_319>
Removing basic block 25
<bb 25>:


;; Scaling loop 4 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 2 with scale 0.777800, bounding iterations to 0 from guessed 14
;; guessed iterations are now 11

loop at harris.opt.cpp:80: if (ivtmp_412 < prolog_loop_niters.361_321)

Setting upper bound of nb iterations for prologue loop to 2
harris.opt.cpp:77:5: note: === vect_update_inits_of_dr ===
harris.opt.cpp:77:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 30
<bb 30>:


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 5 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.opt.cpp:77:5: note: vect_update_ivs_after_vectorizer: phi: j_117 = PHI <j_405(34), j_61(12)>

harris.opt.cpp:77:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_115 = PHI <.MEM_407(34), .MEM_104(12)>

harris.opt.cpp:77:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.opt.cpp:77:5: note: ------>vectorizing phi: j_117 = PHI <j_405(38), j_61(12)>

harris.opt.cpp:77:5: note: ------>vectorizing phi: .MEM_115 = PHI <.MEM_407(38), .MEM_104(12)>

harris.opt.cpp:77:5: note: ------>vectorizing statement: _23 = j_117 + pretmp_260;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _24 = (long unsigned int) _23;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _25 = _24 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _27 = pretmp_264 + _25;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _30 = j_117 + -1;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _31 = _30 + pretmp_267;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _32 = (long unsigned int) _31;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _33 = _32 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _35 = pretmp_269 + _33;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _36 = *_35;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
harris.opt.cpp:77:5: note: created vectp.368_507
harris.opt.cpp:77:5: note: add new stmt: vect__36.369_512 = MEM[(float *)vectp.367_510];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:77:5: note: def_stmt: _36 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _36
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _36
harris.opt.cpp:77:5: note: def_stmt: _36 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _36
  def_stmt =  _36 = *_35;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.371_513 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__37.370_514 = vect__36.369_512 * vect_cst_.371_513;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _40 = _30 + pretmp_272;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _41 = (long unsigned int) _40;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _42 = _41 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _43 = pretmp_269 + _42;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _44 = *_43;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
harris.opt.cpp:77:5: note: created vectp.373_515
harris.opt.cpp:77:5: note: add new stmt: vect__44.374_520 = MEM[(float *)vectp.372_518];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:77:5: note: def_stmt: _44 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _44
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _44
harris.opt.cpp:77:5: note: def_stmt: _44 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _44
  def_stmt =  _44 = *_43;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.376_521 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__45.375_522 = vect__44.374_520 * vect_cst_.376_521;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _46 = _37 + _45;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:77:5: note: def_stmt: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:77:5: note: def_stmt: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _37
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _37
harris.opt.cpp:77:5: note: def_stmt: _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _37
  def_stmt =  _37 = _36 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _45
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _45
harris.opt.cpp:77:5: note: def_stmt: _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _45
  def_stmt =  _45 = _44 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__46.377_523 = vect__37.370_514 + vect__45.375_522;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _47 = j_117 + pretmp_267;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _48 = (long unsigned int) _47;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _49 = _48 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _50 = pretmp_269 + _49;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _51 = *_50;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
harris.opt.cpp:77:5: note: created vectp.379_524
harris.opt.cpp:77:5: note: add new stmt: vect__51.380_531 = MEM[(float *)vectp.378_529];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _51
harris.opt.cpp:77:5: note: def_stmt: _51 = *_50;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _51
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _51
harris.opt.cpp:77:5: note: def_stmt: _51 = *_50;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _51
  def_stmt =  _51 = *_50;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.382_532 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };

harris.opt.cpp:77:5: note: add new stmt: vect__52.381_533 = vect__51.380_531 * vect_cst_.382_532;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _53 = _46 + _52;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:77:5: note: def_stmt: _46 = _37 + _45;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _52
harris.opt.cpp:77:5: note: def_stmt: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _46
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _46
harris.opt.cpp:77:5: note: def_stmt: _46 = _37 + _45;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _46
  def_stmt =  _46 = _37 + _45;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _52
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _52
harris.opt.cpp:77:5: note: def_stmt: _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _52
  def_stmt =  _52 = _51 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: add new stmt: vect__53.383_534 = vect__46.377_523 + vect__52.381_533;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _54 = j_117 + pretmp_272;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _55 = (long unsigned int) _54;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _56 = _55 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _57 = pretmp_269 + _56;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _58 = *_57;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
harris.opt.cpp:77:5: note: created vectp.385_535
harris.opt.cpp:77:5: note: add new stmt: vect__58.386_542 = MEM[(float *)vectp.384_540];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _58
harris.opt.cpp:77:5: note: def_stmt: _58 = *_57;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _58
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _58
harris.opt.cpp:77:5: note: def_stmt: _58 = *_57;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _58
  def_stmt =  _58 = *_57;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.388_543 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };

harris.opt.cpp:77:5: note: add new stmt: vect__59.387_544 = vect__58.386_542 * vect_cst_.388_543;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _60 = _53 + _59;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _53
harris.opt.cpp:77:5: note: def_stmt: _53 = _46 + _52;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _59
harris.opt.cpp:77:5: note: def_stmt: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _53
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _53
harris.opt.cpp:77:5: note: def_stmt: _53 = _46 + _52;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _53
  def_stmt =  _53 = _46 + _52;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _59
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _59
harris.opt.cpp:77:5: note: def_stmt: _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _59
  def_stmt =  _59 = _58 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: add new stmt: vect__60.389_545 = vect__53.383_534 + vect__59.387_544;

harris.opt.cpp:77:5: note: ------>vectorizing statement: j_61 = j_117 + 1;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _62 = j_61 + pretmp_267;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _63 = (long unsigned int) _62;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _64 = _63 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _65 = pretmp_269 + _64;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _66 = *_65;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
harris.opt.cpp:77:5: note: created vectp.391_546
harris.opt.cpp:77:5: note: add new stmt: vect__66.392_553 = MEM[(float *)vectp.390_551];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:77:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _66
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _66
harris.opt.cpp:77:5: note: def_stmt: _66 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _66
  def_stmt =  _66 = *_65;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.394_554 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__67.393_555 = vect__66.392_553 * vect_cst_.394_554;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _68 = _60 + _67;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _60
harris.opt.cpp:77:5: note: def_stmt: _60 = _53 + _59;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _67
harris.opt.cpp:77:5: note: def_stmt: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _60
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _60
harris.opt.cpp:77:5: note: def_stmt: _60 = _53 + _59;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _60
  def_stmt =  _60 = _53 + _59;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _67
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _67
harris.opt.cpp:77:5: note: def_stmt: _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _67
  def_stmt =  _67 = _66 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__68.395_556 = vect__60.389_545 + vect__67.393_555;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _69 = j_61 + pretmp_272;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _70 = (long unsigned int) _69;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _71 = _70 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _72 = pretmp_269 + _71;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _73 = *_72;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
harris.opt.cpp:77:5: note: created vectp.397_557
harris.opt.cpp:77:5: note: add new stmt: vect__73.398_564 = MEM[(float *)vectp.396_562];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _73
harris.opt.cpp:77:5: note: def_stmt: _73 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _73
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _73
harris.opt.cpp:77:5: note: def_stmt: _73 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _73
  def_stmt =  _73 = *_72;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.400_565 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__74.399_566 = vect__73.398_564 * vect_cst_.400_565;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _75 = _68 + _74;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _68
harris.opt.cpp:77:5: note: def_stmt: _68 = _60 + _67;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _74
harris.opt.cpp:77:5: note: def_stmt: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _68
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _68
harris.opt.cpp:77:5: note: def_stmt: _68 = _60 + _67;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _68
  def_stmt =  _68 = _60 + _67;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _74
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _74
harris.opt.cpp:77:5: note: def_stmt: _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _74
  def_stmt =  _74 = _73 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__75.401_567 = vect__68.395_556 + vect__74.399_566;

harris.opt.cpp:77:5: note: ------>vectorizing statement: *_27 = _75;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _75
harris.opt.cpp:77:5: note: def_stmt: _75 = _68 + _74;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform store. ncopies = 1
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _75
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _75
harris.opt.cpp:77:5: note: def_stmt: _75 = _68 + _74;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _75
  def_stmt =  _75 = _68 + _74;

harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_264 + (sizetype) ((long unsigned int) pretmp_260 * 4)
harris.opt.cpp:77:5: note: created vectp.403_568
harris.opt.cpp:77:5: note: add new stmt: MEM[(float *)vectp.402_573] = vect__75.401_567;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _78 = pretmp_282 + _25;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _79 = *_35;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
harris.opt.cpp:77:5: note: created vectp.405_76
harris.opt.cpp:77:5: note: add new stmt: vect__79.406_581 = MEM[(float *)vectp.404_579];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _79
harris.opt.cpp:77:5: note: def_stmt: _79 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _79
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _79
harris.opt.cpp:77:5: note: def_stmt: _79 = *_35;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _79
  def_stmt =  _79 = *_35;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.408_582 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__80.407_583 = vect__79.406_581 * vect_cst_.408_582;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _81 = *_65;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_267 * 4)
harris.opt.cpp:77:5: note: created vectp.410_584
harris.opt.cpp:77:5: note: add new stmt: vect__81.411_591 = MEM[(float *)vectp.409_589];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:77:5: note: def_stmt: _81 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _81
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _81
harris.opt.cpp:77:5: note: def_stmt: _81 = *_65;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _81
  def_stmt =  _81 = *_65;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.413_592 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__82.412_593 = vect__81.411_591 * vect_cst_.413_592;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _83 = _80 + _82;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _80
harris.opt.cpp:77:5: note: def_stmt: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _82
harris.opt.cpp:77:5: note: def_stmt: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _80
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _80
harris.opt.cpp:77:5: note: def_stmt: _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _80
  def_stmt =  _80 = _79 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _82
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _82
harris.opt.cpp:77:5: note: def_stmt: _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _82
  def_stmt =  _82 = _81 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__83.414_594 = vect__80.407_583 + vect__82.412_593;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _84 = _30 + pretmp_260;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _85 = (long unsigned int) _84;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _86 = _85 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _87 = pretmp_269 + _86;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _88 = *_87;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
harris.opt.cpp:77:5: note: created vectp.416_595
harris.opt.cpp:77:5: note: add new stmt: vect__88.417_600 = MEM[(float *)vectp.415_598];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _88
harris.opt.cpp:77:5: note: def_stmt: _88 = *_87;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _88
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _88
harris.opt.cpp:77:5: note: def_stmt: _88 = *_87;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _88
  def_stmt =  _88 = *_87;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.419_601 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };

harris.opt.cpp:77:5: note: add new stmt: vect__89.418_602 = vect__88.417_600 * vect_cst_.419_601;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _90 = _83 + _89;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _83
harris.opt.cpp:77:5: note: def_stmt: _83 = _80 + _82;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _89
harris.opt.cpp:77:5: note: def_stmt: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _83
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _83
harris.opt.cpp:77:5: note: def_stmt: _83 = _80 + _82;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _83
  def_stmt =  _83 = _80 + _82;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _89
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _89
harris.opt.cpp:77:5: note: def_stmt: _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _89
  def_stmt =  _89 = _88 * -1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: add new stmt: vect__90.420_603 = vect__83.414_594 + vect__89.418_602;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _91 = j_61 + pretmp_260;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _92 = (long unsigned int) _91;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _93 = _92 * 4;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _94 = pretmp_269 + _93;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _95 = *_94;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_260 * 4)
harris.opt.cpp:77:5: note: created vectp.422_604
harris.opt.cpp:77:5: note: add new stmt: vect__95.423_611 = MEM[(float *)vectp.421_609];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:77:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _95
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _95
harris.opt.cpp:77:5: note: def_stmt: _95 = *_94;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _95
  def_stmt =  _95 = *_94;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.425_612 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };

harris.opt.cpp:77:5: note: add new stmt: vect__96.424_613 = vect__95.423_611 * vect_cst_.425_612;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _97 = _90 + _96;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _90
harris.opt.cpp:77:5: note: def_stmt: _90 = _83 + _89;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _96
harris.opt.cpp:77:5: note: def_stmt: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _90
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _90
harris.opt.cpp:77:5: note: def_stmt: _90 = _83 + _89;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _90
  def_stmt =  _90 = _83 + _89;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _96
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _96
harris.opt.cpp:77:5: note: def_stmt: _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _96
  def_stmt =  _96 = _95 * 1.6666667163372039794921875e-1;

harris.opt.cpp:77:5: note: add new stmt: vect__97.426_614 = vect__90.420_603 + vect__96.424_613;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _98 = *_43;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
harris.opt.cpp:77:5: note: created vectp.428_615
harris.opt.cpp:77:5: note: add new stmt: vect__98.429_621 = MEM[(float *)vectp.427_619];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:77:5: note: def_stmt: _98 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _98
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _98
harris.opt.cpp:77:5: note: def_stmt: _98 = *_43;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _98
  def_stmt =  _98 = *_43;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.431_622 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__99.430_623 = vect__98.429_621 * vect_cst_.431_622;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _100 = _97 + _99;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _97
harris.opt.cpp:77:5: note: def_stmt: _97 = _90 + _96;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _99
harris.opt.cpp:77:5: note: def_stmt: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _97
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _97
harris.opt.cpp:77:5: note: def_stmt: _97 = _90 + _96;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _97
  def_stmt =  _97 = _90 + _96;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _99
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _99
harris.opt.cpp:77:5: note: def_stmt: _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _99
  def_stmt =  _99 = _98 * -8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__100.432_624 = vect__97.426_614 + vect__99.430_623;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _101 = *_72;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: transform load. ncopies = 1
harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_269 + (sizetype) ((long unsigned int) pretmp_272 * 4)
harris.opt.cpp:77:5: note: created vectp.434_625
harris.opt.cpp:77:5: note: add new stmt: vect__101.435_632 = MEM[(float *)vectp.433_630];

harris.opt.cpp:77:5: note: ------>vectorizing statement: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:77:5: note: def_stmt: _101 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _101
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _101
harris.opt.cpp:77:5: note: def_stmt: _101 = *_72;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _101
  def_stmt =  _101 = *_72;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.opt.cpp:77:5: note: Create vector_cst. nunits = 4
harris.opt.cpp:77:5: note: created new init_stmt: vect_cst_.437_633 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.opt.cpp:77:5: note: add new stmt: vect__102.436_634 = vect__101.435_632 * vect_cst_.437_633;

harris.opt.cpp:77:5: note: ------>vectorizing statement: _103 = _100 + _102;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _100
harris.opt.cpp:77:5: note: def_stmt: _100 = _97 + _99;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _102
harris.opt.cpp:77:5: note: def_stmt: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform binary/unary operation.
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _100
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _100
harris.opt.cpp:77:5: note: def_stmt: _100 = _97 + _99;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _100
  def_stmt =  _100 = _97 + _99;

harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _102
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _102
harris.opt.cpp:77:5: note: def_stmt: _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _102
  def_stmt =  _102 = _101 * 8.3333335816860198974609375e-2;

harris.opt.cpp:77:5: note: add new stmt: vect__103.438_635 = vect__100.432_624 + vect__102.436_634;

harris.opt.cpp:77:5: note: ------>vectorizing statement: *_78 = _103;

harris.opt.cpp:77:5: note: transform statement.
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _103
harris.opt.cpp:77:5: note: def_stmt: _103 = _100 + _102;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: transform store. ncopies = 1
harris.opt.cpp:77:5: note: vect_get_vec_def_for_operand: _103
harris.opt.cpp:77:5: note: vect_is_simple_use: operand _103
harris.opt.cpp:77:5: note: def_stmt: _103 = _100 + _102;

harris.opt.cpp:77:5: note: type of def: 3.
harris.opt.cpp:77:5: note: def =  _103
  def_stmt =  _103 = _100 + _102;

harris.opt.cpp:77:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_282 + (sizetype) ((long unsigned int) pretmp_260 * 4)
harris.opt.cpp:77:5: note: created vectp.440_636
harris.opt.cpp:77:5: note: add new stmt: MEM[(float *)vectp.439_641] = vect__103.438_635;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.367_511 = vectp.367_510 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.372_519 = vectp.372_518 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.378_530 = vectp.378_529 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.384_541 = vectp.384_540 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.390_552 = vectp.390_551 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.396_563 = vectp.396_562 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.402_574 = vectp.402_573 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.404_580 = vectp.404_579 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.409_590 = vectp.409_589 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.415_599 = vectp.415_598 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.421_610 = vectp.421_609 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.427_620 = vectp.427_619 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.433_631 = vectp.433_630 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: vectp.439_642 = vectp.439_641 + 16;

harris.opt.cpp:77:5: note: ------>vectorizing statement: if (j_61 <= pretmp_203)


loop at harris.opt.cpp:80: if (ivtmp_644 < bnd.364_415)

;; Scaling loop 2 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 2
harris.opt.cpp:77:5: note: LOOP VECTORIZED

harris.opt.cpp:74:11: note: vectorized 1 loops in function.
Merging blocks 9 and 18
Merging blocks 19 and 26
Merging blocks 22 and 34
Merging blocks 28 and 21
Merging blocks 36 and 29
Created preheader block for loop 4
<built-in> (struct .omp_data_s.0 * .omp_data_i)
{
  vector(4) float * vectp.440;
  vector(4) float * vectp.439;
  vector(4) float vect__103.438;
  vector(4) float vect_cst_.437;
  vector(4) float vect__102.436;
  vector(4) float vect__101.435;
  vector(4) float * vectp.434;
  vector(4) float * vectp.433;
  vector(4) float vect__100.432;
  vector(4) float vect_cst_.431;
  vector(4) float vect__99.430;
  vector(4) float vect__98.429;
  vector(4) float * vectp.428;
  vector(4) float * vectp.427;
  vector(4) float vect__97.426;
  vector(4) float vect_cst_.425;
  vector(4) float vect__96.424;
  vector(4) float vect__95.423;
  vector(4) float * vectp.422;
  vector(4) float * vectp.421;
  vector(4) float vect__90.420;
  vector(4) float vect_cst_.419;
  vector(4) float vect__89.418;
  vector(4) float vect__88.417;
  vector(4) float * vectp.416;
  vector(4) float * vectp.415;
  vector(4) float vect__83.414;
  vector(4) float vect_cst_.413;
  vector(4) float vect__82.412;
  vector(4) float vect__81.411;
  vector(4) float * vectp.410;
  vector(4) float * vectp.409;
  vector(4) float vect_cst_.408;
  vector(4) float vect__80.407;
  vector(4) float vect__79.406;
  vector(4) float * vectp.405;
  vector(4) float * vectp.404;
  vector(4) float * vectp.403;
  vector(4) float * vectp.402;
  vector(4) float vect__75.401;
  vector(4) float vect_cst_.400;
  vector(4) float vect__74.399;
  vector(4) float vect__73.398;
  vector(4) float * vectp.397;
  vector(4) float * vectp.396;
  vector(4) float vect__68.395;
  vector(4) float vect_cst_.394;
  vector(4) float vect__67.393;
  vector(4) float vect__66.392;
  vector(4) float * vectp.391;
  vector(4) float * vectp.390;
  vector(4) float vect__60.389;
  vector(4) float vect_cst_.388;
  vector(4) float vect__59.387;
  vector(4) float vect__58.386;
  vector(4) float * vectp.385;
  vector(4) float * vectp.384;
  vector(4) float vect__53.383;
  vector(4) float vect_cst_.382;
  vector(4) float vect__52.381;
  vector(4) float vect__51.380;
  vector(4) float * vectp.379;
  vector(4) float * vectp.378;
  vector(4) float vect__46.377;
  vector(4) float vect_cst_.376;
  vector(4) float vect__45.375;
  vector(4) float vect__44.374;
  vector(4) float * vectp.373;
  vector(4) float * vectp.372;
  vector(4) float vect_cst_.371;
  vector(4) float vect__37.370;
  vector(4) float vect__36.369;
  vector(4) float * vectp.368;
  vector(4) float * vectp.367;
  int tmp.366;
  unsigned int ratio_mult_vf.365;
  unsigned int bnd.364;
  unsigned int niters.363;
  sizetype prolog_loop_adjusted_niters.362;
  unsigned int prolog_loop_niters.361;
  vector(4) float * vectp.360;
  unsigned int niters.359;
  int j;
  int i;
  int q.14_1;
  int tt.15_2;
  long unsigned int _4;
  long unsigned int _6;
  bool _7;
  int _10;
  int _11;
  int _12;
  int q.14_13;
  int tt.15_14;
  int q.14_15;
  int _16;
  int _17;
  int _18;
  long unsigned int _20;
  unsigned int _22;
  int _23;
  long unsigned int _24;
  long unsigned int _25;
  bool _26;
  float * _27;
  sizetype _28;
  sizetype _29;
  int _30;
  int _31;
  long unsigned int _32;
  long unsigned int _33;
  sizetype _34;
  float * _35;
  float _36;
  float _37;
  float * _38;
  float * _39;
  int _40;
  long unsigned int _41;
  long unsigned int _42;
  float * _43;
  float _44;
  float _45;
  float _46;
  int _47;
  long unsigned int _48;
  long unsigned int _49;
  float * _50;
  float _51;
  float _52;
  float _53;
  int _54;
  long unsigned int _55;
  long unsigned int _56;
  float * _57;
  float _58;
  float _59;
  float _60;
  int _62;
  long unsigned int _63;
  long unsigned int _64;
  float * _65;
  float _66;
  float _67;
  float _68;
  int _69;
  long unsigned int _70;
  long unsigned int _71;
  float * _72;
  float _73;
  float _74;
  float _75;
  long unsigned int _77;
  float * _78;
  float _79;
  float _80;
  float _81;
  float _82;
  float _83;
  int _84;
  long unsigned int _85;
  long unsigned int _86;
  float * _87;
  float _88;
  float _89;
  float _90;
  int _91;
  long unsigned int _92;
  long unsigned int _93;
  float * _94;
  float _95;
  float _96;
  float _97;
  float _98;
  float _99;
  float _100;
  float _101;
  float _102;
  float _103;
  unsigned int ivtmp_104;
  int pretmp_105;
  int _106;
  float _107;
  float _108;
  float _109;
  float * _110;
  long unsigned int _111;
  long unsigned int _112;
  int _113;
  float _114;
  float _120;
  float _121;
  float _122;
  float * _123;
  long unsigned int _124;
  long unsigned int _125;
  int _126;
  float _127;
  float _128;
  float _129;
  float * _130;
  long unsigned int _131;
  long unsigned int _132;
  int _133;
  float _134;
  float _135;
  float _136;
  float * _137;
  long unsigned int _138;
  long unsigned int _139;
  int _140;
  float _141;
  float _142;
  float * _143;
  long unsigned int _144;
  long unsigned int _145;
  int _146;
  int _147;
  float * _148;
  long unsigned int _149;
  long unsigned int _150;
  int _151;
  bool _154;
  bool _155;
  bool _156;
  float * _157;
  sizetype _158;
  sizetype _159;
  sizetype _160;
  float * _161;
  sizetype _162;
  sizetype _163;
  sizetype _164;
  bool _165;
  float * _166;
  float * _167;
  sizetype _168;
  sizetype _169;
  sizetype _170;
  bool _171;
  bool _172;
  bool _173;
  float * _174;
  sizetype _175;
  sizetype _176;
  sizetype _177;
  float * _178;
  sizetype _179;
  sizetype _180;
  sizetype _181;
  bool _182;
  float * _183;
  float * _184;
  sizetype _185;
  sizetype _186;
  sizetype _187;
  bool _188;
  bool _189;
  bool _190;
  float * _191;
  float * _192;
  sizetype _193;
  sizetype _194;
  sizetype _195;
  bool _196;
  float * _197;
  sizetype _198;
  sizetype _199;
  sizetype _200;
  float * _201;
  sizetype _202;
  int pretmp_203;
  float _204;
  sizetype _205;
  sizetype _206;
  bool _207;
  bool _208;
  bool _209;
  float * _210;
  sizetype _211;
  sizetype _212;
  sizetype _213;
  float * _214;
  sizetype _215;
  sizetype _216;
  sizetype _217;
  bool _218;
  float * _219;
  long unsigned int _220;
  long unsigned int _221;
  float * _222;
  sizetype _223;
  sizetype _224;
  sizetype _225;
  bool _226;
  bool _227;
  bool _228;
  float * _229;
  sizetype _230;
  sizetype _231;
  sizetype _232;
  float * _233;
  sizetype _234;
  sizetype _235;
  sizetype _236;
  bool _237;
  float * _238;
  long unsigned int _239;
  long unsigned int _240;
  float * _241;
  sizetype _242;
  sizetype _243;
  sizetype _244;
  bool _245;
  bool _246;
  bool _247;
  float * _248;
  sizetype _249;
  sizetype _250;
  sizetype _251;
  float * _252;
  sizetype _253;
  sizetype _254;
  sizetype _255;
  bool _256;
  float * _257;
  sizetype _258;
  int pretmp_259;
  int pretmp_260;
  long unsigned int _261;
  int _262;
  float _263;
  float * pretmp_264;
  float _265;
  int pretmp_266;
  int pretmp_267;
  float _268;
  float * pretmp_269;
  float * _270;
  int pretmp_271;
  int pretmp_272;
  float _273;
  float _274;
  float _275;
  float * _276;
  float _278;
  float _279;
  float _280;
  float * _281;
  float * pretmp_282;
  long unsigned int _283;
  sizetype _284;
  sizetype _285;
  float * _286;
  sizetype _287;
  sizetype _288;
  sizetype _289;
  bool _290;
  bool _291;
  bool _292;
  float * _293;
  sizetype _294;
  sizetype _295;
  sizetype _296;
  float * _297;
  sizetype _298;
  sizetype _299;
  sizetype _300;
  int pretmp_302;
  int prephitmp_303;
  int _304;
  long unsigned int _305;
  long unsigned int _306;
  float * _307;
  float _308;
  float _309;
  float _310;
  float _311;
  float _312;
  float _313;
  float _314;
  float _315;
  float _316;
  unsigned long _322;
  unsigned long _323;
  unsigned long _324;
  unsigned long _325;
  unsigned int _326;
  unsigned int _327;
  int _330;
  long unsigned int _331;
  long unsigned int _332;
  float * _333;
  int _334;
  int _335;
  long unsigned int _336;
  long unsigned int _337;
  float * _338;
  float _339;
  float _340;
  int _341;
  long unsigned int _342;
  long unsigned int _343;
  float * _344;
  float _345;
  float _346;
  float _347;
  int _348;
  long unsigned int _349;
  long unsigned int _350;
  float * _351;
  float _352;
  float _353;
  float _354;
  int _355;
  long unsigned int _356;
  long unsigned int _357;
  float * _358;
  float _359;
  float _360;
  float _361;
  int _363;
  long unsigned int _364;
  long unsigned int _365;
  float * _366;
  float _367;
  float _368;
  float _369;
  int _370;
  long unsigned int _371;
  long unsigned int _372;
  float * _373;
  float _374;
  float _375;
  float _376;
  float * _378;
  float _379;
  float _380;
  float _381;
  float _382;
  float _383;
  int _384;
  long unsigned int _385;
  long unsigned int _386;
  float * _387;
  float _388;
  float _389;
  float _390;
  int _391;
  long unsigned int _392;
  long unsigned int _393;
  float * _394;
  float _395;
  float _396;
  float _397;
  float _398;
  float _399;
  float _400;
  float _401;
  float _402;
  float _403;
  unsigned int ivtmp_411;
  unsigned int ivtmp_412;
  unsigned int _416;
  unsigned int _417;
  int _421;
  long unsigned int _422;
  long unsigned int _423;
  float * _424;
  int _425;
  int _426;
  long unsigned int _427;
  long unsigned int _428;
  float * _429;
  float _430;
  float _431;
  int _432;
  long unsigned int _433;
  long unsigned int _434;
  float * _435;
  float _436;
  float _437;
  float _438;
  int _439;
  long unsigned int _440;
  long unsigned int _441;
  float * _442;
  float _443;
  float _444;
  float _445;
  int _446;
  long unsigned int _447;
  long unsigned int _448;
  float * _449;
  float _450;
  float _451;
  float _452;
  int _454;
  long unsigned int _455;
  long unsigned int _456;
  float * _457;
  float _458;
  float _459;
  float _460;
  int _461;
  long unsigned int _462;
  long unsigned int _463;
  float * _464;
  float _465;
  float _466;
  float _467;
  float * _469;
  float _470;
  float _471;
  float _472;
  float _473;
  float _474;
  int _475;
  long unsigned int _476;
  long unsigned int _477;
  float * _478;
  float _479;
  float _480;
  float _481;
  int _482;
  long unsigned int _483;
  long unsigned int _484;
  float * _485;
  float _486;
  float _487;
  float _488;
  float _489;
  float _490;
  float _491;
  float _492;
  float _493;
  float _494;
  unsigned int _496;
  unsigned int _497;
  unsigned int _498;
  int _506;
  sizetype _508;
  sizetype _509;
  sizetype _516;
  sizetype _517;
  sizetype _525;
  sizetype _526;
  sizetype _527;
  sizetype _528;
  sizetype _536;
  sizetype _537;
  sizetype _538;
  sizetype _539;
  sizetype _547;
  sizetype _548;
  sizetype _549;
  sizetype _550;
  sizetype _558;
  sizetype _559;
  sizetype _560;
  sizetype _561;
  sizetype _569;
  sizetype _570;
  sizetype _571;
  sizetype _572;
  sizetype _576;
  sizetype _577;
  sizetype _578;
  sizetype _585;
  sizetype _586;
  sizetype _587;
  sizetype _588;
  sizetype _596;
  sizetype _597;
  sizetype _605;
  sizetype _606;
  sizetype _607;
  sizetype _608;
  sizetype _616;
  sizetype _617;
  sizetype _618;
  sizetype _626;
  sizetype _627;
  sizetype _628;
  sizetype _629;
  sizetype _637;
  sizetype _638;
  sizetype _639;
  sizetype _640;
  unsigned int ivtmp_644;
  unsigned int ivtmp_645;

  <bb 2>:
  _10 = .omp_data_i_9(D)->R;
  _11 = __builtin_omp_get_num_threads ();
  _12 = __builtin_omp_get_thread_num ();
  q.14_13 = _10 / _11;
  tt.15_14 = _10 % _11;
  if (_12 < tt.15_14)
    goto <bb 31>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.14_1 = PHI <q.14_15(31), q.14_13(2)>
  # tt.15_2 = PHI <0(31), tt.15_14(2)>
  _16 = q.14_1 * _12;
  _17 = _16 + tt.15_2;
  _18 = _17 + q.14_1;
  if (_17 >= _18)
    goto <bb 30>;
  else
    goto <bb 4>;

  <bb 4>:
  i_19 = _17 + 1;
  pretmp_203 = .omp_data_i_9(D)->C;

  <bb 5>:
  # i_3 = PHI <i_19(4), prephitmp_303(8)>
  if (pretmp_203 > 0)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 6>:
  pretmp_302 = i_3 + 1;

  <bb 7>:
  # prephitmp_303 = PHI <pretmp_271(24), pretmp_302(6)>
  if (_18 >= prephitmp_303)
    goto <bb 8>;
  else
    goto <bb 29>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:
  pretmp_259 = pretmp_203 + 2;
  pretmp_260 = i_3 * pretmp_259;
  pretmp_264 = .omp_data_i_9(D)->Ix;
  pretmp_266 = i_3 + -1;
  pretmp_267 = pretmp_259 * pretmp_266;
  pretmp_269 = .omp_data_i_9(D)->img;
  pretmp_271 = i_3 + 1;
  pretmp_272 = pretmp_259 * pretmp_271;
  pretmp_282 = .omp_data_i_9(D)->Iy;
  _22 = (unsigned int) pretmp_203;
  _26 = _22 > 5;
  _28 = (sizetype) pretmp_260;
  _29 = _28 + 5;
  _34 = _29 * 4;
  _39 = pretmp_264 + _34;
  _77 = (long unsigned int) pretmp_260;
  _20 = _77 * 4;
  _38 = pretmp_269 + _20;
  _7 = _38 >= _39;
  _300 = (sizetype) pretmp_260;
  _299 = _300 + 6;
  _298 = _299 * 4;
  _297 = pretmp_269 + _298;
  _296 = (sizetype) pretmp_260;
  _295 = _296 + 1;
  _294 = _295 * 4;
  _293 = pretmp_264 + _294;
  _292 = _293 >= _297;
  _291 = _7 | _292;
  _290 = _26 & _291;
  _289 = (sizetype) pretmp_260;
  _288 = _289 + 5;
  _287 = _288 * 4;
  _286 = pretmp_264 + _287;
  _285 = (sizetype) pretmp_260;
  _284 = _285 + 1;
  _258 = _284 * 4;
  _257 = pretmp_282 + _258;
  _256 = _257 >= _286;
  _255 = (sizetype) pretmp_260;
  _254 = _255 + 5;
  _253 = _254 * 4;
  _252 = pretmp_282 + _253;
  _251 = (sizetype) pretmp_260;
  _250 = _251 + 1;
  _249 = _250 * 4;
  _248 = pretmp_264 + _249;
  _247 = _248 >= _252;
  _246 = _247 | _256;
  _245 = _246 & _290;
  _244 = (sizetype) pretmp_260;
  _243 = _244 + 5;
  _242 = _243 * 4;
  _241 = pretmp_264 + _242;
  _240 = (long unsigned int) pretmp_267;
  _239 = _240 * 4;
  _238 = pretmp_269 + _239;
  _237 = _238 >= _241;
  _236 = (sizetype) pretmp_267;
  _235 = _236 + 6;
  _234 = _235 * 4;
  _233 = pretmp_269 + _234;
  _232 = (sizetype) pretmp_260;
  _231 = _232 + 1;
  _230 = _231 * 4;
  _229 = pretmp_264 + _230;
  _228 = _229 >= _233;
  _227 = _228 | _237;
  _226 = _227 & _245;
  _225 = (sizetype) pretmp_260;
  _224 = _225 + 5;
  _223 = _224 * 4;
  _222 = pretmp_264 + _223;
  _221 = (long unsigned int) pretmp_272;
  _220 = _221 * 4;
  _219 = pretmp_269 + _220;
  _218 = _219 >= _222;
  _217 = (sizetype) pretmp_272;
  _216 = _217 + 6;
  _215 = _216 * 4;
  _214 = pretmp_269 + _215;
  _213 = (sizetype) pretmp_260;
  _212 = _213 + 1;
  _211 = _212 * 4;
  _210 = pretmp_264 + _211;
  _209 = _210 >= _214;
  _208 = _209 | _218;
  _207 = _208 & _226;
  _206 = (sizetype) pretmp_260;
  _205 = _206 + 6;
  _202 = _205 * 4;
  _201 = pretmp_269 + _202;
  _200 = (sizetype) pretmp_260;
  _199 = _200 + 1;
  _198 = _199 * 4;
  _197 = pretmp_282 + _198;
  _196 = _197 >= _201;
  _195 = (sizetype) pretmp_260;
  _194 = _195 + 5;
  _193 = _194 * 4;
  _192 = pretmp_282 + _193;
  _191 = pretmp_269 + _20;
  _190 = _191 >= _192;
  _189 = _190 | _196;
  _188 = _189 & _207;
  _187 = (sizetype) pretmp_260;
  _186 = _187 + 5;
  _185 = _186 * 4;
  _184 = pretmp_282 + _185;
  _183 = pretmp_269 + _239;
  _182 = _183 >= _184;
  _181 = (sizetype) pretmp_267;
  _180 = _181 + 6;
  _179 = _180 * 4;
  _178 = pretmp_269 + _179;
  _177 = (sizetype) pretmp_260;
  _176 = _177 + 1;
  _175 = _176 * 4;
  _174 = pretmp_282 + _175;
  _173 = _174 >= _178;
  _172 = _173 | _182;
  _171 = _172 & _188;
  _170 = (sizetype) pretmp_260;
  _169 = _170 + 5;
  _168 = _169 * 4;
  _167 = pretmp_282 + _168;
  _166 = pretmp_269 + _220;
  _165 = _166 >= _167;
  _164 = (sizetype) pretmp_272;
  _163 = _164 + 6;
  _162 = _163 * 4;
  _161 = pretmp_269 + _162;
  _160 = (sizetype) pretmp_260;
  _159 = _160 + 1;
  _158 = _159 * 4;
  _157 = pretmp_282 + _158;
  _156 = _157 >= _161;
  _155 = _156 | _165;
  _154 = _155 & _171;
  if (_154 != 0)
    goto <bb 10>;
  else
    goto <bb 26>;

  <bb 10>:
  niters.359_319 = (unsigned int) pretmp_203;
  vectp.360_320 = pretmp_269 + _239;
  _322 = (unsigned long) vectp.360_320;
  _323 = _322 & 15;
  _324 = _323 >> 2;
  _325 = -_324;
  _326 = (unsigned int) _325;
  _327 = _326 & 3;
  prolog_loop_niters.361_321 = MIN_EXPR <niters.359_319, _327>;
  if (prolog_loop_niters.361_321 == 0)
    goto <bb 14>;
  else
    goto <bb 11>;

  <bb 11>:
  # j_409 = PHI <1(10)>
  # ivtmp_645 = PHI <0(10)>

  <bb 32>:
  # j_328 = PHI <j_409(11), j_362(12)>
  # ivtmp_411 = PHI <ivtmp_645(11), ivtmp_412(12)>
  _330 = j_328 + pretmp_260;
  _331 = (long unsigned int) _330;
  _332 = _331 * 4;
  _333 = pretmp_264 + _332;
  _334 = j_328 + -1;
  _335 = _334 + pretmp_267;
  _336 = (long unsigned int) _335;
  _337 = _336 * 4;
  _338 = pretmp_269 + _337;
  _339 = *_338;
  _340 = _339 * -8.3333335816860198974609375e-2;
  _341 = _334 + pretmp_272;
  _342 = (long unsigned int) _341;
  _343 = _342 * 4;
  _344 = pretmp_269 + _343;
  _345 = *_344;
  _346 = _345 * 8.3333335816860198974609375e-2;
  _347 = _340 + _346;
  _348 = j_328 + pretmp_267;
  _349 = (long unsigned int) _348;
  _350 = _349 * 4;
  _351 = pretmp_269 + _350;
  _352 = *_351;
  _353 = _352 * -1.6666667163372039794921875e-1;
  _354 = _347 + _353;
  _355 = j_328 + pretmp_272;
  _356 = (long unsigned int) _355;
  _357 = _356 * 4;
  _358 = pretmp_269 + _357;
  _359 = *_358;
  _360 = _359 * 1.6666667163372039794921875e-1;
  _361 = _354 + _360;
  j_362 = j_328 + 1;
  _363 = j_362 + pretmp_267;
  _364 = (long unsigned int) _363;
  _365 = _364 * 4;
  _366 = pretmp_269 + _365;
  _367 = *_366;
  _368 = _367 * -8.3333335816860198974609375e-2;
  _369 = _361 + _368;
  _370 = j_362 + pretmp_272;
  _371 = (long unsigned int) _370;
  _372 = _371 * 4;
  _373 = pretmp_269 + _372;
  _374 = *_373;
  _375 = _374 * 8.3333335816860198974609375e-2;
  _376 = _369 + _375;
  *_333 = _376;
  _378 = pretmp_282 + _332;
  _379 = *_338;
  _380 = _379 * -8.3333335816860198974609375e-2;
  _381 = *_366;
  _382 = _381 * 8.3333335816860198974609375e-2;
  _383 = _380 + _382;
  _384 = _334 + pretmp_260;
  _385 = (long unsigned int) _384;
  _386 = _385 * 4;
  _387 = pretmp_269 + _386;
  _388 = *_387;
  _389 = _388 * -1.6666667163372039794921875e-1;
  _390 = _383 + _389;
  _391 = j_362 + pretmp_260;
  _392 = (long unsigned int) _391;
  _393 = _392 * 4;
  _394 = pretmp_269 + _393;
  _395 = *_394;
  _396 = _395 * 1.6666667163372039794921875e-1;
  _397 = _390 + _396;
  _398 = *_344;
  _399 = _398 * -8.3333335816860198974609375e-2;
  _400 = _397 + _399;
  _401 = *_373;
  _402 = _401 * 8.3333335816860198974609375e-2;
  _403 = _400 + _402;
  *_378 = _403;
  ivtmp_412 = ivtmp_411 + 1;
  if (ivtmp_412 < prolog_loop_niters.361_321)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  goto <bb 32>;

  <bb 13>:
  # j_406 = PHI <j_362(32)>
  if (niters.359_319 == prolog_loop_niters.361_321)
    goto <bb 23>;
  else
    goto <bb 14>;

  <bb 14>:
  # j_405 = PHI <j_406(13), 1(10)>
  prolog_loop_adjusted_niters.362_413 = (sizetype) prolog_loop_niters.361_321;
  niters.363_414 = niters.359_319 - prolog_loop_niters.361_321;
  _416 = niters.363_414 + 4294967292;
  _417 = _416 >> 2;
  bnd.364_415 = _417 + 1;
  ratio_mult_vf.365_418 = bnd.364_415 << 2;
  _496 = (unsigned int) pretmp_203;
  _497 = _496 - prolog_loop_niters.361_321;
  _498 = _497 + 4294967295;
  if (_498 <= 2)
    goto <bb 20>;
  else
    goto <bb 15>;

  <bb 15>:
  _508 = prolog_loop_adjusted_niters.362_413 * 4;
  _509 = _239 + _508;
  vectp.368_507 = pretmp_269 + _509;
  vect_cst_.371_513 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _516 = prolog_loop_adjusted_niters.362_413 * 4;
  _517 = _220 + _516;
  vectp.373_515 = pretmp_269 + _517;
  vect_cst_.376_521 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _525 = (sizetype) pretmp_267;
  _526 = prolog_loop_adjusted_niters.362_413 + _525;
  _527 = _526 + 1;
  _528 = _527 * 4;
  vectp.379_524 = pretmp_269 + _528;
  vect_cst_.382_532 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };
  _536 = (sizetype) pretmp_272;
  _537 = prolog_loop_adjusted_niters.362_413 + _536;
  _538 = _537 + 1;
  _539 = _538 * 4;
  vectp.385_535 = pretmp_269 + _539;
  vect_cst_.388_543 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };
  _547 = (sizetype) pretmp_267;
  _548 = prolog_loop_adjusted_niters.362_413 + _547;
  _549 = _548 + 2;
  _550 = _549 * 4;
  vectp.391_546 = pretmp_269 + _550;
  vect_cst_.394_554 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _558 = (sizetype) pretmp_272;
  _559 = prolog_loop_adjusted_niters.362_413 + _558;
  _560 = _559 + 2;
  _561 = _560 * 4;
  vectp.397_557 = pretmp_269 + _561;
  vect_cst_.400_565 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _569 = (sizetype) pretmp_260;
  _570 = prolog_loop_adjusted_niters.362_413 + _569;
  _571 = _570 + 1;
  _572 = _571 * 4;
  vectp.403_568 = pretmp_264 + _572;
  _576 = (sizetype) pretmp_267;
  _577 = prolog_loop_adjusted_niters.362_413 + _576;
  _578 = _577 * 4;
  vectp.405_76 = pretmp_269 + _578;
  vect_cst_.408_582 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _585 = (sizetype) pretmp_267;
  _586 = prolog_loop_adjusted_niters.362_413 + _585;
  _587 = _586 + 2;
  _588 = _587 * 4;
  vectp.410_584 = pretmp_269 + _588;
  vect_cst_.413_592 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _596 = prolog_loop_adjusted_niters.362_413 * 4;
  _597 = _20 + _596;
  vectp.416_595 = pretmp_269 + _597;
  vect_cst_.419_601 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };
  _605 = (sizetype) pretmp_260;
  _606 = prolog_loop_adjusted_niters.362_413 + _605;
  _607 = _606 + 2;
  _608 = _607 * 4;
  vectp.422_604 = pretmp_269 + _608;
  vect_cst_.425_612 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };
  _616 = (sizetype) pretmp_272;
  _617 = prolog_loop_adjusted_niters.362_413 + _616;
  _618 = _617 * 4;
  vectp.428_615 = pretmp_269 + _618;
  vect_cst_.431_622 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _626 = (sizetype) pretmp_272;
  _627 = prolog_loop_adjusted_niters.362_413 + _626;
  _628 = _627 + 2;
  _629 = _628 * 4;
  vectp.434_625 = pretmp_269 + _629;
  vect_cst_.437_633 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _637 = (sizetype) pretmp_260;
  _638 = prolog_loop_adjusted_niters.362_413 + _637;
  _639 = _638 + 1;
  _640 = _639 * 4;
  vectp.440_636 = pretmp_282 + _640;

  <bb 16>:
  # j_117 = PHI <j_405(15), j_61(25)>
  # vectp.367_510 = PHI <vectp.368_507(15), vectp.367_511(25)>
  # vectp.372_518 = PHI <vectp.373_515(15), vectp.372_519(25)>
  # vectp.378_529 = PHI <vectp.379_524(15), vectp.378_530(25)>
  # vectp.384_540 = PHI <vectp.385_535(15), vectp.384_541(25)>
  # vectp.390_551 = PHI <vectp.391_546(15), vectp.390_552(25)>
  # vectp.396_562 = PHI <vectp.397_557(15), vectp.396_563(25)>
  # vectp.402_573 = PHI <vectp.403_568(15), vectp.402_574(25)>
  # vectp.404_579 = PHI <vectp.405_76(15), vectp.404_580(25)>
  # vectp.409_589 = PHI <vectp.410_584(15), vectp.409_590(25)>
  # vectp.415_598 = PHI <vectp.416_595(15), vectp.415_599(25)>
  # vectp.421_609 = PHI <vectp.422_604(15), vectp.421_610(25)>
  # vectp.427_619 = PHI <vectp.428_615(15), vectp.427_620(25)>
  # vectp.433_630 = PHI <vectp.434_625(15), vectp.433_631(25)>
  # vectp.439_641 = PHI <vectp.440_636(15), vectp.439_642(25)>
  # ivtmp_104 = PHI <0(15), ivtmp_644(25)>
  _23 = j_117 + pretmp_260;
  _24 = (long unsigned int) _23;
  _25 = _24 * 4;
  _27 = pretmp_264 + _25;
  _30 = j_117 + -1;
  _31 = _30 + pretmp_267;
  _32 = (long unsigned int) _31;
  _33 = _32 * 4;
  _35 = pretmp_269 + _33;
  vect__36.369_512 = MEM[(float *)vectp.367_510];
  _36 = *_35;
  vect__37.370_514 = vect__36.369_512 * vect_cst_.371_513;
  _37 = _36 * -8.3333335816860198974609375e-2;
  _40 = _30 + pretmp_272;
  _41 = (long unsigned int) _40;
  _42 = _41 * 4;
  _43 = pretmp_269 + _42;
  vect__44.374_520 = MEM[(float *)vectp.372_518];
  _44 = *_43;
  vect__45.375_522 = vect__44.374_520 * vect_cst_.376_521;
  _45 = _44 * 8.3333335816860198974609375e-2;
  vect__46.377_523 = vect__37.370_514 + vect__45.375_522;
  _46 = _37 + _45;
  _47 = j_117 + pretmp_267;
  _48 = (long unsigned int) _47;
  _49 = _48 * 4;
  _50 = pretmp_269 + _49;
  vect__51.380_531 = MEM[(float *)vectp.378_529];
  _51 = *_50;
  vect__52.381_533 = vect__51.380_531 * vect_cst_.382_532;
  _52 = _51 * -1.6666667163372039794921875e-1;
  vect__53.383_534 = vect__46.377_523 + vect__52.381_533;
  _53 = _46 + _52;
  _54 = j_117 + pretmp_272;
  _55 = (long unsigned int) _54;
  _56 = _55 * 4;
  _57 = pretmp_269 + _56;
  vect__58.386_542 = MEM[(float *)vectp.384_540];
  _58 = *_57;
  vect__59.387_544 = vect__58.386_542 * vect_cst_.388_543;
  _59 = _58 * 1.6666667163372039794921875e-1;
  vect__60.389_545 = vect__53.383_534 + vect__59.387_544;
  _60 = _53 + _59;
  j_61 = j_117 + 1;
  _62 = j_61 + pretmp_267;
  _63 = (long unsigned int) _62;
  _64 = _63 * 4;
  _65 = pretmp_269 + _64;
  vect__66.392_553 = MEM[(float *)vectp.390_551];
  _66 = *_65;
  vect__67.393_555 = vect__66.392_553 * vect_cst_.394_554;
  _67 = _66 * -8.3333335816860198974609375e-2;
  vect__68.395_556 = vect__60.389_545 + vect__67.393_555;
  _68 = _60 + _67;
  _69 = j_61 + pretmp_272;
  _70 = (long unsigned int) _69;
  _71 = _70 * 4;
  _72 = pretmp_269 + _71;
  vect__73.398_564 = MEM[(float *)vectp.396_562];
  _73 = *_72;
  vect__74.399_566 = vect__73.398_564 * vect_cst_.400_565;
  _74 = _73 * 8.3333335816860198974609375e-2;
  vect__75.401_567 = vect__68.395_556 + vect__74.399_566;
  _75 = _68 + _74;
  MEM[(float *)vectp.402_573] = vect__75.401_567;
  _78 = pretmp_282 + _25;
  vect__79.406_581 = MEM[(float *)vectp.404_579];
  _79 = *_35;
  vect__80.407_583 = vect__79.406_581 * vect_cst_.408_582;
  _80 = _79 * -8.3333335816860198974609375e-2;
  vect__81.411_591 = MEM[(float *)vectp.409_589];
  _81 = *_65;
  vect__82.412_593 = vect__81.411_591 * vect_cst_.413_592;
  _82 = _81 * 8.3333335816860198974609375e-2;
  vect__83.414_594 = vect__80.407_583 + vect__82.412_593;
  _83 = _80 + _82;
  _84 = _30 + pretmp_260;
  _85 = (long unsigned int) _84;
  _86 = _85 * 4;
  _87 = pretmp_269 + _86;
  vect__88.417_600 = MEM[(float *)vectp.415_598];
  _88 = *_87;
  vect__89.418_602 = vect__88.417_600 * vect_cst_.419_601;
  _89 = _88 * -1.6666667163372039794921875e-1;
  vect__90.420_603 = vect__83.414_594 + vect__89.418_602;
  _90 = _83 + _89;
  _91 = j_61 + pretmp_260;
  _92 = (long unsigned int) _91;
  _93 = _92 * 4;
  _94 = pretmp_269 + _93;
  vect__95.423_611 = MEM[(float *)vectp.421_609];
  _95 = *_94;
  vect__96.424_613 = vect__95.423_611 * vect_cst_.425_612;
  _96 = _95 * 1.6666667163372039794921875e-1;
  vect__97.426_614 = vect__90.420_603 + vect__96.424_613;
  _97 = _90 + _96;
  vect__98.429_621 = MEM[(float *)vectp.427_619];
  _98 = *_43;
  vect__99.430_623 = vect__98.429_621 * vect_cst_.431_622;
  _99 = _98 * -8.3333335816860198974609375e-2;
  vect__100.432_624 = vect__97.426_614 + vect__99.430_623;
  _100 = _97 + _99;
  vect__101.435_632 = MEM[(float *)vectp.433_630];
  _101 = *_72;
  vect__102.436_634 = vect__101.435_632 * vect_cst_.437_633;
  _102 = _101 * 8.3333335816860198974609375e-2;
  vect__103.438_635 = vect__100.432_624 + vect__102.436_634;
  _103 = _100 + _102;
  MEM[(float *)vectp.439_641] = vect__103.438_635;
  vectp.367_511 = vectp.367_510 + 16;
  vectp.372_519 = vectp.372_518 + 16;
  vectp.378_530 = vectp.378_529 + 16;
  vectp.384_541 = vectp.384_540 + 16;
  vectp.390_552 = vectp.390_551 + 16;
  vectp.396_563 = vectp.396_562 + 16;
  vectp.402_574 = vectp.402_573 + 16;
  vectp.404_580 = vectp.404_579 + 16;
  vectp.409_590 = vectp.409_589 + 16;
  vectp.415_599 = vectp.415_598 + 16;
  vectp.421_610 = vectp.421_609 + 16;
  vectp.427_620 = vectp.427_619 + 16;
  vectp.433_631 = vectp.433_630 + 16;
  vectp.439_642 = vectp.439_641 + 16;
  ivtmp_644 = ivtmp_104 + 1;
  if (ivtmp_644 < bnd.364_415)
    goto <bb 25>;
  else
    goto <bb 19>;

  <bb 17>:
  # j_419 = PHI <j_453(18), j_499(20)>
  _421 = j_419 + pretmp_260;
  _422 = (long unsigned int) _421;
  _423 = _422 * 4;
  _424 = pretmp_264 + _423;
  _425 = j_419 + -1;
  _426 = _425 + pretmp_267;
  _427 = (long unsigned int) _426;
  _428 = _427 * 4;
  _429 = pretmp_269 + _428;
  _430 = *_429;
  _431 = _430 * -8.3333335816860198974609375e-2;
  _432 = _425 + pretmp_272;
  _433 = (long unsigned int) _432;
  _434 = _433 * 4;
  _435 = pretmp_269 + _434;
  _436 = *_435;
  _437 = _436 * 8.3333335816860198974609375e-2;
  _438 = _431 + _437;
  _439 = j_419 + pretmp_267;
  _440 = (long unsigned int) _439;
  _441 = _440 * 4;
  _442 = pretmp_269 + _441;
  _443 = *_442;
  _444 = _443 * -1.6666667163372039794921875e-1;
  _445 = _438 + _444;
  _446 = j_419 + pretmp_272;
  _447 = (long unsigned int) _446;
  _448 = _447 * 4;
  _449 = pretmp_269 + _448;
  _450 = *_449;
  _451 = _450 * 1.6666667163372039794921875e-1;
  _452 = _445 + _451;
  j_453 = j_419 + 1;
  _454 = j_453 + pretmp_267;
  _455 = (long unsigned int) _454;
  _456 = _455 * 4;
  _457 = pretmp_269 + _456;
  _458 = *_457;
  _459 = _458 * -8.3333335816860198974609375e-2;
  _460 = _452 + _459;
  _461 = j_453 + pretmp_272;
  _462 = (long unsigned int) _461;
  _463 = _462 * 4;
  _464 = pretmp_269 + _463;
  _465 = *_464;
  _466 = _465 * 8.3333335816860198974609375e-2;
  _467 = _460 + _466;
  *_424 = _467;
  _469 = pretmp_282 + _423;
  _470 = *_429;
  _471 = _470 * -8.3333335816860198974609375e-2;
  _472 = *_457;
  _473 = _472 * 8.3333335816860198974609375e-2;
  _474 = _471 + _473;
  _475 = _425 + pretmp_260;
  _476 = (long unsigned int) _475;
  _477 = _476 * 4;
  _478 = pretmp_269 + _477;
  _479 = *_478;
  _480 = _479 * -1.6666667163372039794921875e-1;
  _481 = _474 + _480;
  _482 = j_453 + pretmp_260;
  _483 = (long unsigned int) _482;
  _484 = _483 * 4;
  _485 = pretmp_269 + _484;
  _486 = *_485;
  _487 = _486 * 1.6666667163372039794921875e-1;
  _488 = _481 + _487;
  _489 = *_435;
  _490 = _489 * -8.3333335816860198974609375e-2;
  _491 = _488 + _490;
  _492 = *_464;
  _493 = _492 * 8.3333335816860198974609375e-2;
  _494 = _491 + _493;
  *_469 = _494;
  if (j_453 <= pretmp_203)
    goto <bb 18>;
  else
    goto <bb 21>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  # j_500 = PHI <j_61(16)>
  _506 = (int) ratio_mult_vf.365_418;
  tmp.366_505 = j_405 + _506;
  if (niters.363_414 == ratio_mult_vf.365_418)
    goto <bb 22>;
  else
    goto <bb 20>;

  <bb 20>:
  # j_499 = PHI <tmp.366_505(19), j_405(14)>
  goto <bb 17>;

  <bb 21>:

  <bb 22>:

  <bb 23>:

  <bb 24>:
  pretmp_105 = pretmp_271;
  goto <bb 7>;

  <bb 25>:
  goto <bb 16>;

  <bb 26>:

  <bb 27>:
  # j_153 = PHI <1(26), j_119(28)>
  _151 = j_153 + pretmp_260;
  _150 = (long unsigned int) _151;
  _149 = _150 * 4;
  _148 = pretmp_264 + _149;
  _147 = j_153 + -1;
  _146 = _147 + pretmp_267;
  _145 = (long unsigned int) _146;
  _144 = _145 * 4;
  _143 = pretmp_269 + _144;
  _142 = *_143;
  _141 = _142 * -8.3333335816860198974609375e-2;
  _140 = _147 + pretmp_272;
  _139 = (long unsigned int) _140;
  _138 = _139 * 4;
  _137 = pretmp_269 + _138;
  _136 = *_137;
  _135 = _136 * 8.3333335816860198974609375e-2;
  _134 = _141 + _135;
  _133 = j_153 + pretmp_267;
  _132 = (long unsigned int) _133;
  _131 = _132 * 4;
  _130 = pretmp_269 + _131;
  _129 = *_130;
  _128 = _129 * -1.6666667163372039794921875e-1;
  _127 = _134 + _128;
  _126 = j_153 + pretmp_272;
  _125 = (long unsigned int) _126;
  _124 = _125 * 4;
  _123 = pretmp_269 + _124;
  _122 = *_123;
  _121 = _122 * 1.6666667163372039794921875e-1;
  _120 = _127 + _121;
  j_119 = j_153 + 1;
  _113 = j_119 + pretmp_267;
  _112 = (long unsigned int) _113;
  _111 = _112 * 4;
  _110 = pretmp_269 + _111;
  _109 = *_110;
  _108 = _109 * -8.3333335816860198974609375e-2;
  _107 = _120 + _108;
  _106 = j_119 + pretmp_272;
  _6 = (long unsigned int) _106;
  _4 = _6 * 4;
  _281 = pretmp_269 + _4;
  _280 = *_281;
  _279 = _280 * 8.3333335816860198974609375e-2;
  _278 = _107 + _279;
  *_148 = _278;
  _276 = pretmp_282 + _149;
  _275 = *_143;
  _274 = _275 * -8.3333335816860198974609375e-2;
  _273 = *_110;
  _268 = _273 * 8.3333335816860198974609375e-2;
  _263 = _274 + _268;
  _262 = _147 + pretmp_260;
  _261 = (long unsigned int) _262;
  _283 = _261 * 4;
  _270 = pretmp_269 + _283;
  _265 = *_270;
  _114 = _265 * -1.6666667163372039794921875e-1;
  _204 = _263 + _114;
  _304 = j_119 + pretmp_260;
  _305 = (long unsigned int) _304;
  _306 = _305 * 4;
  _307 = pretmp_269 + _306;
  _308 = *_307;
  _309 = _308 * 1.6666667163372039794921875e-1;
  _310 = _204 + _309;
  _311 = *_137;
  _312 = _311 * -8.3333335816860198974609375e-2;
  _313 = _310 + _312;
  _314 = *_281;
  _315 = _314 * 8.3333335816860198974609375e-2;
  _316 = _313 + _315;
  *_276 = _316;
  if (j_119 <= pretmp_203)
    goto <bb 28>;
  else
    goto <bb 24>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:

  <bb 30>:
  return;

  <bb 31>:
  q.14_15 = q.14_13 + 1;
  goto <bb 3>;

}



;; Function void std::basic_string<_CharT, _Traits, _Alloc>::_Rep::_M_dispose(const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZNSs4_Rep10_M_disposeERKSaIcE.part.5, funcdef_no=4434, decl_uid=82182, symbol_order=3171) (executed once)

void std::basic_string<_CharT, _Traits, _Alloc>::_Rep::_M_dispose(const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (struct _Rep * const this, const struct allocator & __a)
{
  struct _Rep & D.82188;
  _Atomic_word D.82187;
  _Atomic_word __result;
  _Atomic_word * _2;
  unsigned int _3;
  _Atomic_word _4;
  int _6;
  _Atomic_word _7;

  <bb 2>:
  if (__gthrw___pthread_key_create != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _2 = &this_1(D)->D.14022._M_refcount;
  _3 = __atomic_fetch_add_4 (_2, 4294967295, 4);
  _4 = (_Atomic_word) _3;
  goto <bb 5>;

  <bb 4>:
  __result_5 = MEM[(_Atomic_word *)this_1(D) + 16B];
  _6 = __result_5 + -1;
  MEM[(_Atomic_word *)this_1(D) + 16B] = _6;

  <bb 5>:
  # _7 = PHI <_4(3), __result_5(4)>
  if (_7 <= 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  std::basic_string<char>::_Rep::_M_destroy (this_1(D), __a_8(D));

  <bb 7>:
  return;

}



;; Function cv::Mat::Mat(int, int, int) (_ZN2cv3MatC2Eiii, funcdef_no=3481, decl_uid=40285, symbol_order=1402)

cv::Mat::Mat(int, int, int) (struct Mat * const this, int _rows, int _cols, int _type)
{
  int sz[2];
  int _type;
  int * _2;
  size_t[2] * _4;

  <bb 2>:
  _2 = &this_1(D)->rows;
  MEM[(struct MSize *)this_1(D) + 64B].p = _2;
  _4 = &MEM[(struct MStep *)this_1(D) + 72B].buf;
  MEM[(struct MStep *)this_1(D) + 72B].p = _4;
  MEM[(size_t *)this_1(D) + 88B] = 0;
  MEM[(size_t *)this_1(D) + 80B] = 0;
  this_1(D)->flags = 1124007936;
  this_1(D)->cols = 0;
  this_1(D)->rows = 0;
  this_1(D)->dims = 0;
  this_1(D)->datalimit = 0B;
  this_1(D)->dataend = 0B;
  this_1(D)->datastart = 0B;
  this_1(D)->data = 0B;
  this_1(D)->refcount = 0B;
  this_1(D)->allocator = 0B;
  _type_23 = _type_9(D) & 4095;
  sz[0] = _rows_7(D);
  sz[1] = _cols_8(D);
  cv::Mat::create (this_1(D), 2, &sz, _type_23);
  sz ={v} {CLOBBER};
  return;

}



;; Function cv::Mat::Mat(const cv::Mat&) (_ZN2cv3MatC2ERKS0_, funcdef_no=3499, decl_uid=40225, symbol_order=1420)

cv::Mat::Mat(const cv::Mat&) (struct Mat * const this, const struct Mat & m)
{
  int _5;
  int _8;
  int _10;
  int _12;
  uchar * _14;
  int * _16;
  uchar * _18;
  uchar * _20;
  uchar * _22;
  struct MatAllocator * _24;
  int * _26;
  size_t[2] * _27;
  int _29;
  size_t * _30;
  size_t * const _31;
  long unsigned int _32;
  long unsigned int _34;

  <bb 2>:
  _5 = m_4(D)->flags;
  this_6(D)->flags = _5;
  _8 = m_4(D)->dims;
  this_6(D)->dims = _8;
  _10 = m_4(D)->rows;
  this_6(D)->rows = _10;
  _12 = m_4(D)->cols;
  this_6(D)->cols = _12;
  _14 = m_4(D)->data;
  this_6(D)->data = _14;
  _16 = m_4(D)->refcount;
  this_6(D)->refcount = _16;
  _18 = m_4(D)->datastart;
  this_6(D)->datastart = _18;
  _20 = m_4(D)->dataend;
  this_6(D)->dataend = _20;
  _22 = m_4(D)->datalimit;
  this_6(D)->datalimit = _22;
  _24 = m_4(D)->allocator;
  this_6(D)->allocator = _24;
  _26 = &this_6(D)->rows;
  MEM[(struct MSize *)this_6(D) + 64B].p = _26;
  _27 = &MEM[(struct MStep *)this_6(D) + 72B].buf;
  MEM[(struct MStep *)this_6(D) + 72B].p = _27;
  MEM[(size_t *)this_6(D) + 88B] = 0;
  MEM[(size_t *)this_6(D) + 80B] = 0;
  if (_16 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  __sync_fetch_and_add_4 (_16, 1);

  <bb 4>:
  _29 = m_4(D)->dims;
  if (_29 <= 2)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _30 = MEM[(size_t * *)this_6(D) + 72B];
  _31 = MEM[(size_t * *)m_4(D) + 72B];
  _32 = MEM[(const size_t &)_31];
  *_30 = _32;
  _34 = MEM[(const size_t &)_31 + 8];
  MEM[(size_t &)_30 + 8] = _34;
  goto <bb 7>;

  <bb 6>:
  this_6(D)->dims = 0;
  cv::Mat::copySize (this_6(D), m_4(D));

  <bb 7>:
  return;

}



;; Function cv::Mat::~Mat() (_ZN2cv3MatD2Ev, funcdef_no=3514, decl_uid=40297, symbol_order=1429)

cv::Mat::~Mat() (struct Mat * const this)
{
  size_t * _5;
  size_t[2] * _6;
  int * _9;
  unsigned int _10;
  int * _12;

  <bb 2>:
  _9 = this_3(D)->refcount;
  if (_9 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 3>:
  _10 = __sync_fetch_and_add_4 (_9, 4294967295);
  if (_10 == 1)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 4>:
  this_3(D)->datalimit = 0B;
  this_3(D)->dataend = 0B;
  this_3(D)->datastart = 0B;
  this_3(D)->data = 0B;
  _12 = this_3(D)->size.p;
  *_12 = 0;
  this_3(D)->refcount = 0B;
  _5 = this_3(D)->step.p;
  _6 = &this_3(D)->step.buf;
  if (_5 != _6)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  cv::fastFree (_5);

  <bb 6>:
  *this_3(D) ={v} {CLOBBER};
  return;

  <bb 7>:
  goto <bb 4>;

  <bb 8>:
  cv::Mat::deallocate (this_3(D));
  goto <bb 4>;

}



;; Function cv::MatConstIterator::MatConstIterator(const cv::Mat*) (_ZN2cv16MatConstIteratorC2EPKNS_3MatE, funcdef_no=3772, decl_uid=43932, symbol_order=1537)


Analyzing loop at /usr/include/opencv2/core/mat.hpp:409
/usr/include/opencv2/core/mat.hpp:409:5: note: ===== analyze_loop_nest =====
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_loop_form ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _7
  bounds on difference of bases: 2 ... 2147483646
  result:
    # of iterations (unsigned int) _7 + 4294967295, bounded by 2147483646
/usr/include/opencv2/core/mat.hpp:409:5: note: Symbolic number of iterations is (unsigned int) _7
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_data_refs ===
Creating dr for *_37
analyze_innermost: success.
	base_address: pretmp_57
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: MEM[(const int &)pretmp_57]
	Access function 0: {0, +, 4}_1
/usr/include/opencv2/core/mat.hpp:409:5: note: got vectype for stmt: _38 = *_37;
const vector(4) int
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_scalar_cycles ===
/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: Access function of PHI: {0, +, 1}_1
/usr/include/opencv2/core/mat.hpp:409:5: note: step: 1,  init: 0
/usr/include/opencv2/core/mat.hpp:409:5: note: Detected induction.
/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: Access function of PHI: p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: detected reduction: need to swap operands: p_41 = p_53 * _39;

/usr/include/opencv2/core/mat.hpp:409:5: note: Detected reduction.
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_pattern_recog ===
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _35
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _35 = (long unsigned int) i_51;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand i_51
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 4.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand 4
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _38
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_data_ref_accesses ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_mark_stmts_to_be_vectorized ===
/usr/include/opencv2/core/mat.hpp:409:5: note: init: phi relevant? i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: init: phi relevant? p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? _35 = (long unsigned int) i_51;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? _36 = _35 * 4;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? _37 = pretmp_57 + _36;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: vec_stmt_relevant_p: used out of loop.
/usr/include/opencv2/core/mat.hpp:409:5: note: mark relevant 0, live 1.
/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? i_42 = i_51 + 1;

/usr/include/opencv2/core/mat.hpp:409:5: note: init: stmt relevant? if (_7 > i_42)

/usr/include/opencv2/core/mat.hpp:409:5: note: worklist: examine stmt: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: mark relevant 3, live 0.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: mark relevant 3, live 0.
/usr/include/opencv2/core/mat.hpp:409:5: note: worklist: examine stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _38
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: mark relevant 3, live 0.
/usr/include/opencv2/core/mat.hpp:409:5: note: worklist: examine stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: worklist: examine stmt: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_41
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: reduc-stmt defining reduc-phi in the same nest.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand 1
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _38 = *_37;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 4}_1)
  (chrec_b = {0, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_determine_vectorization_factor ===
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining phi: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  size_t
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(2) long unsigned int
/usr/include/opencv2/core/mat.hpp:409:5: note: nunits = 2
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _35 = (long unsigned int) i_51;

/usr/include/opencv2/core/mat.hpp:409:5: note: skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _36 = _35 * 4;

/usr/include/opencv2/core/mat.hpp:409:5: note: skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _37 = pretmp_57 + _36;

/usr/include/opencv2/core/mat.hpp:409:5: note: skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  int
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(4) int
/usr/include/opencv2/core/mat.hpp:409:5: note: nunits = 4
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  long unsigned int
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(2) long unsigned int
/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  int
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(4) int
/usr/include/opencv2/core/mat.hpp:409:5: note: nunits = 4
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  size_t
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(2) long unsigned int
/usr/include/opencv2/core/mat.hpp:409:5: note: get vectype for scalar type:  size_t
/usr/include/opencv2/core/mat.hpp:409:5: note: vectype: vector(2) long unsigned int
/usr/include/opencv2/core/mat.hpp:409:5: note: nunits = 2
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: i_42 = i_51 + 1;

/usr/include/opencv2/core/mat.hpp:409:5: note: skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: if (_7 > i_42)

/usr/include/opencv2/core/mat.hpp:409:5: note: skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: vectorization factor = 4
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_data_refs_alignment ===
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_compute_data_ref_alignment:
/usr/include/opencv2/core/mat.hpp:409:5: note: can't force alignment of ref: *_37
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_prune_runtime_alias_test_list ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_enhance_data_refs_alignment ===
/usr/include/opencv2/core/mat.hpp:409:5: note: Unknown misalignment, is_packed = 0
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_can_advance_ivs_p:
/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: reduc phi. skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: Alignment of access forced using peeling.
/usr/include/opencv2/core/mat.hpp:409:5: note: Peeling for alignment will be applied.
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_slp ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_make_slp_decision ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_detect_hybrid_slp ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_analyze_loop_operations ===
/usr/include/opencv2/core/mat.hpp:409:5: note: examining phi: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: examining phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _35 = (long unsigned int) i_51;

/usr/include/opencv2/core/mat.hpp:409:5: note: irrelevant.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _36 = _35 * 4;

/usr/include/opencv2/core/mat.hpp:409:5: note: irrelevant.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _37 = pretmp_57 + _36;

/usr/include/opencv2/core/mat.hpp:409:5: note: irrelevant.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand *_37
/usr/include/opencv2/core/mat.hpp:409:5: note: not ssa-name.
/usr/include/opencv2/core/mat.hpp:409:5: note: use not simple.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand *_37
/usr/include/opencv2/core/mat.hpp:409:5: note: not ssa-name.
/usr/include/opencv2/core/mat.hpp:409:5: note: use not simple.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_model_load_cost: aligned.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _38
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: === vectorizable_conversion ===
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: detected reduction: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: no optab for reduction.
vect_model_reduction_cost: inside_cost = 2, prologue_cost = 1, epilogue_cost = 3 .
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: i_42 = i_51 + 1;

/usr/include/opencv2/core/mat.hpp:409:5: note: irrelevant.
/usr/include/opencv2/core/mat.hpp:409:5: note: ==> examining statement: if (_7 > i_42)

/usr/include/opencv2/core/mat.hpp:409:5: note: irrelevant.
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
/usr/include/opencv2/core/mat.hpp:409:5: note: Cost model analysis: 
  Vector inside of loop cost: 5
  Vector prologue cost: 15
  Vector epilogue cost: 9
  Scalar iteration cost: 3
  Scalar outside cost: 7
  Vector outside cost: 24
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 7

/usr/include/opencv2/core/mat.hpp:409:5: note:   Runtime profitability threshold = 6
/usr/include/opencv2/core/mat.hpp:409:5: note:   Static estimate profitability threshold = 6
/usr/include/opencv2/core/mat.hpp:409:5: note: epilog loop required
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_can_advance_ivs_p:
/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: i_51 = PHI <i_42(6), 0(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: Analyze phi: p_53 = PHI <p_41(6), 1(12)>

/usr/include/opencv2/core/mat.hpp:409:5: note: reduc phi. skip.
/usr/include/opencv2/core/mat.hpp:409:5: note: loop vectorized
/usr/include/opencv2/core/mat.hpp:409:5: note: === vec_transform_loop ===
/usr/include/opencv2/core/mat.hpp:409:5: note: Profitability threshold is 6 loop iterations.
/usr/include/opencv2/core/mat.hpp:409:5: note: loop peeled for vectorization to enhance alignment
/usr/include/opencv2/core/mat.hpp:409:5: note: created vectp_pretmp.550_46
/usr/include/opencv2/core/mat.hpp:409:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp_pretmp.550_46 & 15) >> 2) & 3, niters.549_33>
Removing basic block 16
<bb 16>:


;; Scaling loop 2 with scale 0.666600, bounding iterations to 6 from guessed 20
;; guessed iterations are now 6
;; Scaling loop 1 with scale 0.777800, bounding iterations to 0 from guessed 17
;; guessed iterations are now 14

loop at /usr/include/opencv2/core/mat.hpp:712: if (ivtmp_69 < prologue_after_cost_adjust.552_15)

Setting upper bound of nb iterations for prologue loop to 5
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_update_inits_of_dr ===
/usr/include/opencv2/core/mat.hpp:409:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 23
<bb 23>:


;; Scaling loop 1 with scale 0.666600, bounding iterations to 0 from guessed 20
;; guessed iterations are now 14
;; Scaling loop 3 with scale 0.777800, bounding iterations to 4 from guessed 17
;; guessed iterations are now 4
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_update_ivs_after_vectorizer: phi: i_51 = PHI <i_42(6), i_1(27)>

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_update_ivs_after_vectorizer: phi: p_53 = PHI <p_41(6), p_60(27)>

/usr/include/opencv2/core/mat.hpp:409:5: note: reduc phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing phi: i_51 = PHI <i_42(6), i_1(31)>

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing phi: p_53 = PHI <p_41(6), p_60(31)>

/usr/include/opencv2/core/mat.hpp:409:5: note: multiple-types.
/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: _35 = (long unsigned int) i_51;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: _36 = _35 * 4;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: _37 = pretmp_57 + _36;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: transform statement.
/usr/include/opencv2/core/mat.hpp:409:5: note: transform load. ncopies = 1
/usr/include/opencv2/core/mat.hpp:409:5: note: create vector_type-pointer variable to type: const vector(4) int  vectorizing a pointer ref: MEM[(const int &)pretmp_57]
/usr/include/opencv2/core/mat.hpp:409:5: note: created vectp_pretmp.559_96
/usr/include/opencv2/core/mat.hpp:409:5: note: add new stmt: vect__38.560_100 = MEM[(const int &)vectp_pretmp.558_98];

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: multiple-types.
/usr/include/opencv2/core/mat.hpp:409:5: note: transform statement.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _38
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: transform conversion. ncopies = 1.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_get_vec_def_for_operand: _38
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _38
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: def =  _38
  def_stmt =  _38 = *_37;

/usr/include/opencv2/core/mat.hpp:409:5: note: add new stmt: vect__39.561_101 = [vec_unpack_lo_expr] vect__38.560_100;

/usr/include/opencv2/core/mat.hpp:409:5: note: add new stmt: vect__39.561_102 = [vec_unpack_hi_expr] vect__38.560_100;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: multiple-types.
/usr/include/opencv2/core/mat.hpp:409:5: note: transform statement.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_53 = PHI <p_41(6), p_60(31)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: detected reduction: p_41 = _39 * p_53;

/usr/include/opencv2/core/mat.hpp:409:5: note: no optab for reduction.
/usr/include/opencv2/core/mat.hpp:409:5: note: transform reduction.
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_get_vec_def_for_operand: _39
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: def =  _39
  def_stmt =  _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: add new stmt: vect_p_41.562_104 = vect__39.561_101 * vect_p_41.562_103;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand _39
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: _39 = (long unsigned int) _38;

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 3.
/usr/include/opencv2/core/mat.hpp:409:5: note: add new stmt: vect_p_41.562_105 = vect__39.561_102 * vect_p_41.562_104;

/usr/include/opencv2/core/mat.hpp:409:5: note: vect_get_vec_def_for_operand: p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: vect_is_simple_use: operand p_53
/usr/include/opencv2/core/mat.hpp:409:5: note: def_stmt: p_53 = PHI <p_41(6), p_60(31)>

/usr/include/opencv2/core/mat.hpp:409:5: note: type of def: 5.
/usr/include/opencv2/core/mat.hpp:409:5: note: def =  p_53
  def_stmt =  p_53 = PHI <p_41(6), p_60(31)>

/usr/include/opencv2/core/mat.hpp:409:5: note: transform reduction: created def-use cycle: vect_p_41.562_103 = PHI <vect_p_41.562_105(6), { 1, 1 }(31)>

vect_p_41.562_105 = vect__39.561_102 * vect_p_41.562_104;

/usr/include/opencv2/core/mat.hpp:409:5: note: Reduce using vector shifts
/usr/include/opencv2/core/mat.hpp:409:5: note: extract scalar result
/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: i_42 = i_51 + 1;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: vectp_pretmp.558_99 = vectp_pretmp.558_98 + 16;

/usr/include/opencv2/core/mat.hpp:409:5: note: ------>vectorizing statement: if (_7 > i_42)


loop at /usr/include/opencv2/core/mat.hpp:712: if (ivtmp_112 < bnd.555_72)

;; Scaling loop 1 with scale 0.250000, bounding iterations to 3 from guessed 14
;; guessed iterations are now 3
/usr/include/opencv2/core/mat.hpp:409:5: note: LOOP VECTORIZED

/usr/include/opencv2/core/mat.hpp:1712:8: note: vectorized 1 loops in function.
Merging blocks 12 and 18
Merging blocks 13 and 27
Merging blocks 21 and 8
Merging blocks 29 and 22
Created preheader block for loop 2
cv::MatConstIterator::MatConstIterator(const cv::Mat*) (struct MatConstIterator * const this, const struct Mat * _m)
{
  size_t vect_p_41.565;
  vector(2) long unsigned int vect_p_41.564;
  size_t stmp_p_41.563;
  vector(2) long unsigned int vect_p_41.562;
  vector(2) long unsigned int vect__39.561;
  const vector(4) int vect__38.560;
  const vector(4) int * vectp_pretmp.559;
  const vector(4) int * vectp_pretmp.558;
  int tmp.557;
  unsigned int ratio_mult_vf.556;
  unsigned int bnd.555;
  unsigned int niters.554;
  sizetype prolog_loop_adjusted_niters.553;
  unsigned int prologue_after_cost_adjust.552;
  unsigned int prolog_loop_niters.551;
  const vector(4) int * vectp_pretmp.550;
  unsigned int niters.549;
  size_t p;
  int i;
  const int _7;
  const int _12;
  uchar * _13;
  long unsigned int _16;
  uchar * _17;
  size_t * _20;
  long unsigned int _21;
  long unsigned int _22;
  sizetype _23;
  size_t * _24;
  long unsigned int iftmp.30_25;
  long unsigned int iftmp.30_26;
  int _27;
  int _28;
  long unsigned int _29;
  int _30;
  long unsigned int _31;
  size_t _32;
  long unsigned int _35;
  long unsigned int _36;
  const int & _37;
  int _38;
  long unsigned int _39;
  long unsigned int _43;
  size_t _44;
  int _45;
  const int & _47;
  long unsigned int _48;
  long unsigned int _49;
  unsigned int _54;
  unsigned int _55;
  unsigned long _56;
  int * const pretmp_57;
  unsigned long _62;
  unsigned long _63;
  unsigned long _64;
  unsigned int ivtmp_68;
  unsigned int ivtmp_69;
  unsigned int _73;
  unsigned int _74;
  long unsigned int _78;
  long unsigned int _79;
  const int & _80;
  int _81;
  long unsigned int _82;
  unsigned int _85;
  unsigned int _86;
  unsigned int _87;
  int _95;
  sizetype _97;
  unsigned int ivtmp_111;
  unsigned int ivtmp_112;
  unsigned int ivtmp_113;

  <bb 2>:
  this_4(D)->m = _m_5(D);
  _7 = MEM[(int *)_m_5(D) + 4B];
  if (_7 > 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _20 = MEM[(size_t * const *)_m_5(D) + 72B];
  _21 = (long unsigned int) _7;
  _22 = _21 * 8;
  _23 = _22 + 18446744073709551608;
  _24 = _20 + _23;
  iftmp.30_25 = *_24;

  <bb 4>:
  # iftmp.30_26 = PHI <0(2), iftmp.30_25(3)>
  this_4(D)->elemSize = iftmp.30_26;
  this_4(D)->ptr = 0B;
  this_4(D)->sliceStart = 0B;
  this_4(D)->sliceEnd = 0B;
  _12 = MEM[(int *)_m_5(D)];
  _27 = _12 & 16384;
  if (_27 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 5>:
  _28 = _m_5(D)->rows;
  _29 = (long unsigned int) _28;
  _30 = _m_5(D)->cols;
  _31 = (long unsigned int) _30;
  _32 = _31 * _29;
  goto <bb 15>;

  <bb 6>:

  <bb 7>:
  # i_51 = PHI <i_42(6), i_1(25)>
  # p_53 = PHI <p_41(6), p_60(25)>
  # vectp_pretmp.558_98 = PHI <vectp_pretmp.558_99(6), vectp_pretmp.559_96(25)>
  # vect_p_41.562_103 = PHI <vect_p_41.562_105(6), { 1, 1 }(25)>
  # ivtmp_111 = PHI <ivtmp_112(6), 0(25)>
  _35 = (long unsigned int) i_51;
  _36 = _35 * 4;
  _37 = pretmp_57 + _36;
  vect__38.560_100 = MEM[(const int &)vectp_pretmp.558_98];
  _38 = *_37;
  vect__39.561_101 = [vec_unpack_lo_expr] vect__38.560_100;
  vect__39.561_102 = [vec_unpack_hi_expr] vect__38.560_100;
  _39 = (long unsigned int) _38;
  vect_p_41.562_104 = vect__39.561_101 * vect_p_41.562_103;
  vect_p_41.562_105 = vect__39.561_102 * vect_p_41.562_104;
  p_41 = _39 * p_53;
  i_42 = i_51 + 1;
  vectp_pretmp.558_99 = vectp_pretmp.558_98 + 16;
  ivtmp_112 = ivtmp_111 + 1;
  if (ivtmp_112 < bnd.555_72)
    goto <bb 6>;
  else
    goto <bb 10>;

  <bb 8>:
  # i_76 = PHI <i_84(9), i_88(11)>
  # p_77 = PHI <p_83(9), p_90(11)>
  _78 = (long unsigned int) i_76;
  _79 = _78 * 4;
  _80 = pretmp_57 + _79;
  _81 = *_80;
  _82 = (long unsigned int) _81;
  p_83 = _82 * p_77;
  i_84 = i_76 + 1;
  if (_7 > i_84)
    goto <bb 9>;
  else
    goto <bb 12>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # i_89 = PHI <i_42(7)>
  # p_91 = PHI <p_41(7)>
  # vect_p_41.562_106 = PHI <vect_p_41.562_105(7)>
  vect_p_41.564_107 = vect_p_41.562_106 v>> 64;
  vect_p_41.564_108 = vect_p_41.564_107 * vect_p_41.562_106;
  stmp_p_41.563_109 = BIT_FIELD_REF <vect_p_41.564_108, 64, 0>;
  vect_p_41.565_110 = stmp_p_41.563_109 * p_60;
  _95 = (int) ratio_mult_vf.556_75;
  tmp.557_94 = i_1 + _95;
  if (niters.554_71 == ratio_mult_vf.556_75)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 11>:
  # i_88 = PHI <tmp.557_94(10), i_1(24)>
  # p_90 = PHI <vect_p_41.565_110(10), p_60(24)>
  goto <bb 8>;

  <bb 12>:
  # p_93 = PHI <p_83(8)>

  <bb 13>:
  # p_92 = PHI <p_93(12), vect_p_41.565_110(10)>

  <bb 14>:
  # p_58 = PHI <p_92(13), p_59(23)>

  <bb 15>:
  # _44 = PHI <_32(5), p_58(14)>
  _16 = _44 * iftmp.30_26;
  _17 = _13 + _16;
  this_4(D)->sliceEnd = _17;

  <bb 16>:
  cv::MatConstIterator::seek (this_4(D), 0B, 0);
  return;

  <bb 17>:
  _13 = _m_5(D)->data;
  this_4(D)->sliceStart = _13;
  if (_7 <= 2)
    goto <bb 5>;
  else
    goto <bb 18>;

  <bb 18>:
  pretmp_57 = MEM[(const struct MSize *)_m_5(D) + 64B].p;
  niters.549_33 = (unsigned int) _7;
  vectp_pretmp.550_46 = pretmp_57;
  _64 = (unsigned long) vectp_pretmp.550_46;
  _63 = _64 & 15;
  _62 = _63 >> 2;
  _56 = -_62;
  _55 = (unsigned int) _56;
  _54 = _55 & 3;
  prolog_loop_niters.551_65 = MIN_EXPR <niters.549_33, _54>;
  if (niters.549_33 <= 6)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:

  <bb 20>:
  # prologue_after_cost_adjust.552_15 = PHI <niters.549_33(19), prolog_loop_niters.551_65(18)>
  if (prologue_after_cost_adjust.552_15 == 0)
    goto <bb 24>;
  else
    goto <bb 21>;

  <bb 21>:
  # i_67 = PHI <0(20)>
  # p_66 = PHI <1(20)>
  # ivtmp_113 = PHI <0(20)>

  <bb 26>:
  # i_52 = PHI <i_67(21), i_34(22)>
  # p_50 = PHI <p_66(21), p_40(22)>
  # ivtmp_68 = PHI <ivtmp_113(21), ivtmp_69(22)>
  _49 = (long unsigned int) i_52;
  _48 = _49 * 4;
  _47 = pretmp_57 + _48;
  _45 = *_47;
  _43 = (long unsigned int) _45;
  p_40 = _43 * p_50;
  i_34 = i_52 + 1;
  ivtmp_69 = ivtmp_68 + 1;
  if (ivtmp_69 < prologue_after_cost_adjust.552_15)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  goto <bb 26>;

  <bb 23>:
  # i_61 = PHI <i_34(26)>
  # p_59 = PHI <p_40(26)>
  if (prologue_after_cost_adjust.552_15 == niters.549_33)
    goto <bb 14>;
  else
    goto <bb 24>;

  <bb 24>:
  # i_1 = PHI <i_61(23), 0(20)>
  # p_60 = PHI <p_59(23), 1(20)>
  prolog_loop_adjusted_niters.553_70 = (sizetype) prologue_after_cost_adjust.552_15;
  niters.554_71 = niters.549_33 - prologue_after_cost_adjust.552_15;
  _73 = niters.554_71 + 4294967292;
  _74 = _73 >> 2;
  bnd.555_72 = _74 + 1;
  ratio_mult_vf.556_75 = bnd.555_72 << 2;
  _85 = (unsigned int) _7;
  _86 = _85 - prologue_after_cost_adjust.552_15;
  _87 = _86 + 4294967295;
  if (_87 <= 2)
    goto <bb 11>;
  else
    goto <bb 25>;

  <bb 25>:
  _97 = prolog_loop_adjusted_niters.553_70 * 4;
  vectp_pretmp.559_96 = pretmp_57 + _97;
  goto <bb 7>;

}



;; Function cv::MatConstIterator& cv::MatConstIterator::operator++() (_ZN2cv16MatConstIteratorppEv, funcdef_no=3789, decl_uid=43872, symbol_order=1554)

cv::MatConstIterator& cv::MatConstIterator::operator++() (struct MatConstIterator * const this)
{
  const struct Mat * _5;
  uchar * _6;
  long unsigned int _7;
  uchar * _8;
  uchar * _10;
  sizetype _15;
  uchar * _16;

  <bb 2>:
  _5 = this_4(D)->m;
  if (_5 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  _6 = this_4(D)->ptr;
  _7 = this_4(D)->elemSize;
  _8 = _6 + _7;
  this_4(D)->ptr = _8;
  _10 = this_4(D)->sliceEnd;
  if (_8 >= _10)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 4>:
  return this_4(D);

  <bb 5>:
  goto <bb 4>;

  <bb 6>:
  _15 = -_7;
  _16 = _8 + _15;
  this_4(D)->ptr = _16;
  cv::MatConstIterator::seek (this_4(D), 1, 1);
  goto <bb 4>;

}



;; Function cv::MatCommaInitializer_<_Tp> cv::operator<<(const cv::Mat_<_Tp>&, T2) [with _Tp = float; T2 = float] (_ZN2cvlsIffEENS_20MatCommaInitializer_IT_EERKNS_4Mat_IS2_EET0_, funcdef_no=4138, decl_uid=75850, symbol_order=1795) (executed once)

cv::MatCommaInitializer_<_Tp> cv::operator<<(const cv::Mat_<_Tp>&, T2) [with _Tp = float; T2 = float] (const struct Mat_ & m, float val)
{
  struct MatCommaInitializer_ commaInitializer;
  uchar * const _3;
  const struct Mat * _5;
  long unsigned int _9;
  uchar * _10;
  uchar * _11;
  uchar * _12;

  <bb 2>:
  cv::MatConstIterator::MatConstIterator (&MEM[(struct MatConstIterator_ *)&commaInitializer].D.75966, m_2(D));
  _3 = MEM[(uchar * *)&commaInitializer + 16B];
  MEM[(float &)_3] = val_4(D);
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&commaInitializer].D.76059.D.75966);
  _5 = MEM[(const struct MatConstIterator &)&commaInitializer].m;
  MEM[(struct MatConstIterator *)_6(D)].m = _5;
  _9 = MEM[(const struct MatConstIterator &)&commaInitializer].elemSize;
  MEM[(struct MatConstIterator *)_6(D)].elemSize = _9;
  _10 = MEM[(const struct MatConstIterator &)&commaInitializer].ptr;
  MEM[(struct MatConstIterator *)_6(D)].ptr = _10;
  _11 = MEM[(const struct MatConstIterator &)&commaInitializer].sliceStart;
  MEM[(struct MatConstIterator *)_6(D)].sliceStart = _11;
  _12 = MEM[(const struct MatConstIterator &)&commaInitializer].sliceEnd;
  MEM[(struct MatConstIterator *)_6(D)].sliceEnd = _12;
  commaInitializer ={v} {CLOBBER};
  return _6(D);

}



;; Function void harris_opt(int, int, float*, float*&) (_Z10harris_optiiPfRS_, funcdef_no=4001, decl_uid=74427, symbol_order=1653)

harris.opt.cpp:9:7: note: vectorized 0 loops in function.
void harris_opt(int, int, float*, float*&) (int C, int R, float * img, float * & harris)
{
  float * Syy;
  float * Sxy;
  float * Sxx;
  float * Iyy;
  float * Ixy;
  float * Ixx;
  float * Iy;
  float * Ix;
  struct .omp_data_s.3 .omp_data_o.7;
  struct .omp_data_s.2 .omp_data_o.6;
  struct .omp_data_s.1 .omp_data_o.5;
  struct .omp_data_s.0 .omp_data_o.4;
  int _2;
  int _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  void * _26;

  <bb 2>:
  _2 = R_1(D) + 2;
  _4 = C_3(D) + 2;
  _5 = _2 * _4;
  _6 = (long unsigned int) _5;
  _7 = _6 * 4;
  Ix_10 = malloc (_7);
  Iy_12 = malloc (_7);
  Ixx_14 = malloc (_7);
  Ixy_16 = malloc (_7);
  Iyy_18 = malloc (_7);
  Sxx_20 = malloc (_7);
  Sxy_22 = malloc (_7);
  Syy_24 = malloc (_7);
  _26 = malloc (_7);
  *harris_27(D) = _26;
  .omp_data_o.4.img = img_29(D);
  .omp_data_o.4.Ix = Ix_10;
  .omp_data_o.4.Iy = Iy_12;
  .omp_data_o.4.C = C_3(D);
  .omp_data_o.4.R = R_1(D);
  __builtin_GOMP_parallel (_Z10harris_optiiPfRS_._omp_fn.0, &.omp_data_o.4, 0, 0);
  Ix_36 = .omp_data_o.4.Ix;
  Iy_37 = .omp_data_o.4.Iy;
  C_38 = .omp_data_o.4.C;
  R_39 = .omp_data_o.4.R;
  .omp_data_o.4 ={v} {CLOBBER};
  .omp_data_o.5.Ix = Ix_36;
  .omp_data_o.5.Iy = Iy_37;
  .omp_data_o.5.Ixx = Ixx_14;
  .omp_data_o.5.Ixy = Ixy_16;
  .omp_data_o.5.Iyy = Iyy_18;
  .omp_data_o.5.C = C_38;
  .omp_data_o.5.R = R_39;
  __builtin_GOMP_parallel (_Z10harris_optiiPfRS_._omp_fn.1, &.omp_data_o.5, 0, 0);
  Ix_49 = .omp_data_o.5.Ix;
  Iy_50 = .omp_data_o.5.Iy;
  Ixx_51 = .omp_data_o.5.Ixx;
  Ixy_52 = .omp_data_o.5.Ixy;
  Iyy_53 = .omp_data_o.5.Iyy;
  C_54 = .omp_data_o.5.C;
  R_55 = .omp_data_o.5.R;
  .omp_data_o.5 ={v} {CLOBBER};
  .omp_data_o.6.Ixx = Ixx_51;
  .omp_data_o.6.Ixy = Ixy_52;
  .omp_data_o.6.Iyy = Iyy_53;
  .omp_data_o.6.Sxx = Sxx_20;
  .omp_data_o.6.Sxy = Sxy_22;
  .omp_data_o.6.Syy = Syy_24;
  .omp_data_o.6.C = C_54;
  .omp_data_o.6.R = R_55;
  __builtin_GOMP_parallel (_Z10harris_optiiPfRS_._omp_fn.2, &.omp_data_o.6, 0, 0);
  Ixx_66 = .omp_data_o.6.Ixx;
  Ixy_67 = .omp_data_o.6.Ixy;
  Iyy_68 = .omp_data_o.6.Iyy;
  Sxx_69 = .omp_data_o.6.Sxx;
  Sxy_70 = .omp_data_o.6.Sxy;
  Syy_71 = .omp_data_o.6.Syy;
  C_72 = .omp_data_o.6.C;
  R_73 = .omp_data_o.6.R;
  .omp_data_o.6 ={v} {CLOBBER};
  .omp_data_o.7.harris = harris_27(D);
  .omp_data_o.7.Sxx = Sxx_69;
  .omp_data_o.7.Sxy = Sxy_70;
  .omp_data_o.7.Syy = Syy_71;
  .omp_data_o.7.C = C_72;
  .omp_data_o.7.R = R_73;
  __builtin_GOMP_parallel (_Z10harris_optiiPfRS_._omp_fn.3, &.omp_data_o.7, 0, 0);
  Sxx_82 = .omp_data_o.7.Sxx;
  Sxy_83 = .omp_data_o.7.Sxy;
  Syy_84 = .omp_data_o.7.Syy;
  .omp_data_o.7 ={v} {CLOBBER};
  free (Ix_49);
  free (Iy_50);
  free (Ixx_66);
  free (Ixy_67);
  free (Iyy_68);
  free (Sxx_82);
  free (Sxy_83);
  free (Syy_84);
  return;

}



;; Function void image_info(cv::Mat&) (_Z10image_infoRN2cv3MatE, funcdef_no=4002, decl_uid=74479, symbol_order=1656)

void image_info(cv::Mat&) (struct Mat & img)
{
  char_type D.83311;
  char __c;
  char_type D.83308;
  char __c;
  char_type D.83305;
  struct basic_ostream & D.83302;
  struct basic_ostream & D.83300;
  struct basic_ostream & D.83297;
  struct basic_ostream & D.83294;
  struct ostream & D.83291;
  struct basic_ostream & D.83288;
  char_type D.83285;
  char __c;
  char_type D.83282;
  char __c;
  char_type D.83279;
  struct basic_ostream & D.83276;
  struct basic_ostream & D.83274;
  char_type D.83271;
  char __c;
  char_type D.83268;
  char __c;
  char_type D.83265;
  struct basic_ostream & D.83262;
  struct basic_ostream & D.83260;
  struct Size D.74481;
  const int _3;
  int (*__vtbl_ptr_type) () * _4;
  struct basic_ostream & _7;
  const int _8;
  int (*__vtbl_ptr_type) () * _9;
  struct basic_ostream & _12;
  int * _13;
  int _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _24;
  const struct __ctype_type * _25;
  const struct __ctype_type * _26;
  int prephitmp_27;
  int pretmp_28;
  const struct __ctype_type * _29;
  long int _32;
  sizetype _33;
  struct basic_ios * _34;
  struct basic_ostream & _37;
  int pretmp_38;
  char _39;
  char_type _42;
  int (*__vtbl_ptr_type) () * _47;
  int (*__vtbl_ptr_type) () _48;
  int prephitmp_51;
  void * PROF_52;
  char_type _54;
  long int _59;
  sizetype _60;
  struct basic_ios * _61;
  struct basic_ostream & _64;
  int pretmp_65;
  char _66;
  char_type _69;
  int (*__vtbl_ptr_type) () * _74;
  int (*__vtbl_ptr_type) () _75;
  int pretmp_77;
  void * PROF_79;
  char_type _81;
  struct basic_ostream & _88;
  struct basic_ostream & _90;
  int (*__vtbl_ptr_type) () * _96;
  long int _97;
  sizetype _98;
  struct basic_ios * _99;
  struct basic_ostream & _102;
  int pretmp_103;
  char _104;
  char_type _107;
  int prephitmp_109;
  int (*__vtbl_ptr_type) () * _112;
  int (*__vtbl_ptr_type) () _113;
  int pretmp_115;
  void * PROF_117;
  char_type _119;

  <bb 2>:
  _3 = MEM[(int *)img_2(D)];
  _19 = _3 & 4088;
  _20 = _19 >> 3;
  _21 = _20 + 1;
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Channels: ", 10);
  _7 = std::basic_ostream<char>::operator<< (&cout, _21);
  _4 = _7->_vptr.basic_ostream;
  _32 = MEM[(long int *)_4 + -24B];
  _33 = (sizetype) _32;
  _34 = _7 + _33;
  _25 = MEM[(const struct basic_ios *)_34]._M_ctype;
  if (_25 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  std::__throw_bad_cast ();

  <bb 4>:
  _39 = MEM[(const struct ctype *)_25]._M_widen_ok;
  if (_39 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _42 = MEM[(const struct ctype *)_25]._M_widen[10];
  pretmp_38 = (int) _42;
  goto <bb 8>;

  <bb 6>:
  std::ctype<char>::_M_widen_init (_25);
  _47 = MEM[(const struct ctype *)_25].D.18134._vptr.facet;
  _48 = MEM[(int (*__vtbl_ptr_type) () *)_47 + 48B];
  PROF_52 = [obj_type_ref] OBJ_TYPE_REF(_48;(const struct ctype)_25->6);
  if (PROF_52 == do_widen)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  _54 = OBJ_TYPE_REF(_48;(const struct ctype)_25->6) (_25, 10);
  pretmp_65 = (int) _54;

  <bb 8>:
  # prephitmp_27 = PHI <pretmp_38(5), 10(6), pretmp_65(7)>
  _37 = std::basic_ostream<char>::put (_7, prephitmp_27);
  std::basic_ostream<char>::flush (_37);
  _8 = MEM[(int *)img_2(D)];
  _22 = _8 & 4095;
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Depth: ", 7);
  _12 = std::basic_ostream<char>::operator<< (&cout, _22);
  _9 = _12->_vptr.basic_ostream;
  _59 = MEM[(long int *)_9 + -24B];
  _60 = (sizetype) _59;
  _61 = _12 + _60;
  _26 = MEM[(const struct basic_ios *)_61]._M_ctype;
  if (_26 == 0B)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 9>:
  _66 = MEM[(const struct ctype *)_26]._M_widen_ok;
  if (_66 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _69 = MEM[(const struct ctype *)_26]._M_widen[10];
  pretmp_28 = (int) _69;
  goto <bb 13>;

  <bb 11>:
  std::ctype<char>::_M_widen_init (_26);
  _74 = MEM[(const struct ctype *)_26].D.18134._vptr.facet;
  _75 = MEM[(int (*__vtbl_ptr_type) () *)_74 + 48B];
  PROF_79 = [obj_type_ref] OBJ_TYPE_REF(_75;(const struct ctype)_26->6);
  if (PROF_79 == do_widen)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  _81 = OBJ_TYPE_REF(_75;(const struct ctype)_26->6) (_26, 10);
  pretmp_103 = (int) _81;

  <bb 13>:
  # prephitmp_109 = PHI <pretmp_28(10), 10(11), pretmp_103(12)>
  _64 = std::basic_ostream<char>::put (_12, prephitmp_109);
  std::basic_ostream<char>::flush (_64);
  _13 = MEM[(const struct MSize *)img_2(D) + 64B].p;
  _23 = *_13;
  _24 = MEM[(int *)_13 + 4B];
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Size: ", 6);
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "[", 1);
  _88 = std::basic_ostream<char>::operator<< (&cout, _24);
  std::__ostream_insert<char, std::char_traits<char> > (_88, " x ", 3);
  _90 = std::basic_ostream<char>::operator<< (_88, _23);
  std::__ostream_insert<char, std::char_traits<char> > (_90, "]", 1);
  _96 = cout._vptr.basic_ostream;
  _97 = MEM[(long int *)_96 + -24B];
  _98 = (sizetype) _97;
  _99 = &cout + _98;
  _29 = MEM[(const struct basic_ios *)_99]._M_ctype;
  if (_29 == 0B)
    goto <bb 3>;
  else
    goto <bb 14>;

  <bb 14>:
  _104 = MEM[(const struct ctype *)_29]._M_widen_ok;
  if (_104 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _107 = MEM[(const struct ctype *)_29]._M_widen[10];
  pretmp_77 = (int) _107;
  goto <bb 18>;

  <bb 16>:
  std::ctype<char>::_M_widen_init (_29);
  _112 = MEM[(const struct ctype *)_29].D.18134._vptr.facet;
  _113 = MEM[(int (*__vtbl_ptr_type) () *)_112 + 48B];
  PROF_117 = [obj_type_ref] OBJ_TYPE_REF(_113;(const struct ctype)_29->6);
  if (PROF_117 == do_widen)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:
  _119 = OBJ_TYPE_REF(_113;(const struct ctype)_29->6) (_29, 10);
  pretmp_115 = (int) _119;

  <bb 18>:
  # prephitmp_51 = PHI <pretmp_77(15), 10(16), pretmp_115(17)>
  _102 = std::basic_ostream<char>::put (&cout, prephitmp_51);
  std::basic_ostream<char>::flush (_102);
  D.74481 ={v} {CLOBBER};
  return;

}



;; Function cv::MatExpr::~MatExpr() (_ZN2cv7MatExprD2Ev, funcdef_no=4008, decl_uid=76084, symbol_order=1661)

cv::MatExpr::~MatExpr() (struct MatExpr * const this)
{
  struct Mat * _3;
  int * _5;
  struct Mat * _6;
  int * _7;
  struct Mat * _8;
  int * _9;
  struct Mat * _11;
  struct Mat * _13;
  size_t * _15;
  size_t[2] * _16;
  unsigned int _17;
  int * _19;
  size_t * _20;
  size_t[2] * _21;
  unsigned int _22;
  int * _24;
  size_t * _25;
  size_t[2] * _26;
  unsigned int _27;
  int * _29;

  <bb 2>:
  _5 = MEM[(struct Mat *)this_2(D) + 208B].refcount;
  if (_5 != 0B)
    goto <bb 3>;
  else
    goto <bb 20>;

  <bb 3>:
  _17 = __sync_fetch_and_add_4 (_5, 4294967295);
  if (_17 == 1)
    goto <bb 21>;
  else
    goto <bb 20>;

  <bb 4>:
  MEM[(struct Mat *)this_2(D) + 208B].datalimit = 0B;
  MEM[(struct Mat *)this_2(D) + 208B].dataend = 0B;
  MEM[(struct Mat *)this_2(D) + 208B].datastart = 0B;
  MEM[(struct Mat *)this_2(D) + 208B].data = 0B;
  _19 = MEM[(struct Mat *)this_2(D) + 208B].size.p;
  *_19 = 0;
  MEM[(struct Mat *)this_2(D) + 208B].refcount = 0B;
  _15 = MEM[(struct Mat *)this_2(D) + 208B].step.p;
  _16 = &MEM[(struct Mat *)this_2(D) + 208B].step.buf;
  if (_15 != _16)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  MEM[(struct Mat *)this_2(D) + 208B] ={v} {CLOBBER};
  _7 = MEM[(struct Mat *)this_2(D) + 112B].refcount;
  if (_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 23>;

  <bb 6>:
  cv::fastFree (_15);
  goto <bb 5>;

  <bb 7>:
  _22 = __sync_fetch_and_add_4 (_7, 4294967295);
  if (_22 == 1)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 8>:
  MEM[(struct Mat *)this_2(D) + 112B].datalimit = 0B;
  MEM[(struct Mat *)this_2(D) + 112B].dataend = 0B;
  MEM[(struct Mat *)this_2(D) + 112B].datastart = 0B;
  MEM[(struct Mat *)this_2(D) + 112B].data = 0B;
  _24 = MEM[(struct Mat *)this_2(D) + 112B].size.p;
  *_24 = 0;
  MEM[(struct Mat *)this_2(D) + 112B].refcount = 0B;
  _20 = MEM[(struct Mat *)this_2(D) + 112B].step.p;
  _21 = &MEM[(struct Mat *)this_2(D) + 112B].step.buf;
  if (_20 != _21)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  MEM[(struct Mat *)this_2(D) + 112B] ={v} {CLOBBER};
  _9 = MEM[(struct Mat *)this_2(D) + 16B].refcount;
  if (_9 != 0B)
    goto <bb 11>;
  else
    goto <bb 26>;

  <bb 10>:
  cv::fastFree (_20);
  goto <bb 9>;

  <bb 11>:
  _27 = __sync_fetch_and_add_4 (_9, 4294967295);
  if (_27 == 1)
    goto <bb 27>;
  else
    goto <bb 26>;

  <bb 12>:
  MEM[(struct Mat *)this_2(D) + 16B].datalimit = 0B;
  MEM[(struct Mat *)this_2(D) + 16B].dataend = 0B;
  MEM[(struct Mat *)this_2(D) + 16B].datastart = 0B;
  MEM[(struct Mat *)this_2(D) + 16B].data = 0B;
  _29 = MEM[(struct Mat *)this_2(D) + 16B].size.p;
  *_29 = 0;
  MEM[(struct Mat *)this_2(D) + 16B].refcount = 0B;
  _25 = MEM[(struct Mat *)this_2(D) + 16B].step.p;
  _26 = &MEM[(struct Mat *)this_2(D) + 16B].step.buf;
  if (_25 != _26)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  cv::fastFree (_25);

  <bb 14>:
  *this_2(D) ={v} {CLOBBER};
  return;

<L4>:

<L1>:
  _11 = &this_2(D)->b;
  cv::Mat::~Mat (_11);
  resx 3

<L6>:
  goto <bb 19> (<L2>);

<L5>:

<L2>:
  _13 = &this_2(D)->a;
  cv::Mat::~Mat (_13);
  resx 2

  <bb 20>:
  goto <bb 4>;

  <bb 21>:
  _3 = &this_2(D)->c;
  cv::Mat::deallocate (_3);
  goto <bb 4>;

<L7>:
  goto <bb 16> (<L1>);

  <bb 23>:
  goto <bb 8>;

  <bb 24>:
  _6 = &this_2(D)->b;
  cv::Mat::deallocate (_6);
  goto <bb 8>;

<L8>:
  goto <bb 19> (<L2>);

  <bb 26>:
  goto <bb 12>;

  <bb 27>:
  _8 = &this_2(D)->a;
  cv::Mat::deallocate (_8);
  goto <bb 12>;

}



;; Function void harris_base(int, int, float*, float*&) (_Z11harris_baseiiPfRS_, funcdef_no=4010, decl_uid=74475, symbol_order=1664)


Analyzing loop at harris.cpp:271
harris.cpp:271:3: note: ===== analyze_loop_nest =====
harris.cpp:271:3: note: === vect_analyze_loop_form ===
harris.cpp:271:3: note: ===== analyze_loop_nest_1 =====
harris.cpp:271:3: note: === vect_analyze_loop_form ===
harris.cpp:271:3: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [3, + , 1](no_overflow) < C_19(D)
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) C_19(D) + 4294967293, bounded by 2147483644
harris.cpp:271:3: note: Symbolic number of iterations is (unsigned int) C_19(D) + 4294967294
harris.cpp:271:3: note: not vectorized: control flow in loop.
harris.cpp:271:3: note: bad loop form.

Analyzing loop at harris.cpp:272
harris.cpp:272:5: note: ===== analyze_loop_nest =====
harris.cpp:272:5: note: === vect_analyze_loop_form ===
harris.cpp:272:5: note: === get_loop_niters ===
harris.cpp:272:5: note: Symbolic number of iterations is (unsigned int) C_19(D) + 4294967294
harris.cpp:272:5: note: === vect_analyze_data_refs ===
Creating dr for *_264
analyze_innermost: success.
	base_address: Sxx_36 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Sxx_36 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	Access function 0: {8B, +, 4}_5
Creating dr for *_268
analyze_innermost: success.
	base_address: Syy_40 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Syy_40 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	Access function 0: {8B, +, 4}_5
Creating dr for *_276
analyze_innermost: success.
	base_address: Sxy_38 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Sxy_38 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	Access function 0: {8B, +, 4}_5
Creating dr for *_280
analyze_innermost: success.
	base_address: (float *) _42 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *(float *) _42 + (sizetype) ((long unsigned int) pretmp_850 * 4)
	Access function 0: {8B, +, 4}_5
harris.cpp:272:5: note: got vectype for stmt: _265 = *_264;
vector(4) float
harris.cpp:272:5: note: got vectype for stmt: _269 = *_268;
vector(4) float
harris.cpp:272:5: note: got vectype for stmt: _277 = *_276;
vector(4) float
harris.cpp:272:5: note: got vectype for stmt: *_280 = _283;
vector(4) float
harris.cpp:272:5: note: === vect_analyze_scalar_cycles ===
harris.cpp:272:5: note: Analyze phi: j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: Access function of PHI: {2, +, 1}_5
harris.cpp:272:5: note: step: 1,  init: 2
harris.cpp:272:5: note: Detected induction.
harris.cpp:272:5: note: Analyze phi: .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: === vect_pattern_recog ===
harris.cpp:272:5: note: vect_is_simple_use: operand _262
harris.cpp:272:5: note: def_stmt: _262 = (long unsigned int) _261;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _261
harris.cpp:272:5: note: def_stmt: _261 = j_325 + pretmp_850;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand 4
harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _281
harris.cpp:272:5: note: def_stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vect_analyze_data_ref_accesses ===
harris.cpp:272:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:272:5: note: init: phi relevant? j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: init: phi relevant? .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: init: stmt relevant? _261 = j_325 + pretmp_850;

harris.cpp:272:5: note: init: stmt relevant? _262 = (long unsigned int) _261;

harris.cpp:272:5: note: init: stmt relevant? _263 = _262 * 4;

harris.cpp:272:5: note: init: stmt relevant? _264 = Sxx_36 + _263;

harris.cpp:272:5: note: init: stmt relevant? _265 = *_264;

harris.cpp:272:5: note: init: stmt relevant? _268 = Syy_40 + _263;

harris.cpp:272:5: note: init: stmt relevant? _269 = *_268;

harris.cpp:272:5: note: init: stmt relevant? trace_270 = _265 + _269;

harris.cpp:272:5: note: init: stmt relevant? _275 = _265 * _269;

harris.cpp:272:5: note: init: stmt relevant? _276 = Sxy_38 + _263;

harris.cpp:272:5: note: init: stmt relevant? _277 = *_276;

harris.cpp:272:5: note: init: stmt relevant? _278 = _277 * _277;

harris.cpp:272:5: note: init: stmt relevant? det_279 = _275 - _278;

harris.cpp:272:5: note: init: stmt relevant? _280 = _42 + _263;

harris.cpp:272:5: note: init: stmt relevant? _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: init: stmt relevant? _282 = _281 * trace_270;

harris.cpp:272:5: note: init: stmt relevant? _283 = det_279 - _282;

harris.cpp:272:5: note: init: stmt relevant? *_280 = _283;

harris.cpp:272:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: init: stmt relevant? j_285 = j_325 + 1;

harris.cpp:272:5: note: init: stmt relevant? if (C_19(D) > j_285)

harris.cpp:272:5: note: worklist: examine stmt: *_280 = _283;

harris.cpp:272:5: note: vect_is_simple_use: operand _283
harris.cpp:272:5: note: def_stmt: _283 = det_279 - _282;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: worklist: examine stmt: _283 = det_279 - _282;

harris.cpp:272:5: note: vect_is_simple_use: operand det_279
harris.cpp:272:5: note: def_stmt: det_279 = _275 - _278;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: vect_is_simple_use: operand _282
harris.cpp:272:5: note: def_stmt: _282 = _281 * trace_270;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: worklist: examine stmt: _282 = _281 * trace_270;

harris.cpp:272:5: note: vect_is_simple_use: operand _281
harris.cpp:272:5: note: def_stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: worklist: examine stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: worklist: examine stmt: _269 = *_268;

harris.cpp:272:5: note: worklist: examine stmt: _265 = *_264;

harris.cpp:272:5: note: worklist: examine stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: already marked relevant/live.
harris.cpp:272:5: note: worklist: examine stmt: det_279 = _275 - _278;

harris.cpp:272:5: note: vect_is_simple_use: operand _275
harris.cpp:272:5: note: def_stmt: _275 = _265 * _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: vect_is_simple_use: operand _278
harris.cpp:272:5: note: def_stmt: _278 = _277 * _277;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: worklist: examine stmt: _278 = _277 * _277;

harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: already marked relevant/live.
harris.cpp:272:5: note: worklist: examine stmt: _277 = *_276;

harris.cpp:272:5: note: worklist: examine stmt: _275 = _265 * _269;

harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: already marked relevant/live.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: mark relevant 4, live 0.
harris.cpp:272:5: note: already marked relevant/live.
harris.cpp:272:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _265 = *_264;
  stmt_b: _269 = *_268;
) -> no dependence
(compute_affine_dependence
  stmt_a: _265 = *_264;
  stmt_b: _277 = *_276;
) -> no dependence
(compute_affine_dependence
  stmt_a: _265 = *_264;
  stmt_b: *_280 = _283;
) -> no dependence
(compute_affine_dependence
  stmt_a: _269 = *_268;
  stmt_b: _277 = *_276;
) -> no dependence
(compute_affine_dependence
  stmt_a: _269 = *_268;
  stmt_b: *_280 = _283;
) -> no dependence
(compute_affine_dependence
  stmt_a: _277 = *_276;
  stmt_b: *_280 = _283;
) -> no dependence
(compute_affine_dependence
  stmt_a: _265 = *_264;
  stmt_b: _265 = *_264;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_5)
  (chrec_b = {8B, +, 4}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _269 = *_268;
  stmt_b: _269 = *_268;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_5)
  (chrec_b = {8B, +, 4}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _277 = *_276;
  stmt_b: _277 = *_276;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_5)
  (chrec_b = {8B, +, 4}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_280 = _283;
  stmt_b: *_280 = _283;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_5)
  (chrec_b = {8B, +, 4}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:272:5: note: === vect_determine_vectorization_factor ===
harris.cpp:272:5: note: ==> examining phi: j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: ==> examining phi: .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: ==> examining statement: _261 = j_325 + pretmp_850;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _262 = (long unsigned int) _261;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _263 = _262 * 4;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _264 = Sxx_36 + _263;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _265 = *_264;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _268 = Syy_40 + _263;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _269 = *_268;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: trace_270 = _265 + _269;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _275 = _265 * _269;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _276 = Sxy_38 + _263;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _277 = *_276;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _278 = _277 * _277;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: det_279 = _275 - _278;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _280 = _42 + _263;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _282 = _281 * trace_270;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: _283 = det_279 - _282;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: *_280 = _283;

harris.cpp:272:5: note: get vectype for scalar type:  float
harris.cpp:272:5: note: vectype: vector(4) float
harris.cpp:272:5: note: nunits = 4
harris.cpp:272:5: note: ==> examining statement: j_285 = j_325 + 1;

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: ==> examining statement: if (C_19(D) > j_285)

harris.cpp:272:5: note: skip.
harris.cpp:272:5: note: vectorization factor = 4
harris.cpp:272:5: note: === vect_analyze_data_refs_alignment ===
harris.cpp:272:5: note: vect_compute_data_ref_alignment:
harris.cpp:272:5: note: can't force alignment of ref: *_264
harris.cpp:272:5: note: vect_compute_data_ref_alignment:
harris.cpp:272:5: note: can't force alignment of ref: *_268
harris.cpp:272:5: note: vect_compute_data_ref_alignment:
harris.cpp:272:5: note: can't force alignment of ref: *_276
harris.cpp:272:5: note: vect_compute_data_ref_alignment:
harris.cpp:272:5: note: can't force alignment of ref: *_280
harris.cpp:272:5: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:272:5: note: === vect_enhance_data_refs_alignment ===
harris.cpp:272:5: note: Unknown misalignment, is_packed = 0
harris.cpp:272:5: note: Unknown misalignment, is_packed = 0
harris.cpp:272:5: note: Unknown misalignment, is_packed = 0
harris.cpp:272:5: note: Unknown misalignment, is_packed = 0
harris.cpp:272:5: note: vect_can_advance_ivs_p:
harris.cpp:272:5: note: Analyze phi: j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: Analyze phi: .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: virtual phi. skip.
harris.cpp:272:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:272:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:272:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:272:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Setting misalignment to -1.
harris.cpp:272:5: note: Alignment of access forced using peeling.
harris.cpp:272:5: note: Peeling for alignment will be applied.
harris.cpp:272:5: note: Vectorizing an unaligned access.
harris.cpp:272:5: note: Vectorizing an unaligned access.
harris.cpp:272:5: note: Vectorizing an unaligned access.
harris.cpp:272:5: note: === vect_analyze_slp ===
harris.cpp:272:5: note: === vect_make_slp_decision ===
harris.cpp:272:5: note: === vect_detect_hybrid_slp ===
harris.cpp:272:5: note: === vect_analyze_loop_operations ===
harris.cpp:272:5: note: examining phi: j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: examining phi: .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: ==> examining statement: _261 = j_325 + pretmp_850;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _262 = (long unsigned int) _261;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _263 = _262 * 4;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _264 = Sxx_36 + _263;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _265 = *_264;

harris.cpp:272:5: note: vect_is_simple_use: operand *_264
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_is_simple_use: operand *_264
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_model_load_cost: aligned.
harris.cpp:272:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _268 = Syy_40 + _263;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _269 = *_268;

harris.cpp:272:5: note: vect_is_simple_use: operand *_268
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_is_simple_use: operand *_268
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:272:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: trace_270 = _265 + _269;

harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _275 = _265 * _269;

harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _276 = Sxy_38 + _263;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _277 = *_276;

harris.cpp:272:5: note: vect_is_simple_use: operand *_276
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_is_simple_use: operand *_276
harris.cpp:272:5: note: not ssa-name.
harris.cpp:272:5: note: use not simple.
harris.cpp:272:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:272:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _278 = _277 * _277;

harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: det_279 = _275 - _278;

harris.cpp:272:5: note: vect_is_simple_use: operand _275
harris.cpp:272:5: note: def_stmt: _275 = _265 * _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _278
harris.cpp:272:5: note: def_stmt: _278 = _277 * _277;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _280 = _42 + _263;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:272:5: note: ==> examining statement: _282 = _281 * trace_270;

harris.cpp:272:5: note: vect_is_simple_use: operand _281
harris.cpp:272:5: note: def_stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: _283 = det_279 - _282;

harris.cpp:272:5: note: vect_is_simple_use: operand det_279
harris.cpp:272:5: note: def_stmt: det_279 = _275 - _278;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _282
harris.cpp:272:5: note: def_stmt: _282 = _281 * trace_270;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: === vectorizable_operation ===
harris.cpp:272:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: *_280 = _283;

harris.cpp:272:5: note: vect_is_simple_use: operand _283
harris.cpp:272:5: note: def_stmt: _283 = det_279 - _282;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:272:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:272:5: note: ==> examining statement: j_285 = j_325 + 1;

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: ==> examining statement: if (C_19(D) > j_285)

harris.cpp:272:5: note: irrelevant.
harris.cpp:272:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:272:5: note: Cost model analysis: 
  Vector inside of loop cost: 14
  Vector prologue cost: 31
  Vector epilogue cost: 22
  Scalar iteration cost: 11
  Scalar outside cost: 7
  Vector outside cost: 53
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5

harris.cpp:272:5: note:   Runtime profitability threshold = 4
harris.cpp:272:5: note:   Static estimate profitability threshold = 4
harris.cpp:272:5: note: epilog loop required
harris.cpp:272:5: note: vect_can_advance_ivs_p:
harris.cpp:272:5: note: Analyze phi: j_325 = PHI <2(39), j_285(33)>

harris.cpp:272:5: note: Analyze phi: .MEM_332 = PHI <.MEM_273(39), .MEM_284(33)>

harris.cpp:272:5: note: virtual phi. skip.
harris.cpp:272:5: note: loop vectorized
harris.cpp:272:5: note: === vec_transform_loop ===
harris.cpp:272:5: note: Profitability threshold is 4 loop iterations.
harris.cpp:272:5: note: loop peeled for vectorization to enhance alignment
harris.cpp:272:5: note: created vectp.585_60
harris.cpp:272:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.585_60 & 15) >> 2) & 3, niters.584_146>
Removing basic block 45
<bb 45>:


;; Scaling loop 9 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 5 with scale 0.777800, bounding iterations to 0 from guessed 13
;; guessed iterations are now 11

loop at harris.cpp:275: if (ivtmp_956 < prologue_after_cost_adjust.587_964)

Setting upper bound of nb iterations for prologue loop to 3
harris.cpp:272:5: note: === vect_update_inits_of_dr ===
harris.cpp:272:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 52
<bb 52>:


;; Scaling loop 5 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 10 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.cpp:272:5: note: vect_update_ivs_after_vectorizer: phi: j_325 = PHI <j_963(56), j_285(33)>

harris.cpp:272:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_332 = PHI <.MEM_961(56), .MEM_284(33)>

harris.cpp:272:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:272:5: note: ------>vectorizing phi: j_325 = PHI <j_963(60), j_285(33)>

harris.cpp:272:5: note: ------>vectorizing phi: .MEM_332 = PHI <.MEM_961(60), .MEM_284(33)>

harris.cpp:272:5: note: ------>vectorizing statement: _261 = j_325 + pretmp_850;

harris.cpp:272:5: note: ------>vectorizing statement: _262 = (long unsigned int) _261;

harris.cpp:272:5: note: ------>vectorizing statement: _263 = _262 * 4;

harris.cpp:272:5: note: ------>vectorizing statement: _264 = Sxx_36 + _263;

harris.cpp:272:5: note: ------>vectorizing statement: _265 = *_264;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: transform load. ncopies = 1
harris.cpp:272:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Sxx_36 + (sizetype) ((long unsigned int) pretmp_850 * 4)
harris.cpp:272:5: note: created vectp.594_897
harris.cpp:272:5: note: add new stmt: vect__265.595_890 = MEM[(float *)vectp.593_892];

harris.cpp:272:5: note: ------>vectorizing statement: _268 = Syy_40 + _263;

harris.cpp:272:5: note: ------>vectorizing statement: _269 = *_268;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: transform load. ncopies = 1
harris.cpp:272:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Syy_40 + (sizetype) ((long unsigned int) pretmp_850 * 4)
harris.cpp:272:5: note: created vectp.597_889
harris.cpp:272:5: note: add new stmt: vect__269.598_882 = MEM[(float *)vectp.596_884];

harris.cpp:272:5: note: ------>vectorizing statement: trace_270 = _265 + _269;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _265
harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _265
  def_stmt =  _265 = *_264;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: _269
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _269
  def_stmt =  _269 = *_268;

harris.cpp:272:5: note: add new stmt: vect_trace_270.599_881 = vect__265.595_890 + vect__269.598_882;

harris.cpp:272:5: note: ------>vectorizing statement: _275 = _265 * _269;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _265
harris.cpp:272:5: note: vect_is_simple_use: operand _265
harris.cpp:272:5: note: def_stmt: _265 = *_264;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _265
  def_stmt =  _265 = *_264;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: _269
harris.cpp:272:5: note: vect_is_simple_use: operand _269
harris.cpp:272:5: note: def_stmt: _269 = *_268;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _269
  def_stmt =  _269 = *_268;

harris.cpp:272:5: note: add new stmt: vect__275.600_880 = vect__265.595_890 * vect__269.598_882;

harris.cpp:272:5: note: ------>vectorizing statement: _276 = Sxy_38 + _263;

harris.cpp:272:5: note: ------>vectorizing statement: _277 = *_276;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: transform load. ncopies = 1
harris.cpp:272:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Sxy_38 + (sizetype) ((long unsigned int) pretmp_850 * 4)
harris.cpp:272:5: note: created vectp.602_879
harris.cpp:272:5: note: add new stmt: vect__277.603_872 = MEM[(float *)vectp.601_874];

harris.cpp:272:5: note: ------>vectorizing statement: _278 = _277 * _277;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _277
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _277
  def_stmt =  _277 = *_276;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: _277
harris.cpp:272:5: note: vect_is_simple_use: operand _277
harris.cpp:272:5: note: def_stmt: _277 = *_276;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _277
  def_stmt =  _277 = *_276;

harris.cpp:272:5: note: add new stmt: vect__278.604_871 = vect__277.603_872 * vect__277.603_872;

harris.cpp:272:5: note: ------>vectorizing statement: det_279 = _275 - _278;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _275
harris.cpp:272:5: note: def_stmt: _275 = _265 * _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _278
harris.cpp:272:5: note: def_stmt: _278 = _277 * _277;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _275
harris.cpp:272:5: note: vect_is_simple_use: operand _275
harris.cpp:272:5: note: def_stmt: _275 = _265 * _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _275
  def_stmt =  _275 = _265 * _269;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: _278
harris.cpp:272:5: note: vect_is_simple_use: operand _278
harris.cpp:272:5: note: def_stmt: _278 = _277 * _277;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _278
  def_stmt =  _278 = _277 * _277;

harris.cpp:272:5: note: add new stmt: vect_det_279.605_870 = vect__275.600_880 - vect__278.604_871;

harris.cpp:272:5: note: ------>vectorizing statement: _280 = _42 + _263;

harris.cpp:272:5: note: ------>vectorizing statement: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: trace_270
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  trace_270
  def_stmt =  trace_270 = _265 + _269;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: 3.9999999105930328369140625e-2
harris.cpp:272:5: note: vect_is_simple_use: operand 3.9999999105930328369140625e-2
harris.cpp:272:5: note: Create vector_cst. nunits = 4
harris.cpp:272:5: note: created new init_stmt: vect_cst_.607_869 = { 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2 };

harris.cpp:272:5: note: add new stmt: vect__281.606_868 = vect_trace_270.599_881 * vect_cst_.607_869;

harris.cpp:272:5: note: ------>vectorizing statement: _282 = _281 * trace_270;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _281
harris.cpp:272:5: note: def_stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _281
harris.cpp:272:5: note: vect_is_simple_use: operand _281
harris.cpp:272:5: note: def_stmt: _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _281
  def_stmt =  _281 = trace_270 * 3.9999999105930328369140625e-2;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: trace_270
harris.cpp:272:5: note: vect_is_simple_use: operand trace_270
harris.cpp:272:5: note: def_stmt: trace_270 = _265 + _269;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  trace_270
  def_stmt =  trace_270 = _265 + _269;

harris.cpp:272:5: note: add new stmt: vect__282.608_866 = vect__281.606_868 * vect_trace_270.599_881;

harris.cpp:272:5: note: ------>vectorizing statement: _283 = det_279 - _282;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand det_279
harris.cpp:272:5: note: def_stmt: det_279 = _275 - _278;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: vect_is_simple_use: operand _282
harris.cpp:272:5: note: def_stmt: _282 = _281 * trace_270;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform binary/unary operation.
harris.cpp:272:5: note: vect_get_vec_def_for_operand: det_279
harris.cpp:272:5: note: vect_is_simple_use: operand det_279
harris.cpp:272:5: note: def_stmt: det_279 = _275 - _278;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  det_279
  def_stmt =  det_279 = _275 - _278;

harris.cpp:272:5: note: vect_get_vec_def_for_operand: _282
harris.cpp:272:5: note: vect_is_simple_use: operand _282
harris.cpp:272:5: note: def_stmt: _282 = _281 * trace_270;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _282
  def_stmt =  _282 = _281 * trace_270;

harris.cpp:272:5: note: add new stmt: vect__283.609_865 = vect_det_279.605_870 - vect__282.608_866;

harris.cpp:272:5: note: ------>vectorizing statement: *_280 = _283;

harris.cpp:272:5: note: transform statement.
harris.cpp:272:5: note: vect_is_simple_use: operand _283
harris.cpp:272:5: note: def_stmt: _283 = det_279 - _282;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: transform store. ncopies = 1
harris.cpp:272:5: note: vect_get_vec_def_for_operand: _283
harris.cpp:272:5: note: vect_is_simple_use: operand _283
harris.cpp:272:5: note: def_stmt: _283 = det_279 - _282;

harris.cpp:272:5: note: type of def: 3.
harris.cpp:272:5: note: def =  _283
  def_stmt =  _283 = det_279 - _282;

harris.cpp:272:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *(float *) _42 + (sizetype) ((long unsigned int) pretmp_850 * 4)
harris.cpp:272:5: note: created vectp.611_864
harris.cpp:272:5: note: add new stmt: MEM[(float *)vectp.610_859] = vect__283.609_865;

harris.cpp:272:5: note: ------>vectorizing statement: j_285 = j_325 + 1;

harris.cpp:272:5: note: ------>vectorizing statement: vectp.593_891 = vectp.593_892 + 16;

harris.cpp:272:5: note: ------>vectorizing statement: vectp.596_883 = vectp.596_884 + 16;

harris.cpp:272:5: note: ------>vectorizing statement: vectp.601_873 = vectp.601_874 + 16;

harris.cpp:272:5: note: ------>vectorizing statement: vectp.610_858 = vectp.610_859 + 16;

harris.cpp:272:5: note: ------>vectorizing statement: if (C_19(D) > j_285)


loop at harris.cpp:275: if (ivtmp_856 < bnd.590_953)

;; Scaling loop 5 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
harris.cpp:272:5: note: LOOP VECTORIZED


Analyzing loop at harris.cpp:236
harris.cpp:236:3: note: ===== analyze_loop_nest =====
harris.cpp:236:3: note: === vect_analyze_loop_form ===
harris.cpp:236:3: note: ===== analyze_loop_nest_1 =====
harris.cpp:236:3: note: === vect_analyze_loop_form ===
harris.cpp:236:3: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [3, + , 1](no_overflow) < C_19(D)
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) C_19(D) + 4294967293, bounded by 2147483644
harris.cpp:236:3: note: Symbolic number of iterations is (unsigned int) C_19(D) + 4294967294
harris.cpp:236:3: note: not vectorized: control flow in loop.
harris.cpp:236:3: note: bad loop form.

Analyzing loop at harris.cpp:237
harris.cpp:237:5: note: ===== analyze_loop_nest =====
harris.cpp:237:5: note: === vect_analyze_loop_form ===
harris.cpp:237:5: note: === get_loop_niters ===
harris.cpp:237:5: note: Symbolic number of iterations is (unsigned int) C_19(D) + 4294967294
harris.cpp:237:5: note: === vect_analyze_data_refs ===
Creating dr for *_151
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_156
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_163
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_169
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_172
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_178
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_186
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_192
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_198
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_144
analyze_innermost: success.
	base_address: Syy_40 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Syy_40 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_203
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_205
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_208
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_211
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_214
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_217
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_220
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_223
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_226
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_202
analyze_innermost: success.
	base_address: Sxy_38 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Sxy_38 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_231
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_233
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_236
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_239
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_242
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_245
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_248
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {4B, +, 4}_6
Creating dr for *_251
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {8B, +, 4}_6
Creating dr for *_254
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	offset from base address: 0
	constant offset from base address: 12
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
	Access function 0: {12B, +, 4}_6
Creating dr for *_230
analyze_innermost: success.
	base_address: Sxx_36 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *Sxx_36 + (sizetype) ((long unsigned int) pretmp_734 * 4)
	Access function 0: {8B, +, 4}_6
harris.cpp:237:5: note: got vectype for stmt: _152 = *_151;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _157 = *_156;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _164 = *_163;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _170 = *_169;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _173 = *_172;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _179 = *_178;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _187 = *_186;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _193 = *_192;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _199 = *_198;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: *_144 = _200;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _204 = *_203;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _206 = *_205;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _209 = *_208;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _212 = *_211;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _215 = *_214;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _218 = *_217;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _221 = *_220;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _224 = *_223;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _227 = *_226;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: *_202 = _228;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _232 = *_231;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _234 = *_233;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _237 = *_236;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _240 = *_239;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _243 = *_242;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _246 = *_245;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _249 = *_248;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _252 = *_251;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: _255 = *_254;
vector(4) float
harris.cpp:237:5: note: got vectype for stmt: *_230 = _256;
vector(4) float
harris.cpp:237:5: note: === vect_analyze_scalar_cycles ===
harris.cpp:237:5: note: Analyze phi: j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: Access function of PHI: {2, +, 1}_6
harris.cpp:237:5: note: step: 1,  init: 2
harris.cpp:237:5: note: Detected induction.
harris.cpp:237:5: note: Analyze phi: .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: === vect_pattern_recog ===
harris.cpp:237:5: note: vect_is_simple_use: operand _142
harris.cpp:237:5: note: def_stmt: _142 = (long unsigned int) _141;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _141
harris.cpp:237:5: note: def_stmt: _141 = j_323 + pretmp_734;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _149
harris.cpp:237:5: note: def_stmt: _149 = (long unsigned int) _148;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _148
harris.cpp:237:5: note: def_stmt: _148 = _147 + pretmp_739;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _154
harris.cpp:237:5: note: def_stmt: _154 = (long unsigned int) _153;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _153
harris.cpp:237:5: note: def_stmt: _153 = j_323 + pretmp_739;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _161
harris.cpp:237:5: note: def_stmt: _161 = (long unsigned int) _160;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _160
harris.cpp:237:5: note: def_stmt: _160 = j_159 + pretmp_739;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _167
harris.cpp:237:5: note: def_stmt: _167 = (long unsigned int) _166;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _166
harris.cpp:237:5: note: def_stmt: _166 = _147 + pretmp_734;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _176
harris.cpp:237:5: note: def_stmt: _176 = (long unsigned int) _175;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _175
harris.cpp:237:5: note: def_stmt: _175 = j_159 + pretmp_734;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _184
harris.cpp:237:5: note: def_stmt: _184 = (long unsigned int) _183;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _183
harris.cpp:237:5: note: def_stmt: _183 = _147 + pretmp_750;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _190
harris.cpp:237:5: note: def_stmt: _190 = (long unsigned int) _189;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _189
harris.cpp:237:5: note: def_stmt: _189 = j_323 + pretmp_750;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: vect_is_simple_use: operand _196
harris.cpp:237:5: note: def_stmt: _196 = (long unsigned int) _195;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _195
harris.cpp:237:5: note: def_stmt: _195 = j_159 + pretmp_750;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand 4
harris.cpp:237:5: note: === vect_analyze_data_ref_accesses ===
harris.cpp:237:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:237:5: note: init: phi relevant? j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: init: phi relevant? .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: init: stmt relevant? _141 = j_323 + pretmp_734;

harris.cpp:237:5: note: init: stmt relevant? _142 = (long unsigned int) _141;

harris.cpp:237:5: note: init: stmt relevant? _143 = _142 * 4;

harris.cpp:237:5: note: init: stmt relevant? _144 = Syy_40 + _143;

harris.cpp:237:5: note: init: stmt relevant? _147 = j_323 + -1;

harris.cpp:237:5: note: init: stmt relevant? _148 = _147 + pretmp_739;

harris.cpp:237:5: note: init: stmt relevant? _149 = (long unsigned int) _148;

harris.cpp:237:5: note: init: stmt relevant? _150 = _149 * 4;

harris.cpp:237:5: note: init: stmt relevant? _151 = Iyy_34 + _150;

harris.cpp:237:5: note: init: stmt relevant? _152 = *_151;

harris.cpp:237:5: note: init: stmt relevant? _153 = j_323 + pretmp_739;

harris.cpp:237:5: note: init: stmt relevant? _154 = (long unsigned int) _153;

harris.cpp:237:5: note: init: stmt relevant? _155 = _154 * 4;

harris.cpp:237:5: note: init: stmt relevant? _156 = Iyy_34 + _155;

harris.cpp:237:5: note: init: stmt relevant? _157 = *_156;

harris.cpp:237:5: note: init: stmt relevant? _158 = _152 + _157;

harris.cpp:237:5: note: init: stmt relevant? j_159 = j_323 + 1;

harris.cpp:237:5: note: init: stmt relevant? _160 = j_159 + pretmp_739;

harris.cpp:237:5: note: init: stmt relevant? _161 = (long unsigned int) _160;

harris.cpp:237:5: note: init: stmt relevant? _162 = _161 * 4;

harris.cpp:237:5: note: init: stmt relevant? _163 = Iyy_34 + _162;

harris.cpp:237:5: note: init: stmt relevant? _164 = *_163;

harris.cpp:237:5: note: init: stmt relevant? _165 = _158 + _164;

harris.cpp:237:5: note: init: stmt relevant? _166 = _147 + pretmp_734;

harris.cpp:237:5: note: init: stmt relevant? _167 = (long unsigned int) _166;

harris.cpp:237:5: note: init: stmt relevant? _168 = _167 * 4;

harris.cpp:237:5: note: init: stmt relevant? _169 = Iyy_34 + _168;

harris.cpp:237:5: note: init: stmt relevant? _170 = *_169;

harris.cpp:237:5: note: init: stmt relevant? _171 = _165 + _170;

harris.cpp:237:5: note: init: stmt relevant? _172 = Iyy_34 + _143;

harris.cpp:237:5: note: init: stmt relevant? _173 = *_172;

harris.cpp:237:5: note: init: stmt relevant? _174 = _171 + _173;

harris.cpp:237:5: note: init: stmt relevant? _175 = j_159 + pretmp_734;

harris.cpp:237:5: note: init: stmt relevant? _176 = (long unsigned int) _175;

harris.cpp:237:5: note: init: stmt relevant? _177 = _176 * 4;

harris.cpp:237:5: note: init: stmt relevant? _178 = Iyy_34 + _177;

harris.cpp:237:5: note: init: stmt relevant? _179 = *_178;

harris.cpp:237:5: note: init: stmt relevant? _180 = _174 + _179;

harris.cpp:237:5: note: init: stmt relevant? _183 = _147 + pretmp_750;

harris.cpp:237:5: note: init: stmt relevant? _184 = (long unsigned int) _183;

harris.cpp:237:5: note: init: stmt relevant? _185 = _184 * 4;

harris.cpp:237:5: note: init: stmt relevant? _186 = Iyy_34 + _185;

harris.cpp:237:5: note: init: stmt relevant? _187 = *_186;

harris.cpp:237:5: note: init: stmt relevant? _188 = _180 + _187;

harris.cpp:237:5: note: init: stmt relevant? _189 = j_323 + pretmp_750;

harris.cpp:237:5: note: init: stmt relevant? _190 = (long unsigned int) _189;

harris.cpp:237:5: note: init: stmt relevant? _191 = _190 * 4;

harris.cpp:237:5: note: init: stmt relevant? _192 = Iyy_34 + _191;

harris.cpp:237:5: note: init: stmt relevant? _193 = *_192;

harris.cpp:237:5: note: init: stmt relevant? _194 = _188 + _193;

harris.cpp:237:5: note: init: stmt relevant? _195 = j_159 + pretmp_750;

harris.cpp:237:5: note: init: stmt relevant? _196 = (long unsigned int) _195;

harris.cpp:237:5: note: init: stmt relevant? _197 = _196 * 4;

harris.cpp:237:5: note: init: stmt relevant? _198 = Iyy_34 + _197;

harris.cpp:237:5: note: init: stmt relevant? _199 = *_198;

harris.cpp:237:5: note: init: stmt relevant? _200 = _194 + _199;

harris.cpp:237:5: note: init: stmt relevant? *_144 = _200;

harris.cpp:237:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: init: stmt relevant? _202 = Sxy_38 + _143;

harris.cpp:237:5: note: init: stmt relevant? _203 = Ixy_32 + _150;

harris.cpp:237:5: note: init: stmt relevant? _204 = *_203;

harris.cpp:237:5: note: init: stmt relevant? _205 = Ixy_32 + _155;

harris.cpp:237:5: note: init: stmt relevant? _206 = *_205;

harris.cpp:237:5: note: init: stmt relevant? _207 = _204 + _206;

harris.cpp:237:5: note: init: stmt relevant? _208 = Ixy_32 + _162;

harris.cpp:237:5: note: init: stmt relevant? _209 = *_208;

harris.cpp:237:5: note: init: stmt relevant? _210 = _207 + _209;

harris.cpp:237:5: note: init: stmt relevant? _211 = Ixy_32 + _168;

harris.cpp:237:5: note: init: stmt relevant? _212 = *_211;

harris.cpp:237:5: note: init: stmt relevant? _213 = _210 + _212;

harris.cpp:237:5: note: init: stmt relevant? _214 = Ixy_32 + _143;

harris.cpp:237:5: note: init: stmt relevant? _215 = *_214;

harris.cpp:237:5: note: init: stmt relevant? _216 = _213 + _215;

harris.cpp:237:5: note: init: stmt relevant? _217 = Ixy_32 + _177;

harris.cpp:237:5: note: init: stmt relevant? _218 = *_217;

harris.cpp:237:5: note: init: stmt relevant? _219 = _216 + _218;

harris.cpp:237:5: note: init: stmt relevant? _220 = Ixy_32 + _185;

harris.cpp:237:5: note: init: stmt relevant? _221 = *_220;

harris.cpp:237:5: note: init: stmt relevant? _222 = _219 + _221;

harris.cpp:237:5: note: init: stmt relevant? _223 = Ixy_32 + _191;

harris.cpp:237:5: note: init: stmt relevant? _224 = *_223;

harris.cpp:237:5: note: init: stmt relevant? _225 = _222 + _224;

harris.cpp:237:5: note: init: stmt relevant? _226 = Ixy_32 + _197;

harris.cpp:237:5: note: init: stmt relevant? _227 = *_226;

harris.cpp:237:5: note: init: stmt relevant? _228 = _225 + _227;

harris.cpp:237:5: note: init: stmt relevant? *_202 = _228;

harris.cpp:237:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: init: stmt relevant? _230 = Sxx_36 + _143;

harris.cpp:237:5: note: init: stmt relevant? _231 = Ixx_30 + _150;

harris.cpp:237:5: note: init: stmt relevant? _232 = *_231;

harris.cpp:237:5: note: init: stmt relevant? _233 = Ixx_30 + _155;

harris.cpp:237:5: note: init: stmt relevant? _234 = *_233;

harris.cpp:237:5: note: init: stmt relevant? _235 = _232 + _234;

harris.cpp:237:5: note: init: stmt relevant? _236 = Ixx_30 + _162;

harris.cpp:237:5: note: init: stmt relevant? _237 = *_236;

harris.cpp:237:5: note: init: stmt relevant? _238 = _235 + _237;

harris.cpp:237:5: note: init: stmt relevant? _239 = Ixx_30 + _168;

harris.cpp:237:5: note: init: stmt relevant? _240 = *_239;

harris.cpp:237:5: note: init: stmt relevant? _241 = _238 + _240;

harris.cpp:237:5: note: init: stmt relevant? _242 = Ixx_30 + _143;

harris.cpp:237:5: note: init: stmt relevant? _243 = *_242;

harris.cpp:237:5: note: init: stmt relevant? _244 = _241 + _243;

harris.cpp:237:5: note: init: stmt relevant? _245 = Ixx_30 + _177;

harris.cpp:237:5: note: init: stmt relevant? _246 = *_245;

harris.cpp:237:5: note: init: stmt relevant? _247 = _244 + _246;

harris.cpp:237:5: note: init: stmt relevant? _248 = Ixx_30 + _185;

harris.cpp:237:5: note: init: stmt relevant? _249 = *_248;

harris.cpp:237:5: note: init: stmt relevant? _250 = _247 + _249;

harris.cpp:237:5: note: init: stmt relevant? _251 = Ixx_30 + _191;

harris.cpp:237:5: note: init: stmt relevant? _252 = *_251;

harris.cpp:237:5: note: init: stmt relevant? _253 = _250 + _252;

harris.cpp:237:5: note: init: stmt relevant? _254 = Ixx_30 + _197;

harris.cpp:237:5: note: init: stmt relevant? _255 = *_254;

harris.cpp:237:5: note: init: stmt relevant? _256 = _253 + _255;

harris.cpp:237:5: note: init: stmt relevant? *_230 = _256;

harris.cpp:237:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: init: stmt relevant? if (C_19(D) > j_159)

harris.cpp:237:5: note: worklist: examine stmt: *_230 = _256;

harris.cpp:237:5: note: vect_is_simple_use: operand _256
harris.cpp:237:5: note: def_stmt: _256 = _253 + _255;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _256 = _253 + _255;

harris.cpp:237:5: note: vect_is_simple_use: operand _253
harris.cpp:237:5: note: def_stmt: _253 = _250 + _252;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _255
harris.cpp:237:5: note: def_stmt: _255 = *_254;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _255 = *_254;

harris.cpp:237:5: note: worklist: examine stmt: _253 = _250 + _252;

harris.cpp:237:5: note: vect_is_simple_use: operand _250
harris.cpp:237:5: note: def_stmt: _250 = _247 + _249;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _252
harris.cpp:237:5: note: def_stmt: _252 = *_251;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _252 = *_251;

harris.cpp:237:5: note: worklist: examine stmt: _250 = _247 + _249;

harris.cpp:237:5: note: vect_is_simple_use: operand _247
harris.cpp:237:5: note: def_stmt: _247 = _244 + _246;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _249
harris.cpp:237:5: note: def_stmt: _249 = *_248;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _249 = *_248;

harris.cpp:237:5: note: worklist: examine stmt: _247 = _244 + _246;

harris.cpp:237:5: note: vect_is_simple_use: operand _244
harris.cpp:237:5: note: def_stmt: _244 = _241 + _243;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _246
harris.cpp:237:5: note: def_stmt: _246 = *_245;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _246 = *_245;

harris.cpp:237:5: note: worklist: examine stmt: _244 = _241 + _243;

harris.cpp:237:5: note: vect_is_simple_use: operand _241
harris.cpp:237:5: note: def_stmt: _241 = _238 + _240;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _243
harris.cpp:237:5: note: def_stmt: _243 = *_242;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _243 = *_242;

harris.cpp:237:5: note: worklist: examine stmt: _241 = _238 + _240;

harris.cpp:237:5: note: vect_is_simple_use: operand _238
harris.cpp:237:5: note: def_stmt: _238 = _235 + _237;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _240
harris.cpp:237:5: note: def_stmt: _240 = *_239;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _240 = *_239;

harris.cpp:237:5: note: worklist: examine stmt: _238 = _235 + _237;

harris.cpp:237:5: note: vect_is_simple_use: operand _235
harris.cpp:237:5: note: def_stmt: _235 = _232 + _234;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _237
harris.cpp:237:5: note: def_stmt: _237 = *_236;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _237 = *_236;

harris.cpp:237:5: note: worklist: examine stmt: _235 = _232 + _234;

harris.cpp:237:5: note: vect_is_simple_use: operand _232
harris.cpp:237:5: note: def_stmt: _232 = *_231;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _234
harris.cpp:237:5: note: def_stmt: _234 = *_233;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _234 = *_233;

harris.cpp:237:5: note: worklist: examine stmt: _232 = *_231;

harris.cpp:237:5: note: worklist: examine stmt: *_202 = _228;

harris.cpp:237:5: note: vect_is_simple_use: operand _228
harris.cpp:237:5: note: def_stmt: _228 = _225 + _227;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _228 = _225 + _227;

harris.cpp:237:5: note: vect_is_simple_use: operand _225
harris.cpp:237:5: note: def_stmt: _225 = _222 + _224;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _227
harris.cpp:237:5: note: def_stmt: _227 = *_226;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _227 = *_226;

harris.cpp:237:5: note: worklist: examine stmt: _225 = _222 + _224;

harris.cpp:237:5: note: vect_is_simple_use: operand _222
harris.cpp:237:5: note: def_stmt: _222 = _219 + _221;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _224
harris.cpp:237:5: note: def_stmt: _224 = *_223;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _224 = *_223;

harris.cpp:237:5: note: worklist: examine stmt: _222 = _219 + _221;

harris.cpp:237:5: note: vect_is_simple_use: operand _219
harris.cpp:237:5: note: def_stmt: _219 = _216 + _218;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _221
harris.cpp:237:5: note: def_stmt: _221 = *_220;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _221 = *_220;

harris.cpp:237:5: note: worklist: examine stmt: _219 = _216 + _218;

harris.cpp:237:5: note: vect_is_simple_use: operand _216
harris.cpp:237:5: note: def_stmt: _216 = _213 + _215;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _218
harris.cpp:237:5: note: def_stmt: _218 = *_217;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _218 = *_217;

harris.cpp:237:5: note: worklist: examine stmt: _216 = _213 + _215;

harris.cpp:237:5: note: vect_is_simple_use: operand _213
harris.cpp:237:5: note: def_stmt: _213 = _210 + _212;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _215
harris.cpp:237:5: note: def_stmt: _215 = *_214;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _215 = *_214;

harris.cpp:237:5: note: worklist: examine stmt: _213 = _210 + _212;

harris.cpp:237:5: note: vect_is_simple_use: operand _210
harris.cpp:237:5: note: def_stmt: _210 = _207 + _209;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _212
harris.cpp:237:5: note: def_stmt: _212 = *_211;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _212 = *_211;

harris.cpp:237:5: note: worklist: examine stmt: _210 = _207 + _209;

harris.cpp:237:5: note: vect_is_simple_use: operand _207
harris.cpp:237:5: note: def_stmt: _207 = _204 + _206;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _209
harris.cpp:237:5: note: def_stmt: _209 = *_208;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _209 = *_208;

harris.cpp:237:5: note: worklist: examine stmt: _207 = _204 + _206;

harris.cpp:237:5: note: vect_is_simple_use: operand _204
harris.cpp:237:5: note: def_stmt: _204 = *_203;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _206
harris.cpp:237:5: note: def_stmt: _206 = *_205;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _206 = *_205;

harris.cpp:237:5: note: worklist: examine stmt: _204 = *_203;

harris.cpp:237:5: note: worklist: examine stmt: *_144 = _200;

harris.cpp:237:5: note: vect_is_simple_use: operand _200
harris.cpp:237:5: note: def_stmt: _200 = _194 + _199;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _200 = _194 + _199;

harris.cpp:237:5: note: vect_is_simple_use: operand _194
harris.cpp:237:5: note: def_stmt: _194 = _188 + _193;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _199
harris.cpp:237:5: note: def_stmt: _199 = *_198;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _199 = *_198;

harris.cpp:237:5: note: worklist: examine stmt: _194 = _188 + _193;

harris.cpp:237:5: note: vect_is_simple_use: operand _188
harris.cpp:237:5: note: def_stmt: _188 = _180 + _187;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _193
harris.cpp:237:5: note: def_stmt: _193 = *_192;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _193 = *_192;

harris.cpp:237:5: note: worklist: examine stmt: _188 = _180 + _187;

harris.cpp:237:5: note: vect_is_simple_use: operand _180
harris.cpp:237:5: note: def_stmt: _180 = _174 + _179;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _187
harris.cpp:237:5: note: def_stmt: _187 = *_186;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _187 = *_186;

harris.cpp:237:5: note: worklist: examine stmt: _180 = _174 + _179;

harris.cpp:237:5: note: vect_is_simple_use: operand _174
harris.cpp:237:5: note: def_stmt: _174 = _171 + _173;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _179
harris.cpp:237:5: note: def_stmt: _179 = *_178;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _179 = *_178;

harris.cpp:237:5: note: worklist: examine stmt: _174 = _171 + _173;

harris.cpp:237:5: note: vect_is_simple_use: operand _171
harris.cpp:237:5: note: def_stmt: _171 = _165 + _170;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _173
harris.cpp:237:5: note: def_stmt: _173 = *_172;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _173 = *_172;

harris.cpp:237:5: note: worklist: examine stmt: _171 = _165 + _170;

harris.cpp:237:5: note: vect_is_simple_use: operand _165
harris.cpp:237:5: note: def_stmt: _165 = _158 + _164;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _170
harris.cpp:237:5: note: def_stmt: _170 = *_169;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _170 = *_169;

harris.cpp:237:5: note: worklist: examine stmt: _165 = _158 + _164;

harris.cpp:237:5: note: vect_is_simple_use: operand _158
harris.cpp:237:5: note: def_stmt: _158 = _152 + _157;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _164
harris.cpp:237:5: note: def_stmt: _164 = *_163;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _164 = *_163;

harris.cpp:237:5: note: worklist: examine stmt: _158 = _152 + _157;

harris.cpp:237:5: note: vect_is_simple_use: operand _152
harris.cpp:237:5: note: def_stmt: _152 = *_151;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: vect_is_simple_use: operand _157
harris.cpp:237:5: note: def_stmt: _157 = *_156;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: mark relevant 4, live 0.
harris.cpp:237:5: note: worklist: examine stmt: _157 = *_156;

harris.cpp:237:5: note: worklist: examine stmt: _152 = *_151;

harris.cpp:237:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _157 = *_156;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _164 = *_163;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _170 = *_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _173 = *_172;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _179 = *_178;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _164 = *_163;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _170 = *_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _173 = *_172;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _179 = *_178;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _170 = *_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _173 = *_172;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _179 = *_178;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _173 = *_172;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _179 = *_178;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _179 = *_178;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _187 = *_186;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _193 = *_192;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _199 = *_198;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _193 = *_192;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _199 = *_198;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _199 = *_198;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: *_144 = _200;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _204 = *_203;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _206 = *_205;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _209 = *_208;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _212 = *_211;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _215 = *_214;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _218 = *_217;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _221 = *_220;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _224 = *_223;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _227 = *_226;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _206 = *_205;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _209 = *_208;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _212 = *_211;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _215 = *_214;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _218 = *_217;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _209 = *_208;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _212 = *_211;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _215 = *_214;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _218 = *_217;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _212 = *_211;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _215 = *_214;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _218 = *_217;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _215 = *_214;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _218 = *_217;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _218 = *_217;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _221 = *_220;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _224 = *_223;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _227 = *_226;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _224 = *_223;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _227 = *_226;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _227 = *_226;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: *_202 = _228;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _232 = *_231;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _234 = *_233;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _237 = *_236;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _240 = *_239;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _243 = *_242;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _246 = *_245;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _249 = *_248;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _252 = *_251;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: _255 = *_254;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _234 = *_233;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _237 = *_236;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _240 = *_239;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _243 = *_242;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _246 = *_245;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _237 = *_236;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _240 = *_239;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _243 = *_242;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _246 = *_245;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _240 = *_239;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _243 = *_242;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _246 = *_245;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _243 = *_242;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _246 = *_245;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _246 = *_245;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _246 = *_245;
  stmt_b: _249 = *_248;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _246 = *_245;
  stmt_b: _252 = *_251;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _246 = *_245;
  stmt_b: _255 = *_254;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _246 = *_245;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _249 = *_248;
  stmt_b: _252 = *_251;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _249 = *_248;
  stmt_b: _255 = *_254;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _249 = *_248;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _252 = *_251;
  stmt_b: _255 = *_254;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _252 = *_251;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _255 = *_254;
  stmt_b: *_230 = _256;
) -> no dependence
(compute_affine_dependence
  stmt_a: _152 = *_151;
  stmt_b: _152 = *_151;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _157 = *_156;
  stmt_b: _157 = *_156;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _164 = *_163;
  stmt_b: _164 = *_163;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _170 = *_169;
  stmt_b: _170 = *_169;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _173 = *_172;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _179 = *_178;
  stmt_b: _179 = *_178;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _187 = *_186;
  stmt_b: _187 = *_186;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _193 = *_192;
  stmt_b: _193 = *_192;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _199 = *_198;
  stmt_b: _199 = *_198;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_144 = _200;
  stmt_b: *_144 = _200;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _204 = *_203;
  stmt_b: _204 = *_203;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _206 = *_205;
  stmt_b: _206 = *_205;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _209 = *_208;
  stmt_b: _209 = *_208;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _212 = *_211;
  stmt_b: _212 = *_211;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _215 = *_214;
  stmt_b: _215 = *_214;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _218 = *_217;
  stmt_b: _218 = *_217;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _221 = *_220;
  stmt_b: _221 = *_220;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _224 = *_223;
  stmt_b: _224 = *_223;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _227 = *_226;
  stmt_b: _227 = *_226;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_202 = _228;
  stmt_b: *_202 = _228;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _232 = *_231;
  stmt_b: _232 = *_231;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _234 = *_233;
  stmt_b: _234 = *_233;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _237 = *_236;
  stmt_b: _237 = *_236;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _240 = *_239;
  stmt_b: _240 = *_239;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _243 = *_242;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _246 = *_245;
  stmt_b: _246 = *_245;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _249 = *_248;
  stmt_b: _249 = *_248;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_6)
  (chrec_b = {4B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _252 = *_251;
  stmt_b: _252 = *_251;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _255 = *_254;
  stmt_b: _255 = *_254;
(analyze_overlapping_iterations 
  (chrec_a = {12B, +, 4}_6)
  (chrec_b = {12B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_230 = _256;
  stmt_b: *_230 = _256;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_6)
  (chrec_b = {8B, +, 4}_6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:237:5: note: === vect_determine_vectorization_factor ===
harris.cpp:237:5: note: ==> examining phi: j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: ==> examining phi: .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: ==> examining statement: _141 = j_323 + pretmp_734;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _142 = (long unsigned int) _141;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _143 = _142 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _144 = Syy_40 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _147 = j_323 + -1;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _148 = _147 + pretmp_739;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _149 = (long unsigned int) _148;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _150 = _149 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _151 = Iyy_34 + _150;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _152 = *_151;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _153 = j_323 + pretmp_739;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _154 = (long unsigned int) _153;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _155 = _154 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _156 = Iyy_34 + _155;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _157 = *_156;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _158 = _152 + _157;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: j_159 = j_323 + 1;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _160 = j_159 + pretmp_739;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _161 = (long unsigned int) _160;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _162 = _161 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _163 = Iyy_34 + _162;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _164 = *_163;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _165 = _158 + _164;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _166 = _147 + pretmp_734;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _167 = (long unsigned int) _166;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _168 = _167 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _169 = Iyy_34 + _168;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _170 = *_169;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _171 = _165 + _170;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _172 = Iyy_34 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _173 = *_172;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _174 = _171 + _173;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _175 = j_159 + pretmp_734;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _176 = (long unsigned int) _175;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _177 = _176 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _178 = Iyy_34 + _177;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _179 = *_178;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _180 = _174 + _179;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _183 = _147 + pretmp_750;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _184 = (long unsigned int) _183;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _185 = _184 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _186 = Iyy_34 + _185;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _187 = *_186;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _188 = _180 + _187;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _189 = j_323 + pretmp_750;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _190 = (long unsigned int) _189;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _191 = _190 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _192 = Iyy_34 + _191;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _193 = *_192;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _194 = _188 + _193;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _195 = j_159 + pretmp_750;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _196 = (long unsigned int) _195;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _197 = _196 * 4;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _198 = Iyy_34 + _197;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _199 = *_198;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _200 = _194 + _199;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: *_144 = _200;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _202 = Sxy_38 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _203 = Ixy_32 + _150;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _204 = *_203;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _205 = Ixy_32 + _155;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _206 = *_205;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _207 = _204 + _206;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _208 = Ixy_32 + _162;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _209 = *_208;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _210 = _207 + _209;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _211 = Ixy_32 + _168;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _212 = *_211;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _213 = _210 + _212;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _214 = Ixy_32 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _215 = *_214;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _216 = _213 + _215;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _217 = Ixy_32 + _177;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _218 = *_217;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _219 = _216 + _218;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _220 = Ixy_32 + _185;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _221 = *_220;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _222 = _219 + _221;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _223 = Ixy_32 + _191;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _224 = *_223;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _225 = _222 + _224;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _226 = Ixy_32 + _197;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _227 = *_226;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _228 = _225 + _227;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: *_202 = _228;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _230 = Sxx_36 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _231 = Ixx_30 + _150;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _232 = *_231;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _233 = Ixx_30 + _155;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _234 = *_233;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _235 = _232 + _234;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _236 = Ixx_30 + _162;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _237 = *_236;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _238 = _235 + _237;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _239 = Ixx_30 + _168;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _240 = *_239;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _241 = _238 + _240;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _242 = Ixx_30 + _143;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _243 = *_242;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _244 = _241 + _243;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _245 = Ixx_30 + _177;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _246 = *_245;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _247 = _244 + _246;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _248 = Ixx_30 + _185;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _249 = *_248;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _250 = _247 + _249;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _251 = Ixx_30 + _191;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _252 = *_251;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _253 = _250 + _252;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _254 = Ixx_30 + _197;

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: ==> examining statement: _255 = *_254;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: _256 = _253 + _255;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: *_230 = _256;

harris.cpp:237:5: note: get vectype for scalar type:  float
harris.cpp:237:5: note: vectype: vector(4) float
harris.cpp:237:5: note: nunits = 4
harris.cpp:237:5: note: ==> examining statement: if (C_19(D) > j_159)

harris.cpp:237:5: note: skip.
harris.cpp:237:5: note: vectorization factor = 4
harris.cpp:237:5: note: === vect_analyze_data_refs_alignment ===
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: dependence distance  = 2.
harris.cpp:237:5: note: dependence distance  = 1.
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_151
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_156
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_163
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_169
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_172
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_178
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_186
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_192
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_198
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_144
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_203
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_205
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_208
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_211
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_214
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_217
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_220
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_223
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_226
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_202
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_231
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_233
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_236
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_239
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_242
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_245
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_248
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_251
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_254
harris.cpp:237:5: note: vect_compute_data_ref_alignment:
harris.cpp:237:5: note: can't force alignment of ref: *_230
harris.cpp:237:5: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:237:5: note: === vect_enhance_data_refs_alignment ===
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: Unknown misalignment, is_packed = 0
harris.cpp:237:5: note: vect_can_advance_ivs_p:
harris.cpp:237:5: note: Analyze phi: j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: Analyze phi: .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: virtual phi. skip.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:237:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Setting misalignment to -1.
harris.cpp:237:5: note: Alignment of access forced using peeling.
harris.cpp:237:5: note: Peeling for alignment will be applied.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: Vectorizing an unaligned access.
harris.cpp:237:5: note: === vect_analyze_slp ===
harris.cpp:237:5: note: === vect_make_slp_decision ===
harris.cpp:237:5: note: === vect_detect_hybrid_slp ===
harris.cpp:237:5: note: === vect_analyze_loop_operations ===
harris.cpp:237:5: note: examining phi: j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: examining phi: .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: ==> examining statement: _141 = j_323 + pretmp_734;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _142 = (long unsigned int) _141;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _143 = _142 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _144 = Syy_40 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _147 = j_323 + -1;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _148 = _147 + pretmp_739;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _149 = (long unsigned int) _148;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _150 = _149 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _151 = Iyy_34 + _150;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _152 = *_151;

harris.cpp:237:5: note: vect_is_simple_use: operand *_151
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_151
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: aligned.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _153 = j_323 + pretmp_739;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _154 = (long unsigned int) _153;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _155 = _154 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _156 = Iyy_34 + _155;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _157 = *_156;

harris.cpp:237:5: note: vect_is_simple_use: operand *_156
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_156
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _158 = _152 + _157;

harris.cpp:237:5: note: vect_is_simple_use: operand _152
harris.cpp:237:5: note: def_stmt: _152 = *_151;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _157
harris.cpp:237:5: note: def_stmt: _157 = *_156;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: j_159 = j_323 + 1;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _160 = j_159 + pretmp_739;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _161 = (long unsigned int) _160;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _162 = _161 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _163 = Iyy_34 + _162;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _164 = *_163;

harris.cpp:237:5: note: vect_is_simple_use: operand *_163
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_163
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _165 = _158 + _164;

harris.cpp:237:5: note: vect_is_simple_use: operand _158
harris.cpp:237:5: note: def_stmt: _158 = _152 + _157;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _164
harris.cpp:237:5: note: def_stmt: _164 = *_163;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _166 = _147 + pretmp_734;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _167 = (long unsigned int) _166;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _168 = _167 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _169 = Iyy_34 + _168;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _170 = *_169;

harris.cpp:237:5: note: vect_is_simple_use: operand *_169
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_169
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _171 = _165 + _170;

harris.cpp:237:5: note: vect_is_simple_use: operand _165
harris.cpp:237:5: note: def_stmt: _165 = _158 + _164;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _170
harris.cpp:237:5: note: def_stmt: _170 = *_169;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _172 = Iyy_34 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _173 = *_172;

harris.cpp:237:5: note: vect_is_simple_use: operand *_172
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_172
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _174 = _171 + _173;

harris.cpp:237:5: note: vect_is_simple_use: operand _171
harris.cpp:237:5: note: def_stmt: _171 = _165 + _170;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _173
harris.cpp:237:5: note: def_stmt: _173 = *_172;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _175 = j_159 + pretmp_734;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _176 = (long unsigned int) _175;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _177 = _176 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _178 = Iyy_34 + _177;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _179 = *_178;

harris.cpp:237:5: note: vect_is_simple_use: operand *_178
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_178
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _180 = _174 + _179;

harris.cpp:237:5: note: vect_is_simple_use: operand _174
harris.cpp:237:5: note: def_stmt: _174 = _171 + _173;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _179
harris.cpp:237:5: note: def_stmt: _179 = *_178;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _183 = _147 + pretmp_750;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _184 = (long unsigned int) _183;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _185 = _184 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _186 = Iyy_34 + _185;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _187 = *_186;

harris.cpp:237:5: note: vect_is_simple_use: operand *_186
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_186
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _188 = _180 + _187;

harris.cpp:237:5: note: vect_is_simple_use: operand _180
harris.cpp:237:5: note: def_stmt: _180 = _174 + _179;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _187
harris.cpp:237:5: note: def_stmt: _187 = *_186;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _189 = j_323 + pretmp_750;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _190 = (long unsigned int) _189;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _191 = _190 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _192 = Iyy_34 + _191;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _193 = *_192;

harris.cpp:237:5: note: vect_is_simple_use: operand *_192
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_192
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _194 = _188 + _193;

harris.cpp:237:5: note: vect_is_simple_use: operand _188
harris.cpp:237:5: note: def_stmt: _188 = _180 + _187;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _193
harris.cpp:237:5: note: def_stmt: _193 = *_192;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _195 = j_159 + pretmp_750;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _196 = (long unsigned int) _195;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _197 = _196 * 4;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _198 = Iyy_34 + _197;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _199 = *_198;

harris.cpp:237:5: note: vect_is_simple_use: operand *_198
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_198
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _200 = _194 + _199;

harris.cpp:237:5: note: vect_is_simple_use: operand _194
harris.cpp:237:5: note: def_stmt: _194 = _188 + _193;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _199
harris.cpp:237:5: note: def_stmt: _199 = *_198;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: *_144 = _200;

harris.cpp:237:5: note: vect_is_simple_use: operand _200
harris.cpp:237:5: note: def_stmt: _200 = _194 + _199;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _202 = Sxy_38 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _203 = Ixy_32 + _150;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _204 = *_203;

harris.cpp:237:5: note: vect_is_simple_use: operand *_203
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_203
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _205 = Ixy_32 + _155;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _206 = *_205;

harris.cpp:237:5: note: vect_is_simple_use: operand *_205
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_205
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _207 = _204 + _206;

harris.cpp:237:5: note: vect_is_simple_use: operand _204
harris.cpp:237:5: note: def_stmt: _204 = *_203;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _206
harris.cpp:237:5: note: def_stmt: _206 = *_205;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _208 = Ixy_32 + _162;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _209 = *_208;

harris.cpp:237:5: note: vect_is_simple_use: operand *_208
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_208
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _210 = _207 + _209;

harris.cpp:237:5: note: vect_is_simple_use: operand _207
harris.cpp:237:5: note: def_stmt: _207 = _204 + _206;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _209
harris.cpp:237:5: note: def_stmt: _209 = *_208;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _211 = Ixy_32 + _168;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _212 = *_211;

harris.cpp:237:5: note: vect_is_simple_use: operand *_211
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_211
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _213 = _210 + _212;

harris.cpp:237:5: note: vect_is_simple_use: operand _210
harris.cpp:237:5: note: def_stmt: _210 = _207 + _209;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _212
harris.cpp:237:5: note: def_stmt: _212 = *_211;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _214 = Ixy_32 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _215 = *_214;

harris.cpp:237:5: note: vect_is_simple_use: operand *_214
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_214
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _216 = _213 + _215;

harris.cpp:237:5: note: vect_is_simple_use: operand _213
harris.cpp:237:5: note: def_stmt: _213 = _210 + _212;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _215
harris.cpp:237:5: note: def_stmt: _215 = *_214;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _217 = Ixy_32 + _177;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _218 = *_217;

harris.cpp:237:5: note: vect_is_simple_use: operand *_217
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_217
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _219 = _216 + _218;

harris.cpp:237:5: note: vect_is_simple_use: operand _216
harris.cpp:237:5: note: def_stmt: _216 = _213 + _215;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _218
harris.cpp:237:5: note: def_stmt: _218 = *_217;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _220 = Ixy_32 + _185;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _221 = *_220;

harris.cpp:237:5: note: vect_is_simple_use: operand *_220
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_220
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _222 = _219 + _221;

harris.cpp:237:5: note: vect_is_simple_use: operand _219
harris.cpp:237:5: note: def_stmt: _219 = _216 + _218;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _221
harris.cpp:237:5: note: def_stmt: _221 = *_220;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _223 = Ixy_32 + _191;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _224 = *_223;

harris.cpp:237:5: note: vect_is_simple_use: operand *_223
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_223
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _225 = _222 + _224;

harris.cpp:237:5: note: vect_is_simple_use: operand _222
harris.cpp:237:5: note: def_stmt: _222 = _219 + _221;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _224
harris.cpp:237:5: note: def_stmt: _224 = *_223;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _226 = Ixy_32 + _197;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _227 = *_226;

harris.cpp:237:5: note: vect_is_simple_use: operand *_226
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_226
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _228 = _225 + _227;

harris.cpp:237:5: note: vect_is_simple_use: operand _225
harris.cpp:237:5: note: def_stmt: _225 = _222 + _224;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _227
harris.cpp:237:5: note: def_stmt: _227 = *_226;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: *_202 = _228;

harris.cpp:237:5: note: vect_is_simple_use: operand _228
harris.cpp:237:5: note: def_stmt: _228 = _225 + _227;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _230 = Sxx_36 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _231 = Ixx_30 + _150;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _232 = *_231;

harris.cpp:237:5: note: vect_is_simple_use: operand *_231
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_231
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _233 = Ixx_30 + _155;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _234 = *_233;

harris.cpp:237:5: note: vect_is_simple_use: operand *_233
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_233
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _235 = _232 + _234;

harris.cpp:237:5: note: vect_is_simple_use: operand _232
harris.cpp:237:5: note: def_stmt: _232 = *_231;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _234
harris.cpp:237:5: note: def_stmt: _234 = *_233;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _236 = Ixx_30 + _162;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _237 = *_236;

harris.cpp:237:5: note: vect_is_simple_use: operand *_236
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_236
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _238 = _235 + _237;

harris.cpp:237:5: note: vect_is_simple_use: operand _235
harris.cpp:237:5: note: def_stmt: _235 = _232 + _234;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _237
harris.cpp:237:5: note: def_stmt: _237 = *_236;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _239 = Ixx_30 + _168;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _240 = *_239;

harris.cpp:237:5: note: vect_is_simple_use: operand *_239
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_239
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _241 = _238 + _240;

harris.cpp:237:5: note: vect_is_simple_use: operand _238
harris.cpp:237:5: note: def_stmt: _238 = _235 + _237;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _240
harris.cpp:237:5: note: def_stmt: _240 = *_239;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _242 = Ixx_30 + _143;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _243 = *_242;

harris.cpp:237:5: note: vect_is_simple_use: operand *_242
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_242
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _244 = _241 + _243;

harris.cpp:237:5: note: vect_is_simple_use: operand _241
harris.cpp:237:5: note: def_stmt: _241 = _238 + _240;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _243
harris.cpp:237:5: note: def_stmt: _243 = *_242;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _245 = Ixx_30 + _177;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _246 = *_245;

harris.cpp:237:5: note: vect_is_simple_use: operand *_245
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_245
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _247 = _244 + _246;

harris.cpp:237:5: note: vect_is_simple_use: operand _244
harris.cpp:237:5: note: def_stmt: _244 = _241 + _243;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _246
harris.cpp:237:5: note: def_stmt: _246 = *_245;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _248 = Ixx_30 + _185;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _249 = *_248;

harris.cpp:237:5: note: vect_is_simple_use: operand *_248
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_248
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _250 = _247 + _249;

harris.cpp:237:5: note: vect_is_simple_use: operand _247
harris.cpp:237:5: note: def_stmt: _247 = _244 + _246;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _249
harris.cpp:237:5: note: def_stmt: _249 = *_248;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _251 = Ixx_30 + _191;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _252 = *_251;

harris.cpp:237:5: note: vect_is_simple_use: operand *_251
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_251
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _253 = _250 + _252;

harris.cpp:237:5: note: vect_is_simple_use: operand _250
harris.cpp:237:5: note: def_stmt: _250 = _247 + _249;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _252
harris.cpp:237:5: note: def_stmt: _252 = *_251;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _254 = Ixx_30 + _197;

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: ==> examining statement: _255 = *_254;

harris.cpp:237:5: note: vect_is_simple_use: operand *_254
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_is_simple_use: operand *_254
harris.cpp:237:5: note: not ssa-name.
harris.cpp:237:5: note: use not simple.
harris.cpp:237:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: _256 = _253 + _255;

harris.cpp:237:5: note: vect_is_simple_use: operand _253
harris.cpp:237:5: note: def_stmt: _253 = _250 + _252;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _255
harris.cpp:237:5: note: def_stmt: _255 = *_254;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: === vectorizable_operation ===
harris.cpp:237:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: *_230 = _256;

harris.cpp:237:5: note: vect_is_simple_use: operand _256
harris.cpp:237:5: note: def_stmt: _256 = _253 + _255;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:237:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:237:5: note: ==> examining statement: if (C_19(D) > j_159)

harris.cpp:237:5: note: irrelevant.
harris.cpp:237:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:237:5: note: Cost model analysis: 
  Vector inside of loop cost: 83
  Vector prologue cost: 116
  Vector epilogue cost: 108
  Scalar iteration cost: 54
  Scalar outside cost: 7
  Vector outside cost: 224
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5

harris.cpp:237:5: note:   Runtime profitability threshold = 4
harris.cpp:237:5: note:   Static estimate profitability threshold = 4
harris.cpp:237:5: note: epilog loop required
harris.cpp:237:5: note: vect_can_advance_ivs_p:
harris.cpp:237:5: note: Analyze phi: j_323 = PHI <2(32), j_159(24)>

harris.cpp:237:5: note: Analyze phi: .MEM_330 = PHI <.MEM_296(32), .MEM_257(24)>

harris.cpp:237:5: note: virtual phi. skip.
harris.cpp:237:5: note: loop vectorized
harris.cpp:237:5: note: === vec_transform_loop ===
harris.cpp:237:5: note: Profitability threshold is 4 loop iterations.
harris.cpp:237:5: note: loop peeled for vectorization to enhance alignment
harris.cpp:237:5: note: created vectp.613_853
harris.cpp:237:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.613_853 & 15) >> 2) & 3, niters.612_855>
Removing basic block 64
<bb 64>:


;; Scaling loop 11 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 6 with scale 0.777800, bounding iterations to 0 from guessed 13
;; guessed iterations are now 11

loop at harris.cpp:239: if (ivtmp_680 < prologue_after_cost_adjust.615_688)

Setting upper bound of nb iterations for prologue loop to 3
harris.cpp:237:5: note: === vect_update_inits_of_dr ===
harris.cpp:237:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 71
<bb 71>:


;; Scaling loop 6 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 12 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.cpp:237:5: note: vect_update_ivs_after_vectorizer: phi: j_323 = PHI <j_687(75), j_159(24)>

harris.cpp:237:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_330 = PHI <.MEM_685(75), .MEM_257(24)>

harris.cpp:237:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:237:5: note: ------>vectorizing phi: j_323 = PHI <j_687(79), j_159(24)>

harris.cpp:237:5: note: ------>vectorizing phi: .MEM_330 = PHI <.MEM_685(79), .MEM_257(24)>

harris.cpp:237:5: note: ------>vectorizing statement: _141 = j_323 + pretmp_734;

harris.cpp:237:5: note: ------>vectorizing statement: _142 = (long unsigned int) _141;

harris.cpp:237:5: note: ------>vectorizing statement: _143 = _142 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _144 = Syy_40 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _147 = j_323 + -1;

harris.cpp:237:5: note: ------>vectorizing statement: _148 = _147 + pretmp_739;

harris.cpp:237:5: note: ------>vectorizing statement: _149 = (long unsigned int) _148;

harris.cpp:237:5: note: ------>vectorizing statement: _150 = _149 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _151 = Iyy_34 + _150;

harris.cpp:237:5: note: ------>vectorizing statement: _152 = *_151;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.622_546
harris.cpp:237:5: note: add new stmt: vect__152.623_539 = MEM[(float *)vectp.621_541];

harris.cpp:237:5: note: ------>vectorizing statement: _153 = j_323 + pretmp_739;

harris.cpp:237:5: note: ------>vectorizing statement: _154 = (long unsigned int) _153;

harris.cpp:237:5: note: ------>vectorizing statement: _155 = _154 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _156 = Iyy_34 + _155;

harris.cpp:237:5: note: ------>vectorizing statement: _157 = *_156;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.625_538
harris.cpp:237:5: note: add new stmt: vect__157.626_531 = MEM[(float *)vectp.624_533];

harris.cpp:237:5: note: ------>vectorizing statement: _158 = _152 + _157;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _152
harris.cpp:237:5: note: def_stmt: _152 = *_151;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _157
harris.cpp:237:5: note: def_stmt: _157 = *_156;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _152
harris.cpp:237:5: note: vect_is_simple_use: operand _152
harris.cpp:237:5: note: def_stmt: _152 = *_151;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _152
  def_stmt =  _152 = *_151;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _157
harris.cpp:237:5: note: vect_is_simple_use: operand _157
harris.cpp:237:5: note: def_stmt: _157 = *_156;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _157
  def_stmt =  _157 = *_156;

harris.cpp:237:5: note: add new stmt: vect__158.627_530 = vect__152.623_539 + vect__157.626_531;

harris.cpp:237:5: note: ------>vectorizing statement: j_159 = j_323 + 1;

harris.cpp:237:5: note: ------>vectorizing statement: _160 = j_159 + pretmp_739;

harris.cpp:237:5: note: ------>vectorizing statement: _161 = (long unsigned int) _160;

harris.cpp:237:5: note: ------>vectorizing statement: _162 = _161 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _163 = Iyy_34 + _162;

harris.cpp:237:5: note: ------>vectorizing statement: _164 = *_163;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.629_529
harris.cpp:237:5: note: add new stmt: vect__164.630_522 = MEM[(float *)vectp.628_524];

harris.cpp:237:5: note: ------>vectorizing statement: _165 = _158 + _164;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _158
harris.cpp:237:5: note: def_stmt: _158 = _152 + _157;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _164
harris.cpp:237:5: note: def_stmt: _164 = *_163;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _158
harris.cpp:237:5: note: vect_is_simple_use: operand _158
harris.cpp:237:5: note: def_stmt: _158 = _152 + _157;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _158
  def_stmt =  _158 = _152 + _157;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _164
harris.cpp:237:5: note: vect_is_simple_use: operand _164
harris.cpp:237:5: note: def_stmt: _164 = *_163;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _164
  def_stmt =  _164 = *_163;

harris.cpp:237:5: note: add new stmt: vect__165.631_521 = vect__158.627_530 + vect__164.630_522;

harris.cpp:237:5: note: ------>vectorizing statement: _166 = _147 + pretmp_734;

harris.cpp:237:5: note: ------>vectorizing statement: _167 = (long unsigned int) _166;

harris.cpp:237:5: note: ------>vectorizing statement: _168 = _167 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _169 = Iyy_34 + _168;

harris.cpp:237:5: note: ------>vectorizing statement: _170 = *_169;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.633_520
harris.cpp:237:5: note: add new stmt: vect__170.634_513 = MEM[(float *)vectp.632_515];

harris.cpp:237:5: note: ------>vectorizing statement: _171 = _165 + _170;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _165
harris.cpp:237:5: note: def_stmt: _165 = _158 + _164;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _170
harris.cpp:237:5: note: def_stmt: _170 = *_169;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _165
harris.cpp:237:5: note: vect_is_simple_use: operand _165
harris.cpp:237:5: note: def_stmt: _165 = _158 + _164;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _165
  def_stmt =  _165 = _158 + _164;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _170
harris.cpp:237:5: note: vect_is_simple_use: operand _170
harris.cpp:237:5: note: def_stmt: _170 = *_169;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _170
  def_stmt =  _170 = *_169;

harris.cpp:237:5: note: add new stmt: vect__171.635_512 = vect__165.631_521 + vect__170.634_513;

harris.cpp:237:5: note: ------>vectorizing statement: _172 = Iyy_34 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _173 = *_172;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.637_511
harris.cpp:237:5: note: add new stmt: vect__173.638_504 = MEM[(float *)vectp.636_506];

harris.cpp:237:5: note: ------>vectorizing statement: _174 = _171 + _173;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _171
harris.cpp:237:5: note: def_stmt: _171 = _165 + _170;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _173
harris.cpp:237:5: note: def_stmt: _173 = *_172;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _171
harris.cpp:237:5: note: vect_is_simple_use: operand _171
harris.cpp:237:5: note: def_stmt: _171 = _165 + _170;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _171
  def_stmt =  _171 = _165 + _170;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _173
harris.cpp:237:5: note: vect_is_simple_use: operand _173
harris.cpp:237:5: note: def_stmt: _173 = *_172;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _173
  def_stmt =  _173 = *_172;

harris.cpp:237:5: note: add new stmt: vect__174.639_503 = vect__171.635_512 + vect__173.638_504;

harris.cpp:237:5: note: ------>vectorizing statement: _175 = j_159 + pretmp_734;

harris.cpp:237:5: note: ------>vectorizing statement: _176 = (long unsigned int) _175;

harris.cpp:237:5: note: ------>vectorizing statement: _177 = _176 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _178 = Iyy_34 + _177;

harris.cpp:237:5: note: ------>vectorizing statement: _179 = *_178;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.641_502
harris.cpp:237:5: note: add new stmt: vect__179.642_495 = MEM[(float *)vectp.640_497];

harris.cpp:237:5: note: ------>vectorizing statement: _180 = _174 + _179;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _174
harris.cpp:237:5: note: def_stmt: _174 = _171 + _173;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _179
harris.cpp:237:5: note: def_stmt: _179 = *_178;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _174
harris.cpp:237:5: note: vect_is_simple_use: operand _174
harris.cpp:237:5: note: def_stmt: _174 = _171 + _173;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _174
  def_stmt =  _174 = _171 + _173;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _179
harris.cpp:237:5: note: vect_is_simple_use: operand _179
harris.cpp:237:5: note: def_stmt: _179 = *_178;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _179
  def_stmt =  _179 = *_178;

harris.cpp:237:5: note: add new stmt: vect__180.643_494 = vect__174.639_503 + vect__179.642_495;

harris.cpp:237:5: note: ------>vectorizing statement: _183 = _147 + pretmp_750;

harris.cpp:237:5: note: ------>vectorizing statement: _184 = (long unsigned int) _183;

harris.cpp:237:5: note: ------>vectorizing statement: _185 = _184 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _186 = Iyy_34 + _185;

harris.cpp:237:5: note: ------>vectorizing statement: _187 = *_186;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.645_493
harris.cpp:237:5: note: add new stmt: vect__187.646_486 = MEM[(float *)vectp.644_488];

harris.cpp:237:5: note: ------>vectorizing statement: _188 = _180 + _187;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _180
harris.cpp:237:5: note: def_stmt: _180 = _174 + _179;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _187
harris.cpp:237:5: note: def_stmt: _187 = *_186;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _180
harris.cpp:237:5: note: vect_is_simple_use: operand _180
harris.cpp:237:5: note: def_stmt: _180 = _174 + _179;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _180
  def_stmt =  _180 = _174 + _179;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _187
harris.cpp:237:5: note: vect_is_simple_use: operand _187
harris.cpp:237:5: note: def_stmt: _187 = *_186;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _187
  def_stmt =  _187 = *_186;

harris.cpp:237:5: note: add new stmt: vect__188.647_485 = vect__180.643_494 + vect__187.646_486;

harris.cpp:237:5: note: ------>vectorizing statement: _189 = j_323 + pretmp_750;

harris.cpp:237:5: note: ------>vectorizing statement: _190 = (long unsigned int) _189;

harris.cpp:237:5: note: ------>vectorizing statement: _191 = _190 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _192 = Iyy_34 + _191;

harris.cpp:237:5: note: ------>vectorizing statement: _193 = *_192;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.649_484
harris.cpp:237:5: note: add new stmt: vect__193.650_477 = MEM[(float *)vectp.648_479];

harris.cpp:237:5: note: ------>vectorizing statement: _194 = _188 + _193;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _188
harris.cpp:237:5: note: def_stmt: _188 = _180 + _187;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _193
harris.cpp:237:5: note: def_stmt: _193 = *_192;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _188
harris.cpp:237:5: note: vect_is_simple_use: operand _188
harris.cpp:237:5: note: def_stmt: _188 = _180 + _187;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _188
  def_stmt =  _188 = _180 + _187;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _193
harris.cpp:237:5: note: vect_is_simple_use: operand _193
harris.cpp:237:5: note: def_stmt: _193 = *_192;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _193
  def_stmt =  _193 = *_192;

harris.cpp:237:5: note: add new stmt: vect__194.651_476 = vect__188.647_485 + vect__193.650_477;

harris.cpp:237:5: note: ------>vectorizing statement: _195 = j_159 + pretmp_750;

harris.cpp:237:5: note: ------>vectorizing statement: _196 = (long unsigned int) _195;

harris.cpp:237:5: note: ------>vectorizing statement: _197 = _196 * 4;

harris.cpp:237:5: note: ------>vectorizing statement: _198 = Iyy_34 + _197;

harris.cpp:237:5: note: ------>vectorizing statement: _199 = *_198;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.653_475
harris.cpp:237:5: note: add new stmt: vect__199.654_468 = MEM[(float *)vectp.652_470];

harris.cpp:237:5: note: ------>vectorizing statement: _200 = _194 + _199;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _194
harris.cpp:237:5: note: def_stmt: _194 = _188 + _193;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _199
harris.cpp:237:5: note: def_stmt: _199 = *_198;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _194
harris.cpp:237:5: note: vect_is_simple_use: operand _194
harris.cpp:237:5: note: def_stmt: _194 = _188 + _193;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _194
  def_stmt =  _194 = _188 + _193;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _199
harris.cpp:237:5: note: vect_is_simple_use: operand _199
harris.cpp:237:5: note: def_stmt: _199 = *_198;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _199
  def_stmt =  _199 = *_198;

harris.cpp:237:5: note: add new stmt: vect__200.655_467 = vect__194.651_476 + vect__199.654_468;

harris.cpp:237:5: note: ------>vectorizing statement: *_144 = _200;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _200
harris.cpp:237:5: note: def_stmt: _200 = _194 + _199;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform store. ncopies = 1
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _200
harris.cpp:237:5: note: vect_is_simple_use: operand _200
harris.cpp:237:5: note: def_stmt: _200 = _194 + _199;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _200
  def_stmt =  _200 = _194 + _199;

harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Syy_40 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.657_466
harris.cpp:237:5: note: add new stmt: MEM[(float *)vectp.656_461] = vect__200.655_467;

harris.cpp:237:5: note: ------>vectorizing statement: _202 = Sxy_38 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _203 = Ixy_32 + _150;

harris.cpp:237:5: note: ------>vectorizing statement: _204 = *_203;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.659_201
harris.cpp:237:5: note: add new stmt: vect__204.660_452 = MEM[(float *)vectp.658_454];

harris.cpp:237:5: note: ------>vectorizing statement: _205 = Ixy_32 + _155;

harris.cpp:237:5: note: ------>vectorizing statement: _206 = *_205;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.662_451
harris.cpp:237:5: note: add new stmt: vect__206.663_444 = MEM[(float *)vectp.661_446];

harris.cpp:237:5: note: ------>vectorizing statement: _207 = _204 + _206;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _204
harris.cpp:237:5: note: def_stmt: _204 = *_203;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _206
harris.cpp:237:5: note: def_stmt: _206 = *_205;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _204
harris.cpp:237:5: note: vect_is_simple_use: operand _204
harris.cpp:237:5: note: def_stmt: _204 = *_203;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _204
  def_stmt =  _204 = *_203;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _206
harris.cpp:237:5: note: vect_is_simple_use: operand _206
harris.cpp:237:5: note: def_stmt: _206 = *_205;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _206
  def_stmt =  _206 = *_205;

harris.cpp:237:5: note: add new stmt: vect__207.664_443 = vect__204.660_452 + vect__206.663_444;

harris.cpp:237:5: note: ------>vectorizing statement: _208 = Ixy_32 + _162;

harris.cpp:237:5: note: ------>vectorizing statement: _209 = *_208;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.666_442
harris.cpp:237:5: note: add new stmt: vect__209.667_435 = MEM[(float *)vectp.665_437];

harris.cpp:237:5: note: ------>vectorizing statement: _210 = _207 + _209;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _207
harris.cpp:237:5: note: def_stmt: _207 = _204 + _206;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _209
harris.cpp:237:5: note: def_stmt: _209 = *_208;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _207
harris.cpp:237:5: note: vect_is_simple_use: operand _207
harris.cpp:237:5: note: def_stmt: _207 = _204 + _206;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _207
  def_stmt =  _207 = _204 + _206;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _209
harris.cpp:237:5: note: vect_is_simple_use: operand _209
harris.cpp:237:5: note: def_stmt: _209 = *_208;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _209
  def_stmt =  _209 = *_208;

harris.cpp:237:5: note: add new stmt: vect__210.668_434 = vect__207.664_443 + vect__209.667_435;

harris.cpp:237:5: note: ------>vectorizing statement: _211 = Ixy_32 + _168;

harris.cpp:237:5: note: ------>vectorizing statement: _212 = *_211;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.670_433
harris.cpp:237:5: note: add new stmt: vect__212.671_426 = MEM[(float *)vectp.669_428];

harris.cpp:237:5: note: ------>vectorizing statement: _213 = _210 + _212;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _210
harris.cpp:237:5: note: def_stmt: _210 = _207 + _209;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _212
harris.cpp:237:5: note: def_stmt: _212 = *_211;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _210
harris.cpp:237:5: note: vect_is_simple_use: operand _210
harris.cpp:237:5: note: def_stmt: _210 = _207 + _209;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _210
  def_stmt =  _210 = _207 + _209;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _212
harris.cpp:237:5: note: vect_is_simple_use: operand _212
harris.cpp:237:5: note: def_stmt: _212 = *_211;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _212
  def_stmt =  _212 = *_211;

harris.cpp:237:5: note: add new stmt: vect__213.672_425 = vect__210.668_434 + vect__212.671_426;

harris.cpp:237:5: note: ------>vectorizing statement: _214 = Ixy_32 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _215 = *_214;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.674_424
harris.cpp:237:5: note: add new stmt: vect__215.675_417 = MEM[(float *)vectp.673_419];

harris.cpp:237:5: note: ------>vectorizing statement: _216 = _213 + _215;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _213
harris.cpp:237:5: note: def_stmt: _213 = _210 + _212;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _215
harris.cpp:237:5: note: def_stmt: _215 = *_214;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _213
harris.cpp:237:5: note: vect_is_simple_use: operand _213
harris.cpp:237:5: note: def_stmt: _213 = _210 + _212;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _213
  def_stmt =  _213 = _210 + _212;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _215
harris.cpp:237:5: note: vect_is_simple_use: operand _215
harris.cpp:237:5: note: def_stmt: _215 = *_214;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _215
  def_stmt =  _215 = *_214;

harris.cpp:237:5: note: add new stmt: vect__216.676_416 = vect__213.672_425 + vect__215.675_417;

harris.cpp:237:5: note: ------>vectorizing statement: _217 = Ixy_32 + _177;

harris.cpp:237:5: note: ------>vectorizing statement: _218 = *_217;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.678_415
harris.cpp:237:5: note: add new stmt: vect__218.679_408 = MEM[(float *)vectp.677_410];

harris.cpp:237:5: note: ------>vectorizing statement: _219 = _216 + _218;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _216
harris.cpp:237:5: note: def_stmt: _216 = _213 + _215;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _218
harris.cpp:237:5: note: def_stmt: _218 = *_217;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _216
harris.cpp:237:5: note: vect_is_simple_use: operand _216
harris.cpp:237:5: note: def_stmt: _216 = _213 + _215;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _216
  def_stmt =  _216 = _213 + _215;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _218
harris.cpp:237:5: note: vect_is_simple_use: operand _218
harris.cpp:237:5: note: def_stmt: _218 = *_217;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _218
  def_stmt =  _218 = *_217;

harris.cpp:237:5: note: add new stmt: vect__219.680_407 = vect__216.676_416 + vect__218.679_408;

harris.cpp:237:5: note: ------>vectorizing statement: _220 = Ixy_32 + _185;

harris.cpp:237:5: note: ------>vectorizing statement: _221 = *_220;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.682_406
harris.cpp:237:5: note: add new stmt: vect__221.683_399 = MEM[(float *)vectp.681_401];

harris.cpp:237:5: note: ------>vectorizing statement: _222 = _219 + _221;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _219
harris.cpp:237:5: note: def_stmt: _219 = _216 + _218;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _221
harris.cpp:237:5: note: def_stmt: _221 = *_220;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _219
harris.cpp:237:5: note: vect_is_simple_use: operand _219
harris.cpp:237:5: note: def_stmt: _219 = _216 + _218;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _219
  def_stmt =  _219 = _216 + _218;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _221
harris.cpp:237:5: note: vect_is_simple_use: operand _221
harris.cpp:237:5: note: def_stmt: _221 = *_220;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _221
  def_stmt =  _221 = *_220;

harris.cpp:237:5: note: add new stmt: vect__222.684_398 = vect__219.680_407 + vect__221.683_399;

harris.cpp:237:5: note: ------>vectorizing statement: _223 = Ixy_32 + _191;

harris.cpp:237:5: note: ------>vectorizing statement: _224 = *_223;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.686_397
harris.cpp:237:5: note: add new stmt: vect__224.687_390 = MEM[(float *)vectp.685_392];

harris.cpp:237:5: note: ------>vectorizing statement: _225 = _222 + _224;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _222
harris.cpp:237:5: note: def_stmt: _222 = _219 + _221;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _224
harris.cpp:237:5: note: def_stmt: _224 = *_223;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _222
harris.cpp:237:5: note: vect_is_simple_use: operand _222
harris.cpp:237:5: note: def_stmt: _222 = _219 + _221;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _222
  def_stmt =  _222 = _219 + _221;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _224
harris.cpp:237:5: note: vect_is_simple_use: operand _224
harris.cpp:237:5: note: def_stmt: _224 = *_223;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _224
  def_stmt =  _224 = *_223;

harris.cpp:237:5: note: add new stmt: vect__225.688_389 = vect__222.684_398 + vect__224.687_390;

harris.cpp:237:5: note: ------>vectorizing statement: _226 = Ixy_32 + _197;

harris.cpp:237:5: note: ------>vectorizing statement: _227 = *_226;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.690_388
harris.cpp:237:5: note: add new stmt: vect__227.691_381 = MEM[(float *)vectp.689_383];

harris.cpp:237:5: note: ------>vectorizing statement: _228 = _225 + _227;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _225
harris.cpp:237:5: note: def_stmt: _225 = _222 + _224;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _227
harris.cpp:237:5: note: def_stmt: _227 = *_226;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _225
harris.cpp:237:5: note: vect_is_simple_use: operand _225
harris.cpp:237:5: note: def_stmt: _225 = _222 + _224;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _225
  def_stmt =  _225 = _222 + _224;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _227
harris.cpp:237:5: note: vect_is_simple_use: operand _227
harris.cpp:237:5: note: def_stmt: _227 = *_226;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _227
  def_stmt =  _227 = *_226;

harris.cpp:237:5: note: add new stmt: vect__228.692_380 = vect__225.688_389 + vect__227.691_381;

harris.cpp:237:5: note: ------>vectorizing statement: *_202 = _228;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _228
harris.cpp:237:5: note: def_stmt: _228 = _225 + _227;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform store. ncopies = 1
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _228
harris.cpp:237:5: note: vect_is_simple_use: operand _228
harris.cpp:237:5: note: def_stmt: _228 = _225 + _227;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _228
  def_stmt =  _228 = _225 + _227;

harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Sxy_38 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.694_379
harris.cpp:237:5: note: add new stmt: MEM[(float *)vectp.693_374] = vect__228.692_380;

harris.cpp:237:5: note: ------>vectorizing statement: _230 = Sxx_36 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _231 = Ixx_30 + _150;

harris.cpp:237:5: note: ------>vectorizing statement: _232 = *_231;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.696_229
harris.cpp:237:5: note: add new stmt: vect__232.697_365 = MEM[(float *)vectp.695_367];

harris.cpp:237:5: note: ------>vectorizing statement: _233 = Ixx_30 + _155;

harris.cpp:237:5: note: ------>vectorizing statement: _234 = *_233;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.699_364
harris.cpp:237:5: note: add new stmt: vect__234.700_357 = MEM[(float *)vectp.698_359];

harris.cpp:237:5: note: ------>vectorizing statement: _235 = _232 + _234;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _232
harris.cpp:237:5: note: def_stmt: _232 = *_231;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _234
harris.cpp:237:5: note: def_stmt: _234 = *_233;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _232
harris.cpp:237:5: note: vect_is_simple_use: operand _232
harris.cpp:237:5: note: def_stmt: _232 = *_231;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _232
  def_stmt =  _232 = *_231;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _234
harris.cpp:237:5: note: vect_is_simple_use: operand _234
harris.cpp:237:5: note: def_stmt: _234 = *_233;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _234
  def_stmt =  _234 = *_233;

harris.cpp:237:5: note: add new stmt: vect__235.701_356 = vect__232.697_365 + vect__234.700_357;

harris.cpp:237:5: note: ------>vectorizing statement: _236 = Ixx_30 + _162;

harris.cpp:237:5: note: ------>vectorizing statement: _237 = *_236;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_739 * 4)
harris.cpp:237:5: note: created vectp.703_355
harris.cpp:237:5: note: add new stmt: vect__237.704_348 = MEM[(float *)vectp.702_350];

harris.cpp:237:5: note: ------>vectorizing statement: _238 = _235 + _237;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _235
harris.cpp:237:5: note: def_stmt: _235 = _232 + _234;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _237
harris.cpp:237:5: note: def_stmt: _237 = *_236;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _235
harris.cpp:237:5: note: vect_is_simple_use: operand _235
harris.cpp:237:5: note: def_stmt: _235 = _232 + _234;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _235
  def_stmt =  _235 = _232 + _234;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _237
harris.cpp:237:5: note: vect_is_simple_use: operand _237
harris.cpp:237:5: note: def_stmt: _237 = *_236;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _237
  def_stmt =  _237 = *_236;

harris.cpp:237:5: note: add new stmt: vect__238.705_347 = vect__235.701_356 + vect__237.704_348;

harris.cpp:237:5: note: ------>vectorizing statement: _239 = Ixx_30 + _168;

harris.cpp:237:5: note: ------>vectorizing statement: _240 = *_239;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.707_346
harris.cpp:237:5: note: add new stmt: vect__240.708_339 = MEM[(float *)vectp.706_341];

harris.cpp:237:5: note: ------>vectorizing statement: _241 = _238 + _240;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _238
harris.cpp:237:5: note: def_stmt: _238 = _235 + _237;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _240
harris.cpp:237:5: note: def_stmt: _240 = *_239;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _238
harris.cpp:237:5: note: vect_is_simple_use: operand _238
harris.cpp:237:5: note: def_stmt: _238 = _235 + _237;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _238
  def_stmt =  _238 = _235 + _237;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _240
harris.cpp:237:5: note: vect_is_simple_use: operand _240
harris.cpp:237:5: note: def_stmt: _240 = *_239;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _240
  def_stmt =  _240 = *_239;

harris.cpp:237:5: note: add new stmt: vect__241.709_338 = vect__238.705_347 + vect__240.708_339;

harris.cpp:237:5: note: ------>vectorizing statement: _242 = Ixx_30 + _143;

harris.cpp:237:5: note: ------>vectorizing statement: _243 = *_242;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.711_337
harris.cpp:237:5: note: add new stmt: vect__243.712_313 = MEM[(float *)vectp.710_315];

harris.cpp:237:5: note: ------>vectorizing statement: _244 = _241 + _243;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _241
harris.cpp:237:5: note: def_stmt: _241 = _238 + _240;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _243
harris.cpp:237:5: note: def_stmt: _243 = *_242;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _241
harris.cpp:237:5: note: vect_is_simple_use: operand _241
harris.cpp:237:5: note: def_stmt: _241 = _238 + _240;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _241
  def_stmt =  _241 = _238 + _240;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _243
harris.cpp:237:5: note: vect_is_simple_use: operand _243
harris.cpp:237:5: note: def_stmt: _243 = *_242;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _243
  def_stmt =  _243 = *_242;

harris.cpp:237:5: note: add new stmt: vect__244.713_312 = vect__241.709_338 + vect__243.712_313;

harris.cpp:237:5: note: ------>vectorizing statement: _245 = Ixx_30 + _177;

harris.cpp:237:5: note: ------>vectorizing statement: _246 = *_245;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.715_311
harris.cpp:237:5: note: add new stmt: vect__246.716_304 = MEM[(float *)vectp.714_306];

harris.cpp:237:5: note: ------>vectorizing statement: _247 = _244 + _246;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _244
harris.cpp:237:5: note: def_stmt: _244 = _241 + _243;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _246
harris.cpp:237:5: note: def_stmt: _246 = *_245;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _244
harris.cpp:237:5: note: vect_is_simple_use: operand _244
harris.cpp:237:5: note: def_stmt: _244 = _241 + _243;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _244
  def_stmt =  _244 = _241 + _243;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _246
harris.cpp:237:5: note: vect_is_simple_use: operand _246
harris.cpp:237:5: note: def_stmt: _246 = *_245;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _246
  def_stmt =  _246 = *_245;

harris.cpp:237:5: note: add new stmt: vect__247.717_303 = vect__244.713_312 + vect__246.716_304;

harris.cpp:237:5: note: ------>vectorizing statement: _248 = Ixx_30 + _185;

harris.cpp:237:5: note: ------>vectorizing statement: _249 = *_248;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.719_302
harris.cpp:237:5: note: add new stmt: vect__249.720_271 = MEM[(float *)vectp.718_274];

harris.cpp:237:5: note: ------>vectorizing statement: _250 = _247 + _249;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _247
harris.cpp:237:5: note: def_stmt: _247 = _244 + _246;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _249
harris.cpp:237:5: note: def_stmt: _249 = *_248;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _247
harris.cpp:237:5: note: vect_is_simple_use: operand _247
harris.cpp:237:5: note: def_stmt: _247 = _244 + _246;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _247
  def_stmt =  _247 = _244 + _246;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _249
harris.cpp:237:5: note: vect_is_simple_use: operand _249
harris.cpp:237:5: note: def_stmt: _249 = *_248;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _249
  def_stmt =  _249 = *_248;

harris.cpp:237:5: note: add new stmt: vect__250.721_267 = vect__247.717_303 + vect__249.720_271;

harris.cpp:237:5: note: ------>vectorizing statement: _251 = Ixx_30 + _191;

harris.cpp:237:5: note: ------>vectorizing statement: _252 = *_251;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.723_266
harris.cpp:237:5: note: add new stmt: vect__252.724_10 = MEM[(float *)vectp.722_12];

harris.cpp:237:5: note: ------>vectorizing statement: _253 = _250 + _252;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _250
harris.cpp:237:5: note: def_stmt: _250 = _247 + _249;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _252
harris.cpp:237:5: note: def_stmt: _252 = *_251;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _250
harris.cpp:237:5: note: vect_is_simple_use: operand _250
harris.cpp:237:5: note: def_stmt: _250 = _247 + _249;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _250
  def_stmt =  _250 = _247 + _249;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _252
harris.cpp:237:5: note: vect_is_simple_use: operand _252
harris.cpp:237:5: note: def_stmt: _252 = *_251;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _252
  def_stmt =  _252 = *_251;

harris.cpp:237:5: note: add new stmt: vect__253.725_9 = vect__250.721_267 + vect__252.724_10;

harris.cpp:237:5: note: ------>vectorizing statement: _254 = Ixx_30 + _197;

harris.cpp:237:5: note: ------>vectorizing statement: _255 = *_254;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: transform load. ncopies = 1
harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_750 * 4)
harris.cpp:237:5: note: created vectp.727_8
harris.cpp:237:5: note: add new stmt: vect__255.728_1 = MEM[(float *)vectp.726_3];

harris.cpp:237:5: note: ------>vectorizing statement: _256 = _253 + _255;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _253
harris.cpp:237:5: note: def_stmt: _253 = _250 + _252;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: vect_is_simple_use: operand _255
harris.cpp:237:5: note: def_stmt: _255 = *_254;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform binary/unary operation.
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _253
harris.cpp:237:5: note: vect_is_simple_use: operand _253
harris.cpp:237:5: note: def_stmt: _253 = _250 + _252;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _253
  def_stmt =  _253 = _250 + _252;

harris.cpp:237:5: note: vect_get_vec_def_for_operand: _255
harris.cpp:237:5: note: vect_is_simple_use: operand _255
harris.cpp:237:5: note: def_stmt: _255 = *_254;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _255
  def_stmt =  _255 = *_254;

harris.cpp:237:5: note: add new stmt: vect__256.729_990 = vect__253.725_9 + vect__255.728_1;

harris.cpp:237:5: note: ------>vectorizing statement: *_230 = _256;

harris.cpp:237:5: note: transform statement.
harris.cpp:237:5: note: vect_is_simple_use: operand _256
harris.cpp:237:5: note: def_stmt: _256 = _253 + _255;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: transform store. ncopies = 1
harris.cpp:237:5: note: vect_get_vec_def_for_operand: _256
harris.cpp:237:5: note: vect_is_simple_use: operand _256
harris.cpp:237:5: note: def_stmt: _256 = _253 + _255;

harris.cpp:237:5: note: type of def: 3.
harris.cpp:237:5: note: def =  _256
  def_stmt =  _256 = _253 + _255;

harris.cpp:237:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Sxx_36 + (sizetype) ((long unsigned int) pretmp_734 * 4)
harris.cpp:237:5: note: created vectp.731_984
harris.cpp:237:5: note: add new stmt: MEM[(float *)vectp.730_931] = vect__256.729_990;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.621_540 = vectp.621_541 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.624_532 = vectp.624_533 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.628_523 = vectp.628_524 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.632_514 = vectp.632_515 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.636_505 = vectp.636_506 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.640_496 = vectp.640_497 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.644_487 = vectp.644_488 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.648_478 = vectp.648_479 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.652_469 = vectp.652_470 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.656_460 = vectp.656_461 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.658_453 = vectp.658_454 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.661_445 = vectp.661_446 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.665_436 = vectp.665_437 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.669_427 = vectp.669_428 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.673_418 = vectp.673_419 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.677_409 = vectp.677_410 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.681_400 = vectp.681_401 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.685_391 = vectp.685_392 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.689_382 = vectp.689_383 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.693_373 = vectp.693_374 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.695_366 = vectp.695_367 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.698_358 = vectp.698_359 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.702_349 = vectp.702_350 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.706_340 = vectp.706_341 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.710_314 = vectp.710_315 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.714_305 = vectp.714_306 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.718_272 = vectp.718_274 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.722_11 = vectp.722_12 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.726_2 = vectp.726_3 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: vectp.730_930 = vectp.730_931 + 16;

harris.cpp:237:5: note: ------>vectorizing statement: if (C_19(D) > j_159)


loop at harris.cpp:239: if (ivtmp_928 < bnd.618_677)

;; Scaling loop 6 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
harris.cpp:237:5: note: LOOP VECTORIZED


Analyzing loop at harris.cpp:224
harris.cpp:224:3: note: ===== analyze_loop_nest =====
harris.cpp:224:3: note: === vect_analyze_loop_form ===
harris.cpp:224:3: note: ===== analyze_loop_nest_1 =====
harris.cpp:224:3: note: === vect_analyze_loop_form ===
harris.cpp:224:3: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [2, + , 1](no_overflow) <= C_19(D)
  bounds on difference of bases: -1 ... 2147483645
  result:
    # of iterations (unsigned int) C_19(D) + 4294967295, bounded by 2147483646
harris.cpp:224:3: note: Symbolic number of iterations is (unsigned int) C_19(D)
harris.cpp:224:3: note: not vectorized: control flow in loop.
harris.cpp:224:3: note: bad loop form.

Analyzing loop at harris.cpp:225
harris.cpp:225:5: note: ===== analyze_loop_nest =====
harris.cpp:225:5: note: === vect_analyze_loop_form ===
harris.cpp:225:5: note: === get_loop_niters ===
harris.cpp:225:5: note: Symbolic number of iterations is (unsigned int) C_19(D)
harris.cpp:225:5: note: === vect_analyze_data_refs ===
Creating dr for *_126
analyze_innermost: success.
	base_address: Ix_26 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ix_26 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	Access function 0: {4B, +, 4}_7
Creating dr for *_125
analyze_innermost: success.
	base_address: Ixx_30 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	Access function 0: {4B, +, 4}_7
Creating dr for *_131
analyze_innermost: success.
	base_address: Iy_28 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iy_28 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	Access function 0: {4B, +, 4}_7
Creating dr for *_130
analyze_innermost: success.
	base_address: Iyy_34 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	Access function 0: {4B, +, 4}_7
Creating dr for *_135
analyze_innermost: success.
	base_address: Ixy_32 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_989 * 4)
	Access function 0: {4B, +, 4}_7
harris.cpp:225:5: note: got vectype for stmt: _127 = *_126;
vector(4) float
harris.cpp:225:5: note: got vectype for stmt: *_125 = _128;
vector(4) float
harris.cpp:225:5: note: got vectype for stmt: _132 = *_131;
vector(4) float
harris.cpp:225:5: note: got vectype for stmt: *_130 = _133;
vector(4) float
harris.cpp:225:5: note: got vectype for stmt: *_135 = _136;
vector(4) float
harris.cpp:225:5: note: === vect_analyze_scalar_cycles ===
harris.cpp:225:5: note: Analyze phi: j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: Access function of PHI: {1, +, 1}_7
harris.cpp:225:5: note: step: 1,  init: 1
harris.cpp:225:5: note: Detected induction.
harris.cpp:225:5: note: Analyze phi: .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: === vect_pattern_recog ===
harris.cpp:225:5: note: vect_is_simple_use: operand _123
harris.cpp:225:5: note: def_stmt: _123 = (long unsigned int) _122;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _122
harris.cpp:225:5: note: def_stmt: _122 = j_321 + pretmp_989;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand 4
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: === vect_analyze_data_ref_accesses ===
harris.cpp:225:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:225:5: note: init: phi relevant? j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: init: phi relevant? .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: init: stmt relevant? _122 = j_321 + pretmp_989;

harris.cpp:225:5: note: init: stmt relevant? _123 = (long unsigned int) _122;

harris.cpp:225:5: note: init: stmt relevant? _124 = _123 * 4;

harris.cpp:225:5: note: init: stmt relevant? _125 = Ixx_30 + _124;

harris.cpp:225:5: note: init: stmt relevant? _126 = Ix_26 + _124;

harris.cpp:225:5: note: init: stmt relevant? _127 = *_126;

harris.cpp:225:5: note: init: stmt relevant? _128 = _127 * _127;

harris.cpp:225:5: note: init: stmt relevant? *_125 = _128;

harris.cpp:225:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: init: stmt relevant? _130 = Iyy_34 + _124;

harris.cpp:225:5: note: init: stmt relevant? _131 = Iy_28 + _124;

harris.cpp:225:5: note: init: stmt relevant? _132 = *_131;

harris.cpp:225:5: note: init: stmt relevant? _133 = _132 * _132;

harris.cpp:225:5: note: init: stmt relevant? *_130 = _133;

harris.cpp:225:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: init: stmt relevant? _135 = Ixy_32 + _124;

harris.cpp:225:5: note: init: stmt relevant? _136 = _127 * _132;

harris.cpp:225:5: note: init: stmt relevant? *_135 = _136;

harris.cpp:225:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: init: stmt relevant? j_138 = j_321 + 1;

harris.cpp:225:5: note: init: stmt relevant? if (C_19(D) >= j_138)

harris.cpp:225:5: note: worklist: examine stmt: *_135 = _136;

harris.cpp:225:5: note: vect_is_simple_use: operand _136
harris.cpp:225:5: note: def_stmt: _136 = _127 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: worklist: examine stmt: _136 = _127 * _132;

harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: worklist: examine stmt: _132 = *_131;

harris.cpp:225:5: note: worklist: examine stmt: _127 = *_126;

harris.cpp:225:5: note: worklist: examine stmt: *_130 = _133;

harris.cpp:225:5: note: vect_is_simple_use: operand _133
harris.cpp:225:5: note: def_stmt: _133 = _132 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: worklist: examine stmt: _133 = _132 * _132;

harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: already marked relevant/live.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: already marked relevant/live.
harris.cpp:225:5: note: worklist: examine stmt: *_125 = _128;

harris.cpp:225:5: note: vect_is_simple_use: operand _128
harris.cpp:225:5: note: def_stmt: _128 = _127 * _127;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: worklist: examine stmt: _128 = _127 * _127;

harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: already marked relevant/live.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: mark relevant 4, live 0.
harris.cpp:225:5: note: already marked relevant/live.
harris.cpp:225:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: *_125 = _128;
) -> no dependence
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _132 = *_131;
) -> no dependence
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: *_130 = _133;
) -> no dependence
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: *_135 = _136;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_125 = _128;
  stmt_b: _132 = *_131;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_125 = _128;
  stmt_b: *_130 = _133;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_125 = _128;
  stmt_b: *_135 = _136;
) -> no dependence
(compute_affine_dependence
  stmt_a: _132 = *_131;
  stmt_b: *_130 = _133;
) -> no dependence
(compute_affine_dependence
  stmt_a: _132 = *_131;
  stmt_b: *_135 = _136;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_130 = _133;
  stmt_b: *_135 = _136;
) -> no dependence
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _127 = *_126;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_7)
  (chrec_b = {4B, +, 4}_7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_125 = _128;
  stmt_b: *_125 = _128;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_7)
  (chrec_b = {4B, +, 4}_7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _132 = *_131;
  stmt_b: _132 = *_131;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_7)
  (chrec_b = {4B, +, 4}_7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_130 = _133;
  stmt_b: *_130 = _133;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_7)
  (chrec_b = {4B, +, 4}_7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_135 = _136;
  stmt_b: *_135 = _136;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_7)
  (chrec_b = {4B, +, 4}_7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:225:5: note: === vect_determine_vectorization_factor ===
harris.cpp:225:5: note: ==> examining phi: j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: ==> examining phi: .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: ==> examining statement: _122 = j_321 + pretmp_989;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _123 = (long unsigned int) _122;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _124 = _123 * 4;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _125 = Ixx_30 + _124;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _126 = Ix_26 + _124;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _127 = *_126;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: _128 = _127 * _127;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: *_125 = _128;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: _130 = Iyy_34 + _124;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _131 = Iy_28 + _124;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _132 = *_131;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: _133 = _132 * _132;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: *_130 = _133;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: _135 = Ixy_32 + _124;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: _136 = _127 * _132;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: *_135 = _136;

harris.cpp:225:5: note: get vectype for scalar type:  float
harris.cpp:225:5: note: vectype: vector(4) float
harris.cpp:225:5: note: nunits = 4
harris.cpp:225:5: note: ==> examining statement: j_138 = j_321 + 1;

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: ==> examining statement: if (C_19(D) >= j_138)

harris.cpp:225:5: note: skip.
harris.cpp:225:5: note: vectorization factor = 4
harris.cpp:225:5: note: === vect_analyze_data_refs_alignment ===
harris.cpp:225:5: note: vect_compute_data_ref_alignment:
harris.cpp:225:5: note: can't force alignment of ref: *_126
harris.cpp:225:5: note: vect_compute_data_ref_alignment:
harris.cpp:225:5: note: can't force alignment of ref: *_125
harris.cpp:225:5: note: vect_compute_data_ref_alignment:
harris.cpp:225:5: note: can't force alignment of ref: *_131
harris.cpp:225:5: note: vect_compute_data_ref_alignment:
harris.cpp:225:5: note: can't force alignment of ref: *_130
harris.cpp:225:5: note: vect_compute_data_ref_alignment:
harris.cpp:225:5: note: can't force alignment of ref: *_135
harris.cpp:225:5: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:225:5: note: === vect_enhance_data_refs_alignment ===
harris.cpp:225:5: note: Unknown misalignment, is_packed = 0
harris.cpp:225:5: note: Unknown misalignment, is_packed = 0
harris.cpp:225:5: note: Unknown misalignment, is_packed = 0
harris.cpp:225:5: note: Unknown misalignment, is_packed = 0
harris.cpp:225:5: note: Unknown misalignment, is_packed = 0
harris.cpp:225:5: note: vect_can_advance_ivs_p:
harris.cpp:225:5: note: Analyze phi: j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: Analyze phi: .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: virtual phi. skip.
harris.cpp:225:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:225:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Setting misalignment to -1.
harris.cpp:225:5: note: Alignment of access forced using peeling.
harris.cpp:225:5: note: Peeling for alignment will be applied.
harris.cpp:225:5: note: Vectorizing an unaligned access.
harris.cpp:225:5: note: Vectorizing an unaligned access.
harris.cpp:225:5: note: Vectorizing an unaligned access.
harris.cpp:225:5: note: Vectorizing an unaligned access.
harris.cpp:225:5: note: === vect_analyze_slp ===
harris.cpp:225:5: note: === vect_make_slp_decision ===
harris.cpp:225:5: note: === vect_detect_hybrid_slp ===
harris.cpp:225:5: note: === vect_analyze_loop_operations ===
harris.cpp:225:5: note: examining phi: j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: examining phi: .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: ==> examining statement: _122 = j_321 + pretmp_989;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _123 = (long unsigned int) _122;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _124 = _123 * 4;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _125 = Ixx_30 + _124;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _126 = Ix_26 + _124;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _127 = *_126;

harris.cpp:225:5: note: vect_is_simple_use: operand *_126
harris.cpp:225:5: note: not ssa-name.
harris.cpp:225:5: note: use not simple.
harris.cpp:225:5: note: vect_is_simple_use: operand *_126
harris.cpp:225:5: note: not ssa-name.
harris.cpp:225:5: note: use not simple.
harris.cpp:225:5: note: vect_model_load_cost: aligned.
harris.cpp:225:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: _128 = _127 * _127;

harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: === vectorizable_operation ===
harris.cpp:225:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: *_125 = _128;

harris.cpp:225:5: note: vect_is_simple_use: operand _128
harris.cpp:225:5: note: def_stmt: _128 = _127 * _127;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: _130 = Iyy_34 + _124;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _131 = Iy_28 + _124;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _132 = *_131;

harris.cpp:225:5: note: vect_is_simple_use: operand *_131
harris.cpp:225:5: note: not ssa-name.
harris.cpp:225:5: note: use not simple.
harris.cpp:225:5: note: vect_is_simple_use: operand *_131
harris.cpp:225:5: note: not ssa-name.
harris.cpp:225:5: note: use not simple.
harris.cpp:225:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: _133 = _132 * _132;

harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: === vectorizable_operation ===
harris.cpp:225:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: *_130 = _133;

harris.cpp:225:5: note: vect_is_simple_use: operand _133
harris.cpp:225:5: note: def_stmt: _133 = _132 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: _135 = Ixy_32 + _124;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: _136 = _127 * _132;

harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: === vectorizable_operation ===
harris.cpp:225:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: *_135 = _136;

harris.cpp:225:5: note: vect_is_simple_use: operand _136
harris.cpp:225:5: note: def_stmt: _136 = _127 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:225:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:225:5: note: ==> examining statement: j_138 = j_321 + 1;

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: ==> examining statement: if (C_19(D) >= j_138)

harris.cpp:225:5: note: irrelevant.
harris.cpp:225:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:225:5: note: Cost model analysis: 
  Vector inside of loop cost: 12
  Vector prologue cost: 24
  Vector epilogue cost: 16
  Scalar iteration cost: 8
  Scalar outside cost: 7
  Vector outside cost: 40
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5

harris.cpp:225:5: note:   Runtime profitability threshold = 4
harris.cpp:225:5: note:   Static estimate profitability threshold = 4
harris.cpp:225:5: note: epilog loop required
harris.cpp:225:5: note: vect_can_advance_ivs_p:
harris.cpp:225:5: note: Analyze phi: j_321 = PHI <1(20), j_138(14)>

harris.cpp:225:5: note: Analyze phi: .MEM_328 = PHI <.MEM_259(20), .MEM_137(14)>

harris.cpp:225:5: note: virtual phi. skip.
harris.cpp:225:5: note: loop vectorized
harris.cpp:225:5: note: === vec_transform_loop ===
harris.cpp:225:5: note: Profitability threshold is 4 loop iterations.
harris.cpp:225:5: note: loop peeled for vectorization to enhance alignment
harris.cpp:225:5: note: created vectp.733_926
harris.cpp:225:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.733_926 & 15) >> 2) & 3, niters.732_927>
Removing basic block 83
<bb 83>:


;; Scaling loop 13 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 7 with scale 0.777800, bounding iterations to 0 from guessed 13
;; guessed iterations are now 11

loop at harris.cpp:227: if (ivtmp_628 < prologue_after_cost_adjust.735_744)

Setting upper bound of nb iterations for prologue loop to 3
harris.cpp:225:5: note: === vect_update_inits_of_dr ===
harris.cpp:225:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 90
<bb 90>:


;; Scaling loop 7 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 14 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.cpp:225:5: note: vect_update_ivs_after_vectorizer: phi: j_321 = PHI <j_743(94), j_138(14)>

harris.cpp:225:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_328 = PHI <.MEM_741(94), .MEM_137(14)>

harris.cpp:225:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:225:5: note: ------>vectorizing phi: j_321 = PHI <j_743(98), j_138(14)>

harris.cpp:225:5: note: ------>vectorizing phi: .MEM_328 = PHI <.MEM_741(98), .MEM_137(14)>

harris.cpp:225:5: note: ------>vectorizing statement: _122 = j_321 + pretmp_989;

harris.cpp:225:5: note: ------>vectorizing statement: _123 = (long unsigned int) _122;

harris.cpp:225:5: note: ------>vectorizing statement: _124 = _123 * 4;

harris.cpp:225:5: note: ------>vectorizing statement: _125 = Ixx_30 + _124;

harris.cpp:225:5: note: ------>vectorizing statement: _126 = Ix_26 + _124;

harris.cpp:225:5: note: ------>vectorizing statement: _127 = *_126;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: transform load. ncopies = 1
harris.cpp:225:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ix_26 + (sizetype) ((long unsigned int) pretmp_989 * 4)
harris.cpp:225:5: note: created vectp.742_1034
harris.cpp:225:5: note: add new stmt: vect__127.743_1041 = MEM[(float *)vectp.741_1039];

harris.cpp:225:5: note: ------>vectorizing statement: _128 = _127 * _127;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform binary/unary operation.
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _127
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _127
  def_stmt =  _127 = *_126;

harris.cpp:225:5: note: vect_get_vec_def_for_operand: _127
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _127
  def_stmt =  _127 = *_126;

harris.cpp:225:5: note: add new stmt: vect__128.744_1042 = vect__127.743_1041 * vect__127.743_1041;

harris.cpp:225:5: note: ------>vectorizing statement: *_125 = _128;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _128
harris.cpp:225:5: note: def_stmt: _128 = _127 * _127;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform store. ncopies = 1
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _128
harris.cpp:225:5: note: vect_is_simple_use: operand _128
harris.cpp:225:5: note: def_stmt: _128 = _127 * _127;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _128
  def_stmt =  _128 = _127 * _127;

harris.cpp:225:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixx_30 + (sizetype) ((long unsigned int) pretmp_989 * 4)
harris.cpp:225:5: note: created vectp.746_1043
harris.cpp:225:5: note: add new stmt: MEM[(float *)vectp.745_1048] = vect__128.744_1042;

harris.cpp:225:5: note: ------>vectorizing statement: _130 = Iyy_34 + _124;

harris.cpp:225:5: note: ------>vectorizing statement: _131 = Iy_28 + _124;

harris.cpp:225:5: note: ------>vectorizing statement: _132 = *_131;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: transform load. ncopies = 1
harris.cpp:225:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iy_28 + (sizetype) ((long unsigned int) pretmp_989 * 4)
harris.cpp:225:5: note: created vectp.748_129
harris.cpp:225:5: note: add new stmt: vect__132.749_1057 = MEM[(float *)vectp.747_1055];

harris.cpp:225:5: note: ------>vectorizing statement: _133 = _132 * _132;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform binary/unary operation.
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _132
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _132
  def_stmt =  _132 = *_131;

harris.cpp:225:5: note: vect_get_vec_def_for_operand: _132
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _132
  def_stmt =  _132 = *_131;

harris.cpp:225:5: note: add new stmt: vect__133.750_1058 = vect__132.749_1057 * vect__132.749_1057;

harris.cpp:225:5: note: ------>vectorizing statement: *_130 = _133;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _133
harris.cpp:225:5: note: def_stmt: _133 = _132 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform store. ncopies = 1
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _133
harris.cpp:225:5: note: vect_is_simple_use: operand _133
harris.cpp:225:5: note: def_stmt: _133 = _132 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _133
  def_stmt =  _133 = _132 * _132;

harris.cpp:225:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iyy_34 + (sizetype) ((long unsigned int) pretmp_989 * 4)
harris.cpp:225:5: note: created vectp.752_1059
harris.cpp:225:5: note: add new stmt: MEM[(float *)vectp.751_1064] = vect__133.750_1058;

harris.cpp:225:5: note: ------>vectorizing statement: _135 = Ixy_32 + _124;

harris.cpp:225:5: note: ------>vectorizing statement: _136 = _127 * _132;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform binary/unary operation.
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _127
harris.cpp:225:5: note: vect_is_simple_use: operand _127
harris.cpp:225:5: note: def_stmt: _127 = *_126;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _127
  def_stmt =  _127 = *_126;

harris.cpp:225:5: note: vect_get_vec_def_for_operand: _132
harris.cpp:225:5: note: vect_is_simple_use: operand _132
harris.cpp:225:5: note: def_stmt: _132 = *_131;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _132
  def_stmt =  _132 = *_131;

harris.cpp:225:5: note: add new stmt: vect__136.753_134 = vect__127.743_1041 * vect__132.749_1057;

harris.cpp:225:5: note: ------>vectorizing statement: *_135 = _136;

harris.cpp:225:5: note: transform statement.
harris.cpp:225:5: note: vect_is_simple_use: operand _136
harris.cpp:225:5: note: def_stmt: _136 = _127 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: transform store. ncopies = 1
harris.cpp:225:5: note: vect_get_vec_def_for_operand: _136
harris.cpp:225:5: note: vect_is_simple_use: operand _136
harris.cpp:225:5: note: def_stmt: _136 = _127 * _132;

harris.cpp:225:5: note: type of def: 3.
harris.cpp:225:5: note: def =  _136
  def_stmt =  _136 = _127 * _132;

harris.cpp:225:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ixy_32 + (sizetype) ((long unsigned int) pretmp_989 * 4)
harris.cpp:225:5: note: created vectp.755_1067
harris.cpp:225:5: note: add new stmt: MEM[(float *)vectp.754_1072] = vect__136.753_134;

harris.cpp:225:5: note: ------>vectorizing statement: j_138 = j_321 + 1;

harris.cpp:225:5: note: ------>vectorizing statement: vectp.741_1040 = vectp.741_1039 + 16;

harris.cpp:225:5: note: ------>vectorizing statement: vectp.745_1049 = vectp.745_1048 + 16;

harris.cpp:225:5: note: ------>vectorizing statement: vectp.747_1056 = vectp.747_1055 + 16;

harris.cpp:225:5: note: ------>vectorizing statement: vectp.751_1065 = vectp.751_1064 + 16;

harris.cpp:225:5: note: ------>vectorizing statement: vectp.754_1073 = vectp.754_1072 + 16;

harris.cpp:225:5: note: ------>vectorizing statement: if (C_19(D) >= j_138)


loop at harris.cpp:227: if (ivtmp_1075 < bnd.738_1000)

;; Scaling loop 7 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
harris.cpp:225:5: note: LOOP VECTORIZED


Analyzing loop at harris.cpp:203
harris.cpp:203:3: note: ===== analyze_loop_nest =====
harris.cpp:203:3: note: === vect_analyze_loop_form ===
harris.cpp:203:3: note: ===== analyze_loop_nest_1 =====
harris.cpp:203:3: note: === vect_analyze_loop_form ===
harris.cpp:203:3: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [2, + , 1](no_overflow) <= C_19(D)
  bounds on difference of bases: -1 ... 2147483645
  result:
    # of iterations (unsigned int) C_19(D) + 4294967295, bounded by 2147483646
harris.cpp:203:3: note: Symbolic number of iterations is (unsigned int) C_19(D)
harris.cpp:203:3: note: not vectorized: control flow in loop.
harris.cpp:203:3: note: bad loop form.

Analyzing loop at harris.cpp:205
harris.cpp:205:5: note: ===== analyze_loop_nest =====
harris.cpp:205:5: note: === vect_analyze_loop_form ===
harris.cpp:205:5: note: === get_loop_niters ===
harris.cpp:205:5: note: Symbolic number of iterations is (unsigned int) C_19(D)
harris.cpp:205:5: note: === vect_analyze_data_refs ===
Creating dr for *_57
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	Access function 0: {0B, +, 4}_8
Creating dr for *_65
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	Access function 0: {0B, +, 4}_8
Creating dr for *_72
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	Access function 0: {4B, +, 4}_8
Creating dr for *_79
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	Access function 0: {4B, +, 4}_8
Creating dr for *_87
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
	Access function 0: {8B, +, 4}_8
Creating dr for *_94
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
	Access function 0: {8B, +, 4}_8
Creating dr for *_49
analyze_innermost: success.
	base_address: Ix_26 + (sizetype) ((long unsigned int) pretmp_916 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Ix_26 + (sizetype) ((long unsigned int) pretmp_916 * 4)
	Access function 0: {4B, +, 4}_8
Creating dr for *_105
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
	Access function 0: {0B, +, 4}_8
Creating dr for *_112
analyze_innermost: success.
	base_address: img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
	Access function 0: {8B, +, 4}_8
Creating dr for *_99
analyze_innermost: success.
	base_address: Iy_28 + (sizetype) ((long unsigned int) pretmp_916 * 4)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *Iy_28 + (sizetype) ((long unsigned int) pretmp_916 * 4)
	Access function 0: {4B, +, 4}_8
harris.cpp:205:5: note: got vectype for stmt: _58 = *_57;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _66 = *_65;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _73 = *_72;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _80 = *_79;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _88 = *_87;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _95 = *_94;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: *_49 = _97;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _106 = *_105;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: _113 = *_112;
vector(4) float
harris.cpp:205:5: note: got vectype for stmt: *_99 = _118;
vector(4) float
harris.cpp:205:5: note: === vect_analyze_scalar_cycles ===
harris.cpp:205:5: note: Analyze phi: j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: Access function of PHI: {1, +, 1}_8
harris.cpp:205:5: note: step: 1,  init: 1
harris.cpp:205:5: note: Detected induction.
harris.cpp:205:5: note: Analyze phi: .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: === vect_pattern_recog ===
harris.cpp:205:5: note: vect_is_simple_use: operand _47
harris.cpp:205:5: note: def_stmt: _47 = (long unsigned int) _46;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _46
harris.cpp:205:5: note: def_stmt: _46 = j_319 + pretmp_916;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _54
harris.cpp:205:5: note: def_stmt: _54 = (long unsigned int) _53;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _53
harris.cpp:205:5: note: def_stmt: _53 = _52 + pretmp_921;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _58
harris.cpp:205:5: note: def_stmt: _58 = *_57;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _63
harris.cpp:205:5: note: def_stmt: _63 = (long unsigned int) _62;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _62
harris.cpp:205:5: note: def_stmt: _62 = _52 + pretmp_924;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _70
harris.cpp:205:5: note: def_stmt: _70 = (long unsigned int) _69;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _69
harris.cpp:205:5: note: def_stmt: _69 = j_319 + pretmp_921;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _73
harris.cpp:205:5: note: def_stmt: _73 = *_72;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _77
harris.cpp:205:5: note: def_stmt: _77 = (long unsigned int) _76;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _76
harris.cpp:205:5: note: def_stmt: _76 = j_319 + pretmp_924;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _80
harris.cpp:205:5: note: def_stmt: _80 = *_79;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _85
harris.cpp:205:5: note: def_stmt: _85 = (long unsigned int) _84;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _84
harris.cpp:205:5: note: def_stmt: _84 = j_83 + pretmp_921;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _92
harris.cpp:205:5: note: def_stmt: _92 = (long unsigned int) _91;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _91
harris.cpp:205:5: note: def_stmt: _91 = j_83 + pretmp_924;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _95
harris.cpp:205:5: note: def_stmt: _95 = *_94;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _103
harris.cpp:205:5: note: def_stmt: _103 = (long unsigned int) _102;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _102
harris.cpp:205:5: note: def_stmt: _102 = _52 + pretmp_916;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _106
harris.cpp:205:5: note: def_stmt: _106 = *_105;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _110
harris.cpp:205:5: note: def_stmt: _110 = (long unsigned int) _109;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _109
harris.cpp:205:5: note: def_stmt: _109 = j_83 + pretmp_916;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 4
harris.cpp:205:5: note: vect_is_simple_use: operand _113
harris.cpp:205:5: note: def_stmt: _113 = *_112;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vect_analyze_data_ref_accesses ===
harris.cpp:205:5: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:205:5: note: init: phi relevant? j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: init: phi relevant? .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: init: stmt relevant? _46 = j_319 + pretmp_916;

harris.cpp:205:5: note: init: stmt relevant? _47 = (long unsigned int) _46;

harris.cpp:205:5: note: init: stmt relevant? _48 = _47 * 4;

harris.cpp:205:5: note: init: stmt relevant? _49 = Ix_26 + _48;

harris.cpp:205:5: note: init: stmt relevant? _52 = j_319 + -1;

harris.cpp:205:5: note: init: stmt relevant? _53 = _52 + pretmp_921;

harris.cpp:205:5: note: init: stmt relevant? _54 = (long unsigned int) _53;

harris.cpp:205:5: note: init: stmt relevant? _55 = _54 * 4;

harris.cpp:205:5: note: init: stmt relevant? _57 = img_56(D) + _55;

harris.cpp:205:5: note: init: stmt relevant? _58 = *_57;

harris.cpp:205:5: note: init: stmt relevant? _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _62 = _52 + pretmp_924;

harris.cpp:205:5: note: init: stmt relevant? _63 = (long unsigned int) _62;

harris.cpp:205:5: note: init: stmt relevant? _64 = _63 * 4;

harris.cpp:205:5: note: init: stmt relevant? _65 = img_56(D) + _64;

harris.cpp:205:5: note: init: stmt relevant? _66 = *_65;

harris.cpp:205:5: note: init: stmt relevant? _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _68 = _59 + _67;

harris.cpp:205:5: note: init: stmt relevant? _69 = j_319 + pretmp_921;

harris.cpp:205:5: note: init: stmt relevant? _70 = (long unsigned int) _69;

harris.cpp:205:5: note: init: stmt relevant? _71 = _70 * 4;

harris.cpp:205:5: note: init: stmt relevant? _72 = img_56(D) + _71;

harris.cpp:205:5: note: init: stmt relevant? _73 = *_72;

harris.cpp:205:5: note: init: stmt relevant? _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: init: stmt relevant? _75 = _68 + _74;

harris.cpp:205:5: note: init: stmt relevant? _76 = j_319 + pretmp_924;

harris.cpp:205:5: note: init: stmt relevant? _77 = (long unsigned int) _76;

harris.cpp:205:5: note: init: stmt relevant? _78 = _77 * 4;

harris.cpp:205:5: note: init: stmt relevant? _79 = img_56(D) + _78;

harris.cpp:205:5: note: init: stmt relevant? _80 = *_79;

harris.cpp:205:5: note: init: stmt relevant? _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: init: stmt relevant? _82 = _75 + _81;

harris.cpp:205:5: note: init: stmt relevant? j_83 = j_319 + 1;

harris.cpp:205:5: note: init: stmt relevant? _84 = j_83 + pretmp_921;

harris.cpp:205:5: note: init: stmt relevant? _85 = (long unsigned int) _84;

harris.cpp:205:5: note: init: stmt relevant? _86 = _85 * 4;

harris.cpp:205:5: note: init: stmt relevant? _87 = img_56(D) + _86;

harris.cpp:205:5: note: init: stmt relevant? _88 = *_87;

harris.cpp:205:5: note: init: stmt relevant? _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _90 = _82 + _89;

harris.cpp:205:5: note: init: stmt relevant? _91 = j_83 + pretmp_924;

harris.cpp:205:5: note: init: stmt relevant? _92 = (long unsigned int) _91;

harris.cpp:205:5: note: init: stmt relevant? _93 = _92 * 4;

harris.cpp:205:5: note: init: stmt relevant? _94 = img_56(D) + _93;

harris.cpp:205:5: note: init: stmt relevant? _95 = *_94;

harris.cpp:205:5: note: init: stmt relevant? _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _97 = _90 + _96;

harris.cpp:205:5: note: init: stmt relevant? *_49 = _97;

harris.cpp:205:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: init: stmt relevant? _99 = Iy_28 + _48;

harris.cpp:205:5: note: init: stmt relevant? _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _101 = _59 + _100;

harris.cpp:205:5: note: init: stmt relevant? _102 = _52 + pretmp_916;

harris.cpp:205:5: note: init: stmt relevant? _103 = (long unsigned int) _102;

harris.cpp:205:5: note: init: stmt relevant? _104 = _103 * 4;

harris.cpp:205:5: note: init: stmt relevant? _105 = img_56(D) + _104;

harris.cpp:205:5: note: init: stmt relevant? _106 = *_105;

harris.cpp:205:5: note: init: stmt relevant? _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: init: stmt relevant? _108 = _101 + _107;

harris.cpp:205:5: note: init: stmt relevant? _109 = j_83 + pretmp_916;

harris.cpp:205:5: note: init: stmt relevant? _110 = (long unsigned int) _109;

harris.cpp:205:5: note: init: stmt relevant? _111 = _110 * 4;

harris.cpp:205:5: note: init: stmt relevant? _112 = img_56(D) + _111;

harris.cpp:205:5: note: init: stmt relevant? _113 = *_112;

harris.cpp:205:5: note: init: stmt relevant? _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: init: stmt relevant? _115 = _108 + _114;

harris.cpp:205:5: note: init: stmt relevant? _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: init: stmt relevant? _117 = _115 + _116;

harris.cpp:205:5: note: init: stmt relevant? _118 = _96 + _117;

harris.cpp:205:5: note: init: stmt relevant? *_99 = _118;

harris.cpp:205:5: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: init: stmt relevant? if (C_19(D) >= j_83)

harris.cpp:205:5: note: worklist: examine stmt: *_99 = _118;

harris.cpp:205:5: note: vect_is_simple_use: operand _118
harris.cpp:205:5: note: def_stmt: _118 = _96 + _117;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _118 = _96 + _117;

harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _117
harris.cpp:205:5: note: def_stmt: _117 = _115 + _116;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _117 = _115 + _116;

harris.cpp:205:5: note: vect_is_simple_use: operand _115
harris.cpp:205:5: note: def_stmt: _115 = _108 + _114;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _116
harris.cpp:205:5: note: def_stmt: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _66 = *_65;

harris.cpp:205:5: note: worklist: examine stmt: _115 = _108 + _114;

harris.cpp:205:5: note: vect_is_simple_use: operand _108
harris.cpp:205:5: note: def_stmt: _108 = _101 + _107;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _114
harris.cpp:205:5: note: def_stmt: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _113
harris.cpp:205:5: note: def_stmt: _113 = *_112;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _113 = *_112;

harris.cpp:205:5: note: worklist: examine stmt: _108 = _101 + _107;

harris.cpp:205:5: note: vect_is_simple_use: operand _101
harris.cpp:205:5: note: def_stmt: _101 = _59 + _100;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _107
harris.cpp:205:5: note: def_stmt: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _106
harris.cpp:205:5: note: def_stmt: _106 = *_105;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _106 = *_105;

harris.cpp:205:5: note: worklist: examine stmt: _101 = _59 + _100;

harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _100
harris.cpp:205:5: note: def_stmt: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _88 = *_87;

harris.cpp:205:5: note: worklist: examine stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _58
harris.cpp:205:5: note: def_stmt: _58 = *_57;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _58 = *_57;

harris.cpp:205:5: note: worklist: examine stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _95
harris.cpp:205:5: note: def_stmt: _95 = *_94;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _95 = *_94;

harris.cpp:205:5: note: worklist: examine stmt: *_49 = _97;

harris.cpp:205:5: note: vect_is_simple_use: operand _97
harris.cpp:205:5: note: def_stmt: _97 = _90 + _96;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _97 = _90 + _96;

harris.cpp:205:5: note: vect_is_simple_use: operand _90
harris.cpp:205:5: note: def_stmt: _90 = _82 + _89;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: already marked relevant/live.
harris.cpp:205:5: note: worklist: examine stmt: _90 = _82 + _89;

harris.cpp:205:5: note: vect_is_simple_use: operand _82
harris.cpp:205:5: note: def_stmt: _82 = _75 + _81;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _89
harris.cpp:205:5: note: def_stmt: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: already marked relevant/live.
harris.cpp:205:5: note: worklist: examine stmt: _82 = _75 + _81;

harris.cpp:205:5: note: vect_is_simple_use: operand _75
harris.cpp:205:5: note: def_stmt: _75 = _68 + _74;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _81
harris.cpp:205:5: note: def_stmt: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _80
harris.cpp:205:5: note: def_stmt: _80 = *_79;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _80 = *_79;

harris.cpp:205:5: note: worklist: examine stmt: _75 = _68 + _74;

harris.cpp:205:5: note: vect_is_simple_use: operand _68
harris.cpp:205:5: note: def_stmt: _68 = _59 + _67;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: vect_is_simple_use: operand _74
harris.cpp:205:5: note: def_stmt: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _73
harris.cpp:205:5: note: def_stmt: _73 = *_72;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _73 = *_72;

harris.cpp:205:5: note: worklist: examine stmt: _68 = _59 + _67;

harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: already marked relevant/live.
harris.cpp:205:5: note: vect_is_simple_use: operand _67
harris.cpp:205:5: note: def_stmt: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: worklist: examine stmt: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: mark relevant 4, live 0.
harris.cpp:205:5: note: already marked relevant/live.
harris.cpp:205:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _66 = *_65;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _73 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _80 = *_79;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _88 = *_87;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _73 = *_72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _80 = *_79;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _80 = *_79;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _88 = *_87;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: _88 = *_87;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _95 = *_94;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_49 = _97;
) -> no dependence
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _113 = *_112;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_49 = _97;
  stmt_b: _106 = *_105;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_49 = _97;
  stmt_b: _113 = *_112;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_49 = _97;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _106 = *_105;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _106 = *_105;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: *_99 = _118;
) -> no dependence
(compute_affine_dependence
  stmt_a: _58 = *_57;
  stmt_b: _58 = *_57;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {0B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_65;
  stmt_b: _66 = *_65;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {0B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _73 = *_72;
  stmt_b: _73 = *_72;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _80 = *_79;
  stmt_b: _80 = *_79;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _88 = *_87;
  stmt_b: _88 = *_87;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_49 = _97;
  stmt_b: *_49 = _97;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _106 = *_105;
  stmt_b: _106 = *_105;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_8)
  (chrec_b = {0B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_99 = _118;
  stmt_b: *_99 = _118;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_8)
  (chrec_b = {4B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:205:5: note: === vect_determine_vectorization_factor ===
harris.cpp:205:5: note: ==> examining phi: j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: ==> examining phi: .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: ==> examining statement: _46 = j_319 + pretmp_916;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _47 = (long unsigned int) _46;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _48 = _47 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _49 = Ix_26 + _48;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _52 = j_319 + -1;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _53 = _52 + pretmp_921;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _54 = (long unsigned int) _53;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _55 = _54 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _57 = img_56(D) + _55;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _58 = *_57;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _62 = _52 + pretmp_924;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _63 = (long unsigned int) _62;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _64 = _63 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _65 = img_56(D) + _64;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _66 = *_65;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _68 = _59 + _67;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _69 = j_319 + pretmp_921;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _70 = (long unsigned int) _69;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _71 = _70 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _72 = img_56(D) + _71;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _73 = *_72;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _75 = _68 + _74;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _76 = j_319 + pretmp_924;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _77 = (long unsigned int) _76;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _78 = _77 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _79 = img_56(D) + _78;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _80 = *_79;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _82 = _75 + _81;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: j_83 = j_319 + 1;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _84 = j_83 + pretmp_921;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _85 = (long unsigned int) _84;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _86 = _85 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _87 = img_56(D) + _86;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _88 = *_87;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _90 = _82 + _89;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _91 = j_83 + pretmp_924;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _92 = (long unsigned int) _91;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _93 = _92 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _94 = img_56(D) + _93;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _95 = *_94;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _97 = _90 + _96;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: *_49 = _97;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _99 = Iy_28 + _48;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _101 = _59 + _100;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _102 = _52 + pretmp_916;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _103 = (long unsigned int) _102;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _104 = _103 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _105 = img_56(D) + _104;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _106 = *_105;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _108 = _101 + _107;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _109 = j_83 + pretmp_916;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _110 = (long unsigned int) _109;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _111 = _110 * 4;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _112 = img_56(D) + _111;

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: ==> examining statement: _113 = *_112;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _115 = _108 + _114;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _117 = _115 + _116;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: _118 = _96 + _117;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: *_99 = _118;

harris.cpp:205:5: note: get vectype for scalar type:  float
harris.cpp:205:5: note: vectype: vector(4) float
harris.cpp:205:5: note: nunits = 4
harris.cpp:205:5: note: ==> examining statement: if (C_19(D) >= j_83)

harris.cpp:205:5: note: skip.
harris.cpp:205:5: note: vectorization factor = 4
harris.cpp:205:5: note: === vect_analyze_data_refs_alignment ===
harris.cpp:205:5: note: dependence distance  = 1.
harris.cpp:205:5: note: dependence distance  = 2.
harris.cpp:205:5: note: dependence distance  = 1.
harris.cpp:205:5: note: dependence distance  = 2.
harris.cpp:205:5: note: dependence distance  = 1.
harris.cpp:205:5: note: dependence distance  = 1.
harris.cpp:205:5: note: dependence distance  = 2.
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_57
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_65
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_72
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_79
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_87
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_94
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_49
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_105
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_112
harris.cpp:205:5: note: vect_compute_data_ref_alignment:
harris.cpp:205:5: note: can't force alignment of ref: *_99
harris.cpp:205:5: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:205:5: note: === vect_enhance_data_refs_alignment ===
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: Unknown misalignment, is_packed = 0
harris.cpp:205:5: note: vect_can_advance_ivs_p:
harris.cpp:205:5: note: Analyze phi: j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: Analyze phi: .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: virtual phi. skip.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:205:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Setting misalignment to -1.
harris.cpp:205:5: note: Alignment of access forced using peeling.
harris.cpp:205:5: note: Peeling for alignment will be applied.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: Vectorizing an unaligned access.
harris.cpp:205:5: note: === vect_analyze_slp ===
harris.cpp:205:5: note: === vect_make_slp_decision ===
harris.cpp:205:5: note: === vect_detect_hybrid_slp ===
harris.cpp:205:5: note: === vect_analyze_loop_operations ===
harris.cpp:205:5: note: examining phi: j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: examining phi: .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: ==> examining statement: _46 = j_319 + pretmp_916;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _47 = (long unsigned int) _46;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _48 = _47 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _49 = Ix_26 + _48;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _52 = j_319 + -1;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _53 = _52 + pretmp_921;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _54 = (long unsigned int) _53;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _55 = _54 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _57 = img_56(D) + _55;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _58 = *_57;

harris.cpp:205:5: note: vect_is_simple_use: operand *_57
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_57
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: aligned.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _58
harris.cpp:205:5: note: def_stmt: _58 = *_57;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _62 = _52 + pretmp_924;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _63 = (long unsigned int) _62;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _64 = _63 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _65 = img_56(D) + _64;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _66 = *_65;

harris.cpp:205:5: note: vect_is_simple_use: operand *_65
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_65
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _68 = _59 + _67;

harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _67
harris.cpp:205:5: note: def_stmt: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _69 = j_319 + pretmp_921;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _70 = (long unsigned int) _69;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _71 = _70 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _72 = img_56(D) + _71;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _73 = *_72;

harris.cpp:205:5: note: vect_is_simple_use: operand *_72
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_72
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _73
harris.cpp:205:5: note: def_stmt: _73 = *_72;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _75 = _68 + _74;

harris.cpp:205:5: note: vect_is_simple_use: operand _68
harris.cpp:205:5: note: def_stmt: _68 = _59 + _67;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _74
harris.cpp:205:5: note: def_stmt: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _76 = j_319 + pretmp_924;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _77 = (long unsigned int) _76;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _78 = _77 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _79 = img_56(D) + _78;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _80 = *_79;

harris.cpp:205:5: note: vect_is_simple_use: operand *_79
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_79
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _80
harris.cpp:205:5: note: def_stmt: _80 = *_79;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _82 = _75 + _81;

harris.cpp:205:5: note: vect_is_simple_use: operand _75
harris.cpp:205:5: note: def_stmt: _75 = _68 + _74;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _81
harris.cpp:205:5: note: def_stmt: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: j_83 = j_319 + 1;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _84 = j_83 + pretmp_921;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _85 = (long unsigned int) _84;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _86 = _85 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _87 = img_56(D) + _86;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _88 = *_87;

harris.cpp:205:5: note: vect_is_simple_use: operand *_87
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_87
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _90 = _82 + _89;

harris.cpp:205:5: note: vect_is_simple_use: operand _82
harris.cpp:205:5: note: def_stmt: _82 = _75 + _81;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _89
harris.cpp:205:5: note: def_stmt: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _91 = j_83 + pretmp_924;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _92 = (long unsigned int) _91;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _93 = _92 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _94 = img_56(D) + _93;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _95 = *_94;

harris.cpp:205:5: note: vect_is_simple_use: operand *_94
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_94
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _95
harris.cpp:205:5: note: def_stmt: _95 = *_94;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _97 = _90 + _96;

harris.cpp:205:5: note: vect_is_simple_use: operand _90
harris.cpp:205:5: note: def_stmt: _90 = _82 + _89;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: *_49 = _97;

harris.cpp:205:5: note: vect_is_simple_use: operand _97
harris.cpp:205:5: note: def_stmt: _97 = _90 + _96;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _99 = Iy_28 + _48;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _101 = _59 + _100;

harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _100
harris.cpp:205:5: note: def_stmt: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _102 = _52 + pretmp_916;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _103 = (long unsigned int) _102;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _104 = _103 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _105 = img_56(D) + _104;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _106 = *_105;

harris.cpp:205:5: note: vect_is_simple_use: operand *_105
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_105
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _106
harris.cpp:205:5: note: def_stmt: _106 = *_105;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _108 = _101 + _107;

harris.cpp:205:5: note: vect_is_simple_use: operand _101
harris.cpp:205:5: note: def_stmt: _101 = _59 + _100;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _107
harris.cpp:205:5: note: def_stmt: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _109 = j_83 + pretmp_916;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _110 = (long unsigned int) _109;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _111 = _110 * 4;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _112 = img_56(D) + _111;

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: ==> examining statement: _113 = *_112;

harris.cpp:205:5: note: vect_is_simple_use: operand *_112
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_is_simple_use: operand *_112
harris.cpp:205:5: note: not ssa-name.
harris.cpp:205:5: note: use not simple.
harris.cpp:205:5: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: vect_is_simple_use: operand _113
harris.cpp:205:5: note: def_stmt: _113 = *_112;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _115 = _108 + _114;

harris.cpp:205:5: note: vect_is_simple_use: operand _108
harris.cpp:205:5: note: def_stmt: _108 = _101 + _107;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _114
harris.cpp:205:5: note: def_stmt: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
harris.cpp:205:5: note: ==> examining statement: _117 = _115 + _116;

harris.cpp:205:5: note: vect_is_simple_use: operand _115
harris.cpp:205:5: note: def_stmt: _115 = _108 + _114;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _116
harris.cpp:205:5: note: def_stmt: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: _118 = _96 + _117;

harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _117
harris.cpp:205:5: note: def_stmt: _117 = _115 + _116;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: === vectorizable_operation ===
harris.cpp:205:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: *_99 = _118;

harris.cpp:205:5: note: vect_is_simple_use: operand _118
harris.cpp:205:5: note: def_stmt: _118 = _96 + _117;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:205:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:205:5: note: ==> examining statement: if (C_19(D) >= j_83)

harris.cpp:205:5: note: irrelevant.
harris.cpp:205:5: note: === vect_update_slp_costs_according_to_vf ===
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:205:5: note: Cost model analysis: 
  Vector inside of loop cost: 39
  Vector prologue cost: 78
  Vector epilogue cost: 60
  Scalar iteration cost: 30
  Scalar outside cost: 7
  Vector outside cost: 138
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5

harris.cpp:205:5: note:   Runtime profitability threshold = 4
harris.cpp:205:5: note:   Static estimate profitability threshold = 4
harris.cpp:205:5: note: epilog loop required
harris.cpp:205:5: note: vect_can_advance_ivs_p:
harris.cpp:205:5: note: Analyze phi: j_319 = PHI <1(11), j_83(4)>

harris.cpp:205:5: note: Analyze phi: .MEM_326 = PHI <.MEM_301(11), .MEM_119(4)>

harris.cpp:205:5: note: virtual phi. skip.
harris.cpp:205:5: note: loop vectorized
harris.cpp:205:5: note: === vec_transform_loop ===
harris.cpp:205:5: note: Profitability threshold is 4 loop iterations.
harris.cpp:205:5: note: loop peeled for vectorization to enhance alignment
harris.cpp:205:5: note: created vectp.757_1077
harris.cpp:205:5: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.757_1077 & 15) >> 2) & 3, niters.756_1076>
Removing basic block 102
<bb 102>:


;; Scaling loop 15 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 8 with scale 0.777800, bounding iterations to 0 from guessed 13
;; guessed iterations are now 11

loop at harris.cpp:208: if (ivtmp_1166 < prologue_after_cost_adjust.759_1158)

Setting upper bound of nb iterations for prologue loop to 3
harris.cpp:205:5: note: === vect_update_inits_of_dr ===
harris.cpp:205:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 109
<bb 109>:


;; Scaling loop 8 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 16 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
harris.cpp:205:5: note: vect_update_ivs_after_vectorizer: phi: j_319 = PHI <j_1159(113), j_83(4)>

harris.cpp:205:5: note: vect_update_ivs_after_vectorizer: phi: .MEM_326 = PHI <.MEM_1161(113), .MEM_119(4)>

harris.cpp:205:5: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:205:5: note: ------>vectorizing phi: j_319 = PHI <j_1159(117), j_83(4)>

harris.cpp:205:5: note: ------>vectorizing phi: .MEM_326 = PHI <.MEM_1161(117), .MEM_119(4)>

harris.cpp:205:5: note: ------>vectorizing statement: _46 = j_319 + pretmp_916;

harris.cpp:205:5: note: ------>vectorizing statement: _47 = (long unsigned int) _46;

harris.cpp:205:5: note: ------>vectorizing statement: _48 = _47 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _49 = Ix_26 + _48;

harris.cpp:205:5: note: ------>vectorizing statement: _52 = j_319 + -1;

harris.cpp:205:5: note: ------>vectorizing statement: _53 = _52 + pretmp_921;

harris.cpp:205:5: note: ------>vectorizing statement: _54 = (long unsigned int) _53;

harris.cpp:205:5: note: ------>vectorizing statement: _55 = _54 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _57 = img_56(D) + _55;

harris.cpp:205:5: note: ------>vectorizing statement: _58 = *_57;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
harris.cpp:205:5: note: created vectp.766_1255
harris.cpp:205:5: note: add new stmt: vect__58.767_1261 = MEM[(float *)vectp.765_1259];

harris.cpp:205:5: note: ------>vectorizing statement: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _58
harris.cpp:205:5: note: def_stmt: _58 = *_57;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _58
harris.cpp:205:5: note: vect_is_simple_use: operand _58
harris.cpp:205:5: note: def_stmt: _58 = *_57;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _58
  def_stmt =  _58 = *_57;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.769_1262 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__59.768_1263 = vect__58.767_1261 * vect_cst_.769_1262;

harris.cpp:205:5: note: ------>vectorizing statement: _62 = _52 + pretmp_924;

harris.cpp:205:5: note: ------>vectorizing statement: _63 = (long unsigned int) _62;

harris.cpp:205:5: note: ------>vectorizing statement: _64 = _63 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _65 = img_56(D) + _64;

harris.cpp:205:5: note: ------>vectorizing statement: _66 = *_65;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
harris.cpp:205:5: note: created vectp.771_1264
harris.cpp:205:5: note: add new stmt: vect__66.772_1270 = MEM[(float *)vectp.770_1268];

harris.cpp:205:5: note: ------>vectorizing statement: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _66
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _66
  def_stmt =  _66 = *_65;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.774_1271 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__67.773_1272 = vect__66.772_1270 * vect_cst_.774_1271;

harris.cpp:205:5: note: ------>vectorizing statement: _68 = _59 + _67;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _67
harris.cpp:205:5: note: def_stmt: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _59
harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _59
  def_stmt =  _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _67
harris.cpp:205:5: note: vect_is_simple_use: operand _67
harris.cpp:205:5: note: def_stmt: _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _67
  def_stmt =  _67 = _66 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: add new stmt: vect__68.775_1273 = vect__59.768_1263 + vect__67.773_1272;

harris.cpp:205:5: note: ------>vectorizing statement: _69 = j_319 + pretmp_921;

harris.cpp:205:5: note: ------>vectorizing statement: _70 = (long unsigned int) _69;

harris.cpp:205:5: note: ------>vectorizing statement: _71 = _70 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _72 = img_56(D) + _71;

harris.cpp:205:5: note: ------>vectorizing statement: _73 = *_72;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
harris.cpp:205:5: note: created vectp.777_1274
harris.cpp:205:5: note: add new stmt: vect__73.778_1281 = MEM[(float *)vectp.776_1279];

harris.cpp:205:5: note: ------>vectorizing statement: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _73
harris.cpp:205:5: note: def_stmt: _73 = *_72;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _73
harris.cpp:205:5: note: vect_is_simple_use: operand _73
harris.cpp:205:5: note: def_stmt: _73 = *_72;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _73
  def_stmt =  _73 = *_72;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: -1.6666667163372039794921875e-1
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.780_1282 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };

harris.cpp:205:5: note: add new stmt: vect__74.779_1283 = vect__73.778_1281 * vect_cst_.780_1282;

harris.cpp:205:5: note: ------>vectorizing statement: _75 = _68 + _74;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _68
harris.cpp:205:5: note: def_stmt: _68 = _59 + _67;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _74
harris.cpp:205:5: note: def_stmt: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _68
harris.cpp:205:5: note: vect_is_simple_use: operand _68
harris.cpp:205:5: note: def_stmt: _68 = _59 + _67;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _68
  def_stmt =  _68 = _59 + _67;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _74
harris.cpp:205:5: note: vect_is_simple_use: operand _74
harris.cpp:205:5: note: def_stmt: _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _74
  def_stmt =  _74 = _73 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: add new stmt: vect__75.781_1284 = vect__68.775_1273 + vect__74.779_1283;

harris.cpp:205:5: note: ------>vectorizing statement: _76 = j_319 + pretmp_924;

harris.cpp:205:5: note: ------>vectorizing statement: _77 = (long unsigned int) _76;

harris.cpp:205:5: note: ------>vectorizing statement: _78 = _77 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _79 = img_56(D) + _78;

harris.cpp:205:5: note: ------>vectorizing statement: _80 = *_79;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
harris.cpp:205:5: note: created vectp.783_1285
harris.cpp:205:5: note: add new stmt: vect__80.784_1292 = MEM[(float *)vectp.782_1290];

harris.cpp:205:5: note: ------>vectorizing statement: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _80
harris.cpp:205:5: note: def_stmt: _80 = *_79;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _80
harris.cpp:205:5: note: vect_is_simple_use: operand _80
harris.cpp:205:5: note: def_stmt: _80 = *_79;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _80
  def_stmt =  _80 = *_79;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: 1.6666667163372039794921875e-1
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.786_1293 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };

harris.cpp:205:5: note: add new stmt: vect__81.785_1294 = vect__80.784_1292 * vect_cst_.786_1293;

harris.cpp:205:5: note: ------>vectorizing statement: _82 = _75 + _81;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _75
harris.cpp:205:5: note: def_stmt: _75 = _68 + _74;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _81
harris.cpp:205:5: note: def_stmt: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _75
harris.cpp:205:5: note: vect_is_simple_use: operand _75
harris.cpp:205:5: note: def_stmt: _75 = _68 + _74;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _75
  def_stmt =  _75 = _68 + _74;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _81
harris.cpp:205:5: note: vect_is_simple_use: operand _81
harris.cpp:205:5: note: def_stmt: _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _81
  def_stmt =  _81 = _80 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: add new stmt: vect__82.787_1295 = vect__75.781_1284 + vect__81.785_1294;

harris.cpp:205:5: note: ------>vectorizing statement: j_83 = j_319 + 1;

harris.cpp:205:5: note: ------>vectorizing statement: _84 = j_83 + pretmp_921;

harris.cpp:205:5: note: ------>vectorizing statement: _85 = (long unsigned int) _84;

harris.cpp:205:5: note: ------>vectorizing statement: _86 = _85 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _87 = img_56(D) + _86;

harris.cpp:205:5: note: ------>vectorizing statement: _88 = *_87;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_921 * 4)
harris.cpp:205:5: note: created vectp.789_1296
harris.cpp:205:5: note: add new stmt: vect__88.790_1303 = MEM[(float *)vectp.788_1301];

harris.cpp:205:5: note: ------>vectorizing statement: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _88
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _88
  def_stmt =  _88 = *_87;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.792_1304 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__89.791_1305 = vect__88.790_1303 * vect_cst_.792_1304;

harris.cpp:205:5: note: ------>vectorizing statement: _90 = _82 + _89;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _82
harris.cpp:205:5: note: def_stmt: _82 = _75 + _81;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _89
harris.cpp:205:5: note: def_stmt: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _82
harris.cpp:205:5: note: vect_is_simple_use: operand _82
harris.cpp:205:5: note: def_stmt: _82 = _75 + _81;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _82
  def_stmt =  _82 = _75 + _81;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _89
harris.cpp:205:5: note: vect_is_simple_use: operand _89
harris.cpp:205:5: note: def_stmt: _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _89
  def_stmt =  _89 = _88 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: add new stmt: vect__90.793_1306 = vect__82.787_1295 + vect__89.791_1305;

harris.cpp:205:5: note: ------>vectorizing statement: _91 = j_83 + pretmp_924;

harris.cpp:205:5: note: ------>vectorizing statement: _92 = (long unsigned int) _91;

harris.cpp:205:5: note: ------>vectorizing statement: _93 = _92 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _94 = img_56(D) + _93;

harris.cpp:205:5: note: ------>vectorizing statement: _95 = *_94;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_924 * 4)
harris.cpp:205:5: note: created vectp.795_1307
harris.cpp:205:5: note: add new stmt: vect__95.796_1314 = MEM[(float *)vectp.794_1312];

harris.cpp:205:5: note: ------>vectorizing statement: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _95
harris.cpp:205:5: note: def_stmt: _95 = *_94;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _95
harris.cpp:205:5: note: vect_is_simple_use: operand _95
harris.cpp:205:5: note: def_stmt: _95 = *_94;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _95
  def_stmt =  _95 = *_94;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.798_1315 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__96.797_1316 = vect__95.796_1314 * vect_cst_.798_1315;

harris.cpp:205:5: note: ------>vectorizing statement: _97 = _90 + _96;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _90
harris.cpp:205:5: note: def_stmt: _90 = _82 + _89;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _90
harris.cpp:205:5: note: vect_is_simple_use: operand _90
harris.cpp:205:5: note: def_stmt: _90 = _82 + _89;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _90
  def_stmt =  _90 = _82 + _89;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _96
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _96
  def_stmt =  _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: add new stmt: vect__97.799_1317 = vect__90.793_1306 + vect__96.797_1316;

harris.cpp:205:5: note: ------>vectorizing statement: *_49 = _97;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _97
harris.cpp:205:5: note: def_stmt: _97 = _90 + _96;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform store. ncopies = 1
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _97
harris.cpp:205:5: note: vect_is_simple_use: operand _97
harris.cpp:205:5: note: def_stmt: _97 = _90 + _96;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _97
  def_stmt =  _97 = _90 + _96;

harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Ix_26 + (sizetype) ((long unsigned int) pretmp_916 * 4)
harris.cpp:205:5: note: created vectp.801_1318
harris.cpp:205:5: note: add new stmt: MEM[(float *)vectp.800_1323] = vect__97.799_1317;

harris.cpp:205:5: note: ------>vectorizing statement: _99 = Iy_28 + _48;

harris.cpp:205:5: note: ------>vectorizing statement: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _88
harris.cpp:205:5: note: vect_is_simple_use: operand _88
harris.cpp:205:5: note: def_stmt: _88 = *_87;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _88
  def_stmt =  _88 = *_87;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: 8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand 8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.803_98 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__100.802_1326 = vect__88.790_1303 * vect_cst_.803_98;

harris.cpp:205:5: note: ------>vectorizing statement: _101 = _59 + _100;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _100
harris.cpp:205:5: note: def_stmt: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _59
harris.cpp:205:5: note: vect_is_simple_use: operand _59
harris.cpp:205:5: note: def_stmt: _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _59
  def_stmt =  _59 = _58 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _100
harris.cpp:205:5: note: vect_is_simple_use: operand _100
harris.cpp:205:5: note: def_stmt: _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _100
  def_stmt =  _100 = _88 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: add new stmt: vect__101.804_1327 = vect__59.768_1263 + vect__100.802_1326;

harris.cpp:205:5: note: ------>vectorizing statement: _102 = _52 + pretmp_916;

harris.cpp:205:5: note: ------>vectorizing statement: _103 = (long unsigned int) _102;

harris.cpp:205:5: note: ------>vectorizing statement: _104 = _103 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _105 = img_56(D) + _104;

harris.cpp:205:5: note: ------>vectorizing statement: _106 = *_105;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
harris.cpp:205:5: note: created vectp.806_1328
harris.cpp:205:5: note: add new stmt: vect__106.807_1334 = MEM[(float *)vectp.805_1332];

harris.cpp:205:5: note: ------>vectorizing statement: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _106
harris.cpp:205:5: note: def_stmt: _106 = *_105;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _106
harris.cpp:205:5: note: vect_is_simple_use: operand _106
harris.cpp:205:5: note: def_stmt: _106 = *_105;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _106
  def_stmt =  _106 = *_105;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: -1.6666667163372039794921875e-1
harris.cpp:205:5: note: vect_is_simple_use: operand -1.6666667163372039794921875e-1
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.809_1335 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };

harris.cpp:205:5: note: add new stmt: vect__107.808_1336 = vect__106.807_1334 * vect_cst_.809_1335;

harris.cpp:205:5: note: ------>vectorizing statement: _108 = _101 + _107;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _101
harris.cpp:205:5: note: def_stmt: _101 = _59 + _100;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _107
harris.cpp:205:5: note: def_stmt: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _101
harris.cpp:205:5: note: vect_is_simple_use: operand _101
harris.cpp:205:5: note: def_stmt: _101 = _59 + _100;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _101
  def_stmt =  _101 = _59 + _100;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _107
harris.cpp:205:5: note: vect_is_simple_use: operand _107
harris.cpp:205:5: note: def_stmt: _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _107
  def_stmt =  _107 = _106 * -1.6666667163372039794921875e-1;

harris.cpp:205:5: note: add new stmt: vect__108.810_1337 = vect__101.804_1327 + vect__107.808_1336;

harris.cpp:205:5: note: ------>vectorizing statement: _109 = j_83 + pretmp_916;

harris.cpp:205:5: note: ------>vectorizing statement: _110 = (long unsigned int) _109;

harris.cpp:205:5: note: ------>vectorizing statement: _111 = _110 * 4;

harris.cpp:205:5: note: ------>vectorizing statement: _112 = img_56(D) + _111;

harris.cpp:205:5: note: ------>vectorizing statement: _113 = *_112;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: transform load. ncopies = 1
harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *img_56(D) + (sizetype) ((long unsigned int) pretmp_916 * 4)
harris.cpp:205:5: note: created vectp.812_1338
harris.cpp:205:5: note: add new stmt: vect__113.813_1345 = MEM[(float *)vectp.811_1343];

harris.cpp:205:5: note: ------>vectorizing statement: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _113
harris.cpp:205:5: note: def_stmt: _113 = *_112;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _113
harris.cpp:205:5: note: vect_is_simple_use: operand _113
harris.cpp:205:5: note: def_stmt: _113 = *_112;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _113
  def_stmt =  _113 = *_112;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: 1.6666667163372039794921875e-1
harris.cpp:205:5: note: vect_is_simple_use: operand 1.6666667163372039794921875e-1
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.815_1346 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };

harris.cpp:205:5: note: add new stmt: vect__114.814_1347 = vect__113.813_1345 * vect_cst_.815_1346;

harris.cpp:205:5: note: ------>vectorizing statement: _115 = _108 + _114;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _108
harris.cpp:205:5: note: def_stmt: _108 = _101 + _107;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _114
harris.cpp:205:5: note: def_stmt: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _108
harris.cpp:205:5: note: vect_is_simple_use: operand _108
harris.cpp:205:5: note: def_stmt: _108 = _101 + _107;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _108
  def_stmt =  _108 = _101 + _107;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _114
harris.cpp:205:5: note: vect_is_simple_use: operand _114
harris.cpp:205:5: note: def_stmt: _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _114
  def_stmt =  _114 = _113 * 1.6666667163372039794921875e-1;

harris.cpp:205:5: note: add new stmt: vect__115.816_1348 = vect__108.810_1337 + vect__114.814_1347;

harris.cpp:205:5: note: ------>vectorizing statement: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _66
harris.cpp:205:5: note: vect_is_simple_use: operand _66
harris.cpp:205:5: note: def_stmt: _66 = *_65;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _66
  def_stmt =  _66 = *_65;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: -8.3333335816860198974609375e-2
harris.cpp:205:5: note: vect_is_simple_use: operand -8.3333335816860198974609375e-2
harris.cpp:205:5: note: Create vector_cst. nunits = 4
harris.cpp:205:5: note: created new init_stmt: vect_cst_.818_1349 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };

harris.cpp:205:5: note: add new stmt: vect__116.817_1350 = vect__66.772_1270 * vect_cst_.818_1349;

harris.cpp:205:5: note: ------>vectorizing statement: _117 = _115 + _116;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _115
harris.cpp:205:5: note: def_stmt: _115 = _108 + _114;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _116
harris.cpp:205:5: note: def_stmt: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _115
harris.cpp:205:5: note: vect_is_simple_use: operand _115
harris.cpp:205:5: note: def_stmt: _115 = _108 + _114;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _115
  def_stmt =  _115 = _108 + _114;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _116
harris.cpp:205:5: note: vect_is_simple_use: operand _116
harris.cpp:205:5: note: def_stmt: _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _116
  def_stmt =  _116 = _66 * -8.3333335816860198974609375e-2;

harris.cpp:205:5: note: add new stmt: vect__117.819_1351 = vect__115.816_1348 + vect__116.817_1350;

harris.cpp:205:5: note: ------>vectorizing statement: _118 = _96 + _117;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: vect_is_simple_use: operand _117
harris.cpp:205:5: note: def_stmt: _117 = _115 + _116;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform binary/unary operation.
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _96
harris.cpp:205:5: note: vect_is_simple_use: operand _96
harris.cpp:205:5: note: def_stmt: _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _96
  def_stmt =  _96 = _95 * 8.3333335816860198974609375e-2;

harris.cpp:205:5: note: vect_get_vec_def_for_operand: _117
harris.cpp:205:5: note: vect_is_simple_use: operand _117
harris.cpp:205:5: note: def_stmt: _117 = _115 + _116;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _117
  def_stmt =  _117 = _115 + _116;

harris.cpp:205:5: note: add new stmt: vect__118.820_1352 = vect__96.797_1316 + vect__117.819_1351;

harris.cpp:205:5: note: ------>vectorizing statement: *_99 = _118;

harris.cpp:205:5: note: transform statement.
harris.cpp:205:5: note: vect_is_simple_use: operand _118
harris.cpp:205:5: note: def_stmt: _118 = _96 + _117;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: transform store. ncopies = 1
harris.cpp:205:5: note: vect_get_vec_def_for_operand: _118
harris.cpp:205:5: note: vect_is_simple_use: operand _118
harris.cpp:205:5: note: def_stmt: _118 = _96 + _117;

harris.cpp:205:5: note: type of def: 3.
harris.cpp:205:5: note: def =  _118
  def_stmt =  _118 = _96 + _117;

harris.cpp:205:5: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *Iy_28 + (sizetype) ((long unsigned int) pretmp_916 * 4)
harris.cpp:205:5: note: created vectp.822_1353
harris.cpp:205:5: note: add new stmt: MEM[(float *)vectp.821_1358] = vect__118.820_1352;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.765_1260 = vectp.765_1259 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.770_1269 = vectp.770_1268 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.776_1280 = vectp.776_1279 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.782_1291 = vectp.782_1290 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.788_1302 = vectp.788_1301 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.794_1313 = vectp.794_1312 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.800_1324 = vectp.800_1323 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.805_1333 = vectp.805_1332 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.811_1344 = vectp.811_1343 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: vectp.821_1359 = vectp.821_1358 + 16;

harris.cpp:205:5: note: ------>vectorizing statement: if (C_19(D) >= j_83)


loop at harris.cpp:208: if (ivtmp_1361 < bnd.762_1169)

;; Scaling loop 8 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
harris.cpp:205:5: note: LOOP VECTORIZED

harris.cpp:182:7: note: vectorized 4 loops in function.
Merging blocks 11 and 104
Merging blocks 20 and 85
Merging blocks 32 and 66
Merging blocks 39 and 47
Merging blocks 42 and 56
Merging blocks 50 and 35
Merging blocks 58 and 51
Merging blocks 61 and 75
Merging blocks 69 and 26
Merging blocks 77 and 70
Merging blocks 80 and 94
Merging blocks 88 and 16
Merging blocks 96 and 89
Merging blocks 99 and 113
Merging blocks 107 and 6
Merging blocks 115 and 108
Created preheader block for loop 9
Created preheader block for loop 11
Created preheader block for loop 13
Created preheader block for loop 15
void harris_base(int, int, float*, float*&) (int C, int R, float * img, float * & harris)
{
  vector(4) float * vectp.822;
  vector(4) float * vectp.821;
  vector(4) float vect__118.820;
  vector(4) float vect__117.819;
  vector(4) float vect_cst_.818;
  vector(4) float vect__116.817;
  vector(4) float vect__115.816;
  vector(4) float vect_cst_.815;
  vector(4) float vect__114.814;
  vector(4) float vect__113.813;
  vector(4) float * vectp.812;
  vector(4) float * vectp.811;
  vector(4) float vect__108.810;
  vector(4) float vect_cst_.809;
  vector(4) float vect__107.808;
  vector(4) float vect__106.807;
  vector(4) float * vectp.806;
  vector(4) float * vectp.805;
  vector(4) float vect__101.804;
  vector(4) float vect_cst_.803;
  vector(4) float vect__100.802;
  vector(4) float * vectp.801;
  vector(4) float * vectp.800;
  vector(4) float vect__97.799;
  vector(4) float vect_cst_.798;
  vector(4) float vect__96.797;
  vector(4) float vect__95.796;
  vector(4) float * vectp.795;
  vector(4) float * vectp.794;
  vector(4) float vect__90.793;
  vector(4) float vect_cst_.792;
  vector(4) float vect__89.791;
  vector(4) float vect__88.790;
  vector(4) float * vectp.789;
  vector(4) float * vectp.788;
  vector(4) float vect__82.787;
  vector(4) float vect_cst_.786;
  vector(4) float vect__81.785;
  vector(4) float vect__80.784;
  vector(4) float * vectp.783;
  vector(4) float * vectp.782;
  vector(4) float vect__75.781;
  vector(4) float vect_cst_.780;
  vector(4) float vect__74.779;
  vector(4) float vect__73.778;
  vector(4) float * vectp.777;
  vector(4) float * vectp.776;
  vector(4) float vect__68.775;
  vector(4) float vect_cst_.774;
  vector(4) float vect__67.773;
  vector(4) float vect__66.772;
  vector(4) float * vectp.771;
  vector(4) float * vectp.770;
  vector(4) float vect_cst_.769;
  vector(4) float vect__59.768;
  vector(4) float vect__58.767;
  vector(4) float * vectp.766;
  vector(4) float * vectp.765;
  int tmp.764;
  unsigned int ratio_mult_vf.763;
  unsigned int bnd.762;
  unsigned int niters.761;
  sizetype prolog_loop_adjusted_niters.760;
  unsigned int prologue_after_cost_adjust.759;
  unsigned int prolog_loop_niters.758;
  vector(4) float * vectp.757;
  unsigned int niters.756;
  vector(4) float * vectp.755;
  vector(4) float * vectp.754;
  vector(4) float vect__136.753;
  vector(4) float * vectp.752;
  vector(4) float * vectp.751;
  vector(4) float vect__133.750;
  vector(4) float vect__132.749;
  vector(4) float * vectp.748;
  vector(4) float * vectp.747;
  vector(4) float * vectp.746;
  vector(4) float * vectp.745;
  vector(4) float vect__128.744;
  vector(4) float vect__127.743;
  vector(4) float * vectp.742;
  vector(4) float * vectp.741;
  int tmp.740;
  unsigned int ratio_mult_vf.739;
  unsigned int bnd.738;
  unsigned int niters.737;
  sizetype prolog_loop_adjusted_niters.736;
  unsigned int prologue_after_cost_adjust.735;
  unsigned int prolog_loop_niters.734;
  vector(4) float * vectp.733;
  unsigned int niters.732;
  vector(4) float * vectp.731;
  vector(4) float * vectp.730;
  vector(4) float vect__256.729;
  vector(4) float vect__255.728;
  vector(4) float * vectp.727;
  vector(4) float * vectp.726;
  vector(4) float vect__253.725;
  vector(4) float vect__252.724;
  vector(4) float * vectp.723;
  vector(4) float * vectp.722;
  vector(4) float vect__250.721;
  vector(4) float vect__249.720;
  vector(4) float * vectp.719;
  vector(4) float * vectp.718;
  vector(4) float vect__247.717;
  vector(4) float vect__246.716;
  vector(4) float * vectp.715;
  vector(4) float * vectp.714;
  vector(4) float vect__244.713;
  vector(4) float vect__243.712;
  vector(4) float * vectp.711;
  vector(4) float * vectp.710;
  vector(4) float vect__241.709;
  vector(4) float vect__240.708;
  vector(4) float * vectp.707;
  vector(4) float * vectp.706;
  vector(4) float vect__238.705;
  vector(4) float vect__237.704;
  vector(4) float * vectp.703;
  vector(4) float * vectp.702;
  vector(4) float vect__235.701;
  vector(4) float vect__234.700;
  vector(4) float * vectp.699;
  vector(4) float * vectp.698;
  vector(4) float vect__232.697;
  vector(4) float * vectp.696;
  vector(4) float * vectp.695;
  vector(4) float * vectp.694;
  vector(4) float * vectp.693;
  vector(4) float vect__228.692;
  vector(4) float vect__227.691;
  vector(4) float * vectp.690;
  vector(4) float * vectp.689;
  vector(4) float vect__225.688;
  vector(4) float vect__224.687;
  vector(4) float * vectp.686;
  vector(4) float * vectp.685;
  vector(4) float vect__222.684;
  vector(4) float vect__221.683;
  vector(4) float * vectp.682;
  vector(4) float * vectp.681;
  vector(4) float vect__219.680;
  vector(4) float vect__218.679;
  vector(4) float * vectp.678;
  vector(4) float * vectp.677;
  vector(4) float vect__216.676;
  vector(4) float vect__215.675;
  vector(4) float * vectp.674;
  vector(4) float * vectp.673;
  vector(4) float vect__213.672;
  vector(4) float vect__212.671;
  vector(4) float * vectp.670;
  vector(4) float * vectp.669;
  vector(4) float vect__210.668;
  vector(4) float vect__209.667;
  vector(4) float * vectp.666;
  vector(4) float * vectp.665;
  vector(4) float vect__207.664;
  vector(4) float vect__206.663;
  vector(4) float * vectp.662;
  vector(4) float * vectp.661;
  vector(4) float vect__204.660;
  vector(4) float * vectp.659;
  vector(4) float * vectp.658;
  vector(4) float * vectp.657;
  vector(4) float * vectp.656;
  vector(4) float vect__200.655;
  vector(4) float vect__199.654;
  vector(4) float * vectp.653;
  vector(4) float * vectp.652;
  vector(4) float vect__194.651;
  vector(4) float vect__193.650;
  vector(4) float * vectp.649;
  vector(4) float * vectp.648;
  vector(4) float vect__188.647;
  vector(4) float vect__187.646;
  vector(4) float * vectp.645;
  vector(4) float * vectp.644;
  vector(4) float vect__180.643;
  vector(4) float vect__179.642;
  vector(4) float * vectp.641;
  vector(4) float * vectp.640;
  vector(4) float vect__174.639;
  vector(4) float vect__173.638;
  vector(4) float * vectp.637;
  vector(4) float * vectp.636;
  vector(4) float vect__171.635;
  vector(4) float vect__170.634;
  vector(4) float * vectp.633;
  vector(4) float * vectp.632;
  vector(4) float vect__165.631;
  vector(4) float vect__164.630;
  vector(4) float * vectp.629;
  vector(4) float * vectp.628;
  vector(4) float vect__158.627;
  vector(4) float vect__157.626;
  vector(4) float * vectp.625;
  vector(4) float * vectp.624;
  vector(4) float vect__152.623;
  vector(4) float * vectp.622;
  vector(4) float * vectp.621;
  int tmp.620;
  unsigned int ratio_mult_vf.619;
  unsigned int bnd.618;
  unsigned int niters.617;
  sizetype prolog_loop_adjusted_niters.616;
  unsigned int prologue_after_cost_adjust.615;
  unsigned int prolog_loop_niters.614;
  vector(4) float * vectp.613;
  unsigned int niters.612;
  vector(4) float * vectp.611;
  vector(4) float * vectp.610;
  vector(4) float vect__283.609;
  vector(4) float vect__282.608;
  vector(4) float vect_cst_.607;
  vector(4) float vect__281.606;
  vector(4) float vect_det_279.605;
  vector(4) float vect__278.604;
  vector(4) float vect__277.603;
  vector(4) float * vectp.602;
  vector(4) float * vectp.601;
  vector(4) float vect__275.600;
  vector(4) float vect_trace_270.599;
  vector(4) float vect__269.598;
  vector(4) float * vectp.597;
  vector(4) float * vectp.596;
  vector(4) float vect__265.595;
  vector(4) float * vectp.594;
  vector(4) float * vectp.593;
  int tmp.592;
  unsigned int ratio_mult_vf.591;
  unsigned int bnd.590;
  unsigned int niters.589;
  sizetype prolog_loop_adjusted_niters.588;
  unsigned int prologue_after_cost_adjust.587;
  unsigned int prolog_loop_niters.586;
  vector(4) float * vectp.585;
  unsigned int niters.584;
  float det;
  float trace;
  int j;
  int i;
  int j;
  int i;
  int j;
  int i;
  int j;
  int i;
  float * Syy;
  float * Sxy;
  float * Sxx;
  float * Iyy;
  float * Ixy;
  float * Ixx;
  float * Iy;
  float * Ix;
  sizetype _4;
  sizetype _5;
  sizetype _6;
  sizetype _7;
  sizetype _13;
  sizetype _14;
  sizetype _15;
  sizetype _16;
  int _18;
  int _20;
  int _21;
  long unsigned int _22;
  long unsigned int _23;
  void * _42;
  unsigned int ivtmp_45;
  int _46;
  long unsigned int _47;
  long unsigned int _48;
  float * _49;
  int pretmp_50;
  int _52;
  int _53;
  long unsigned int _54;
  long unsigned int _55;
  float * _57;
  float _58;
  float _59;
  int _62;
  long unsigned int _63;
  long unsigned int _64;
  float * _65;
  float _66;
  float _67;
  float _68;
  int _69;
  long unsigned int _70;
  long unsigned int _71;
  float * _72;
  float _73;
  float _74;
  float _75;
  int _76;
  long unsigned int _77;
  long unsigned int _78;
  float * _79;
  float _80;
  float _81;
  float _82;
  int _84;
  long unsigned int _85;
  long unsigned int _86;
  float * _87;
  float _88;
  float _89;
  float _90;
  int _91;
  long unsigned int _92;
  long unsigned int _93;
  float * _94;
  float _95;
  float _96;
  float _97;
  float * _99;
  float _100;
  float _101;
  int _102;
  long unsigned int _103;
  long unsigned int _104;
  float * _105;
  float _106;
  float _107;
  float _108;
  int _109;
  long unsigned int _110;
  long unsigned int _111;
  float * _112;
  float _113;
  float _114;
  float _115;
  float _116;
  float _117;
  float _118;
  unsigned int ivtmp_119;
  sizetype _121;
  int _122;
  long unsigned int _123;
  long unsigned int _124;
  float * _125;
  float * _126;
  float _127;
  float _128;
  float * _130;
  float * _131;
  float _132;
  float _133;
  float * _135;
  float _136;
  unsigned int ivtmp_137;
  int _141;
  long unsigned int _142;
  long unsigned int _143;
  float * _144;
  int pretmp_145;
  int _147;
  int _148;
  long unsigned int _149;
  long unsigned int _150;
  float * _151;
  float _152;
  int _153;
  long unsigned int _154;
  long unsigned int _155;
  float * _156;
  float _157;
  float _158;
  int _160;
  long unsigned int _161;
  long unsigned int _162;
  float * _163;
  float _164;
  float _165;
  int _166;
  long unsigned int _167;
  long unsigned int _168;
  float * _169;
  float _170;
  float _171;
  float * _172;
  float _173;
  float _174;
  int _175;
  long unsigned int _176;
  long unsigned int _177;
  float * _178;
  float _179;
  float _180;
  sizetype _181;
  unsigned int _182;
  int _183;
  long unsigned int _184;
  long unsigned int _185;
  float * _186;
  float _187;
  float _188;
  int _189;
  long unsigned int _190;
  long unsigned int _191;
  float * _192;
  float _193;
  float _194;
  int _195;
  long unsigned int _196;
  long unsigned int _197;
  float * _198;
  float _199;
  float _200;
  float * _202;
  float * _203;
  float _204;
  float * _205;
  float _206;
  float _207;
  float * _208;
  float _209;
  float _210;
  float * _211;
  float _212;
  float _213;
  float * _214;
  float _215;
  float _216;
  float * _217;
  float _218;
  float _219;
  float * _220;
  float _221;
  float _222;
  float * _223;
  float _224;
  float _225;
  float * _226;
  float _227;
  float _228;
  float * _230;
  float * _231;
  float _232;
  float * _233;
  float _234;
  float _235;
  float * _236;
  float _237;
  float _238;
  float * _239;
  float _240;
  float _241;
  float * _242;
  float _243;
  float _244;
  float * _245;
  float _246;
  float _247;
  float * _248;
  float _249;
  float _250;
  float * _251;
  float _252;
  float _253;
  float * _254;
  float _255;
  float _256;
  unsigned int ivtmp_257;
  sizetype _260;
  int _261;
  long unsigned int _262;
  long unsigned int _263;
  float * _264;
  float _265;
  float * _268;
  float _269;
  float _275;
  float * _276;
  float _277;
  float _278;
  float * _280;
  float _281;
  float _282;
  float _283;
  unsigned int ivtmp_284;
  sizetype _295;
  unsigned long _297;
  sizetype _298;
  sizetype _299;
  sizetype _300;
  sizetype _307;
  sizetype _308;
  sizetype _309;
  sizetype _310;
  sizetype _316;
  sizetype _317;
  unsigned long _329;
  unsigned long _334;
  sizetype _335;
  sizetype _336;
  sizetype _342;
  sizetype _343;
  sizetype _344;
  sizetype _345;
  sizetype _351;
  sizetype _352;
  sizetype _353;
  sizetype _354;
  sizetype _360;
  sizetype _361;
  sizetype _362;
  sizetype _363;
  sizetype _368;
  sizetype _369;
  sizetype _370;
  sizetype _371;
  sizetype _375;
  sizetype _376;
  sizetype _377;
  sizetype _378;
  sizetype _384;
  sizetype _385;
  sizetype _386;
  sizetype _387;
  sizetype _393;
  sizetype _394;
  sizetype _395;
  sizetype _396;
  sizetype _402;
  sizetype _403;
  sizetype _404;
  sizetype _405;
  sizetype _411;
  sizetype _412;
  sizetype _413;
  sizetype _414;
  sizetype _420;
  sizetype _421;
  sizetype _422;
  sizetype _423;
  sizetype _429;
  sizetype _430;
  sizetype _431;
  sizetype _432;
  sizetype _438;
  sizetype _439;
  sizetype _440;
  sizetype _441;
  sizetype _447;
  sizetype _448;
  sizetype _449;
  sizetype _450;
  sizetype _455;
  sizetype _456;
  sizetype _457;
  sizetype _458;
  sizetype _462;
  sizetype _463;
  sizetype _464;
  sizetype _465;
  sizetype _471;
  sizetype _472;
  sizetype _473;
  sizetype _474;
  sizetype _480;
  sizetype _481;
  sizetype _482;
  sizetype _483;
  sizetype _489;
  sizetype _490;
  sizetype _491;
  sizetype _492;
  sizetype _498;
  sizetype _499;
  sizetype _500;
  sizetype _501;
  sizetype _507;
  sizetype _508;
  sizetype _509;
  sizetype _510;
  sizetype _516;
  sizetype _517;
  sizetype _518;
  sizetype _519;
  sizetype _525;
  sizetype _526;
  sizetype _527;
  sizetype _528;
  sizetype _534;
  sizetype _535;
  sizetype _536;
  sizetype _537;
  sizetype _542;
  sizetype _543;
  sizetype _544;
  sizetype _545;
  int _547;
  unsigned int _555;
  unsigned int _556;
  unsigned int _557;
  float _559;
  float _560;
  float * _561;
  float _562;
  float _563;
  float * _564;
  float _565;
  float _566;
  float * _567;
  float _568;
  float _569;
  float * _570;
  float _571;
  float _572;
  float * _573;
  float _574;
  float _575;
  float * _576;
  float _577;
  float _578;
  float * _579;
  float _580;
  float _581;
  float * _582;
  float _583;
  float * _584;
  float * _585;
  float _587;
  float _588;
  float * _589;
  float _590;
  float _591;
  float * _592;
  float _593;
  float _594;
  float * _595;
  float _596;
  float _597;
  float * _598;
  float _599;
  float _600;
  float * _601;
  float _602;
  float _603;
  float * _604;
  float _605;
  float _606;
  float * _607;
  float _608;
  float _609;
  float * _610;
  float _611;
  float * _612;
  float * _613;
  float _615;
  float _616;
  float * _617;
  long unsigned int _618;
  long unsigned int _619;
  int _620;
  float _621;
  float _622;
  float * _623;
  long unsigned int _624;
  long unsigned int _625;
  int _626;
  float _627;
  unsigned int ivtmp_628;
  float _629;
  float * _630;
  long unsigned int _631;
  long unsigned int _632;
  int _633;
  float _634;
  float _635;
  float * _636;
  long unsigned int _637;
  long unsigned int _638;
  int _639;
  float _640;
  float _641;
  float * _642;
  float _643;
  float _644;
  float * _645;
  long unsigned int _646;
  long unsigned int _647;
  int _648;
  float _649;
  float _650;
  float * _651;
  long unsigned int _652;
  long unsigned int _653;
  int _654;
  float _656;
  float _657;
  float * _658;
  long unsigned int _659;
  long unsigned int _660;
  int _661;
  float _662;
  float * _663;
  long unsigned int _664;
  long unsigned int _665;
  int _666;
  int _667;
  float * _668;
  long unsigned int _669;
  long unsigned int _670;
  int _671;
  unsigned int _675;
  unsigned int _676;
  unsigned int ivtmp_680;
  unsigned int ivtmp_681;
  float _690;
  float _691;
  float * _692;
  float _693;
  float _694;
  float * _695;
  float _696;
  float _697;
  float * _698;
  float _699;
  float _700;
  float * _701;
  float _702;
  float _703;
  float * _704;
  float _705;
  float _706;
  float * _707;
  float _708;
  float _709;
  float * _710;
  float _711;
  float _712;
  float * _713;
  float _714;
  float * _715;
  float * _716;
  float _718;
  float _719;
  float * _720;
  float _721;
  float _722;
  float * _723;
  float _724;
  float _725;
  float * _726;
  float _727;
  float _728;
  float * _729;
  float _730;
  float _731;
  float * _732;
  float _733;
  int pretmp_734;
  unsigned int ivtmp_735;
  unsigned int ivtmp_737;
  int pretmp_738;
  int pretmp_739;
  float _747;
  float * _748;
  int pretmp_749;
  int pretmp_750;
  float _752;
  float _753;
  float * _754;
  float * _755;
  float _757;
  float _758;
  float * _759;
  float * _760;
  long unsigned int _761;
  long unsigned int _762;
  int _763;
  unsigned int _766;
  unsigned int _767;
  float _768;
  float * _769;
  float _770;
  float _771;
  float * _772;
  float _773;
  float _774;
  float * _775;
  float _776;
  float * _777;
  float * _778;
  float _780;
  float _781;
  float * _782;
  long unsigned int _783;
  long unsigned int _784;
  int _785;
  float _786;
  float _787;
  float * _788;
  long unsigned int _789;
  long unsigned int _790;
  int _791;
  float _792;
  float _793;
  float * _794;
  long unsigned int _795;
  long unsigned int _796;
  int _797;
  float _798;
  float _799;
  float * _800;
  long unsigned int _801;
  long unsigned int _802;
  int _803;
  float _804;
  float _805;
  float * _806;
  float _807;
  float _808;
  float * _809;
  long unsigned int _810;
  long unsigned int _811;
  int _812;
  float _813;
  float _814;
  float * _815;
  long unsigned int _816;
  long unsigned int _817;
  int _818;
  float _820;
  float _821;
  float * _822;
  long unsigned int _823;
  long unsigned int _824;
  int _825;
  float _826;
  float * _827;
  long unsigned int _828;
  long unsigned int _829;
  int _830;
  int _831;
  float * _832;
  long unsigned int _833;
  long unsigned int _834;
  int pretmp_835;
  int prephitmp_836;
  unsigned long _837;
  int _838;
  unsigned int _841;
  unsigned int _842;
  unsigned long _843;
  unsigned long _844;
  unsigned long _845;
  unsigned long _846;
  sizetype _848;
  sizetype _849;
  int pretmp_850;
  unsigned long _851;
  sizetype _852;
  unsigned int _854;
  unsigned int ivtmp_856;
  sizetype _860;
  sizetype _861;
  sizetype _862;
  sizetype _863;
  unsigned long _867;
  sizetype _875;
  sizetype _876;
  sizetype _877;
  sizetype _878;
  sizetype _885;
  sizetype _886;
  sizetype _887;
  sizetype _888;
  sizetype _893;
  sizetype _894;
  sizetype _895;
  sizetype _896;
  int _898;
  unsigned int _906;
  unsigned int _907;
  unsigned int _908;
  float _911;
  float _912;
  float _913;
  float * _914;
  int pretmp_916;
  unsigned long _917;
  sizetype _919;
  int pretmp_920;
  int pretmp_921;
  sizetype _922;
  int pretmp_923;
  int pretmp_924;
  sizetype _925;
  unsigned int ivtmp_928;
  sizetype _932;
  sizetype _933;
  sizetype _934;
  sizetype _935;
  float _936;
  float _937;
  float * _938;
  float _939;
  float _941;
  float * _942;
  float _943;
  float * _944;
  long unsigned int _945;
  long unsigned int _946;
  int _947;
  unsigned int _951;
  unsigned int _952;
  unsigned int ivtmp_956;
  unsigned int ivtmp_957;
  float _967;
  float _968;
  float _969;
  float * _970;
  float _972;
  float _973;
  float * _974;
  float _975;
  float _977;
  float * _978;
  float _979;
  float * _980;
  long unsigned int _981;
  int pretmp_982;
  int prephitmp_983;
  long unsigned int _985;
  int _986;
  int pretmp_989;
  unsigned int _991;
  unsigned int _992;
  unsigned long _993;
  unsigned int _1001;
  unsigned int _1002;
  int _1006;
  long unsigned int _1007;
  long unsigned int _1008;
  float * _1009;
  float * _1010;
  float _1011;
  float _1012;
  float * _1014;
  float * _1015;
  float _1016;
  float _1017;
  float * _1019;
  float _1020;
  unsigned int _1023;
  unsigned int _1024;
  unsigned int _1025;
  int _1033;
  sizetype _1035;
  sizetype _1036;
  sizetype _1037;
  sizetype _1038;
  sizetype _1044;
  sizetype _1045;
  sizetype _1046;
  sizetype _1047;
  sizetype _1051;
  sizetype _1052;
  sizetype _1053;
  sizetype _1054;
  sizetype _1060;
  sizetype _1061;
  sizetype _1062;
  sizetype _1063;
  sizetype _1068;
  sizetype _1069;
  sizetype _1070;
  sizetype _1071;
  unsigned int ivtmp_1075;
  long unsigned int _1078;
  long unsigned int _1079;
  unsigned long _1081;
  unsigned long _1082;
  unsigned long _1083;
  unsigned long _1084;
  unsigned int _1085;
  unsigned int _1086;
  int _1089;
  long unsigned int _1090;
  long unsigned int _1091;
  float * _1092;
  int _1093;
  int _1094;
  long unsigned int _1095;
  long unsigned int _1096;
  float * _1097;
  float _1098;
  float _1099;
  int _1100;
  long unsigned int _1101;
  long unsigned int _1102;
  float * _1103;
  float _1104;
  float _1105;
  float _1106;
  int _1107;
  long unsigned int _1108;
  long unsigned int _1109;
  float * _1110;
  float _1111;
  float _1112;
  float _1113;
  int _1114;
  long unsigned int _1115;
  long unsigned int _1116;
  float * _1117;
  float _1118;
  float _1119;
  float _1120;
  int _1122;
  long unsigned int _1123;
  long unsigned int _1124;
  float * _1125;
  float _1126;
  float _1127;
  float _1128;
  int _1129;
  long unsigned int _1130;
  long unsigned int _1131;
  float * _1132;
  float _1133;
  float _1134;
  float _1135;
  float * _1137;
  float _1138;
  float _1139;
  int _1140;
  long unsigned int _1141;
  long unsigned int _1142;
  float * _1143;
  float _1144;
  float _1145;
  float _1146;
  int _1147;
  long unsigned int _1148;
  long unsigned int _1149;
  float * _1150;
  float _1151;
  float _1152;
  float _1153;
  float _1154;
  float _1155;
  float _1156;
  unsigned int ivtmp_1165;
  unsigned int ivtmp_1166;
  unsigned int _1170;
  unsigned int _1171;
  int _1175;
  long unsigned int _1176;
  long unsigned int _1177;
  float * _1178;
  int _1179;
  int _1180;
  long unsigned int _1181;
  long unsigned int _1182;
  float * _1183;
  float _1184;
  float _1185;
  int _1186;
  long unsigned int _1187;
  long unsigned int _1188;
  float * _1189;
  float _1190;
  float _1191;
  float _1192;
  int _1193;
  long unsigned int _1194;
  long unsigned int _1195;
  float * _1196;
  float _1197;
  float _1198;
  float _1199;
  int _1200;
  long unsigned int _1201;
  long unsigned int _1202;
  float * _1203;
  float _1204;
  float _1205;
  float _1206;
  int _1208;
  long unsigned int _1209;
  long unsigned int _1210;
  float * _1211;
  float _1212;
  float _1213;
  float _1214;
  int _1215;
  long unsigned int _1216;
  long unsigned int _1217;
  float * _1218;
  float _1219;
  float _1220;
  float _1221;
  float * _1223;
  float _1224;
  float _1225;
  int _1226;
  long unsigned int _1227;
  long unsigned int _1228;
  float * _1229;
  float _1230;
  float _1231;
  float _1232;
  int _1233;
  long unsigned int _1234;
  long unsigned int _1235;
  float * _1236;
  float _1237;
  float _1238;
  float _1239;
  float _1240;
  float _1241;
  float _1242;
  unsigned int _1244;
  unsigned int _1245;
  unsigned int _1246;
  int _1254;
  sizetype _1256;
  sizetype _1257;
  sizetype _1258;
  sizetype _1265;
  sizetype _1266;
  sizetype _1267;
  sizetype _1275;
  sizetype _1276;
  sizetype _1277;
  sizetype _1278;
  sizetype _1286;
  sizetype _1287;
  sizetype _1288;
  sizetype _1289;
  sizetype _1297;
  sizetype _1298;
  sizetype _1299;
  sizetype _1300;
  sizetype _1308;
  sizetype _1309;
  sizetype _1310;
  sizetype _1311;
  sizetype _1319;
  sizetype _1320;
  sizetype _1321;
  sizetype _1322;
  sizetype _1329;
  sizetype _1330;
  sizetype _1331;
  sizetype _1339;
  sizetype _1340;
  sizetype _1341;
  sizetype _1342;
  sizetype _1354;
  sizetype _1355;
  sizetype _1356;
  sizetype _1357;
  unsigned int ivtmp_1361;
  unsigned int ivtmp_1362;
  unsigned int ivtmp_1365;

  <bb 2>:
  _18 = R_17(D) + 2;
  _20 = C_19(D) + 2;
  _21 = _18 * _20;
  _22 = (long unsigned int) _21;
  _23 = _22 * 4;
  Ix_26 = malloc (_23);
  Iy_28 = malloc (_23);
  Ixx_30 = malloc (_23);
  Ixy_32 = malloc (_23);
  Iyy_34 = malloc (_23);
  Sxx_36 = malloc (_23);
  Sxy_38 = malloc (_23);
  Syy_40 = malloc (_23);
  _42 = malloc (_23);
  *harris_43(D) = _42;
  if (R_17(D) > 0)
    goto <bb 3>;
  else
    goto <bb 48>;

  <bb 3>:
  goto <bb 15>;

  <bb 4>:

  <bb 5>:
  # j_319 = PHI <j_1159(24), j_83(4)>
  # vectp.765_1259 = PHI <vectp.766_1255(24), vectp.765_1260(4)>
  # vectp.770_1268 = PHI <vectp.771_1264(24), vectp.770_1269(4)>
  # vectp.776_1279 = PHI <vectp.777_1274(24), vectp.776_1280(4)>
  # vectp.782_1290 = PHI <vectp.783_1285(24), vectp.782_1291(4)>
  # vectp.788_1301 = PHI <vectp.789_1296(24), vectp.788_1302(4)>
  # vectp.794_1312 = PHI <vectp.795_1307(24), vectp.794_1313(4)>
  # vectp.800_1323 = PHI <vectp.801_1318(24), vectp.800_1324(4)>
  # vectp.805_1332 = PHI <vectp.806_1328(24), vectp.805_1333(4)>
  # vectp.811_1343 = PHI <vectp.812_1338(24), vectp.811_1344(4)>
  # vectp.821_1358 = PHI <vectp.822_1353(24), vectp.821_1359(4)>
  # ivtmp_119 = PHI <0(24), ivtmp_1361(4)>
  _46 = j_319 + pretmp_916;
  _47 = (long unsigned int) _46;
  _48 = _47 * 4;
  _49 = Ix_26 + _48;
  _52 = j_319 + -1;
  _53 = _52 + pretmp_921;
  _54 = (long unsigned int) _53;
  _55 = _54 * 4;
  _57 = img_56(D) + _55;
  vect__58.767_1261 = MEM[(float *)vectp.765_1259];
  _58 = *_57;
  vect__59.768_1263 = vect__58.767_1261 * vect_cst_.769_1262;
  _59 = _58 * -8.3333335816860198974609375e-2;
  _62 = _52 + pretmp_924;
  _63 = (long unsigned int) _62;
  _64 = _63 * 4;
  _65 = img_56(D) + _64;
  vect__66.772_1270 = MEM[(float *)vectp.770_1268];
  _66 = *_65;
  vect__67.773_1272 = vect__66.772_1270 * vect_cst_.774_1271;
  _67 = _66 * 8.3333335816860198974609375e-2;
  vect__68.775_1273 = vect__59.768_1263 + vect__67.773_1272;
  _68 = _59 + _67;
  _69 = j_319 + pretmp_921;
  _70 = (long unsigned int) _69;
  _71 = _70 * 4;
  _72 = img_56(D) + _71;
  vect__73.778_1281 = MEM[(float *)vectp.776_1279];
  _73 = *_72;
  vect__74.779_1283 = vect__73.778_1281 * vect_cst_.780_1282;
  _74 = _73 * -1.6666667163372039794921875e-1;
  vect__75.781_1284 = vect__68.775_1273 + vect__74.779_1283;
  _75 = _68 + _74;
  _76 = j_319 + pretmp_924;
  _77 = (long unsigned int) _76;
  _78 = _77 * 4;
  _79 = img_56(D) + _78;
  vect__80.784_1292 = MEM[(float *)vectp.782_1290];
  _80 = *_79;
  vect__81.785_1294 = vect__80.784_1292 * vect_cst_.786_1293;
  _81 = _80 * 1.6666667163372039794921875e-1;
  vect__82.787_1295 = vect__75.781_1284 + vect__81.785_1294;
  _82 = _75 + _81;
  j_83 = j_319 + 1;
  _84 = j_83 + pretmp_921;
  _85 = (long unsigned int) _84;
  _86 = _85 * 4;
  _87 = img_56(D) + _86;
  vect__88.790_1303 = MEM[(float *)vectp.788_1301];
  _88 = *_87;
  vect__89.791_1305 = vect__88.790_1303 * vect_cst_.792_1304;
  _89 = _88 * -8.3333335816860198974609375e-2;
  vect__90.793_1306 = vect__82.787_1295 + vect__89.791_1305;
  _90 = _82 + _89;
  _91 = j_83 + pretmp_924;
  _92 = (long unsigned int) _91;
  _93 = _92 * 4;
  _94 = img_56(D) + _93;
  vect__95.796_1314 = MEM[(float *)vectp.794_1312];
  _95 = *_94;
  vect__96.797_1316 = vect__95.796_1314 * vect_cst_.798_1315;
  _96 = _95 * 8.3333335816860198974609375e-2;
  vect__97.799_1317 = vect__90.793_1306 + vect__96.797_1316;
  _97 = _90 + _96;
  MEM[(float *)vectp.800_1323] = vect__97.799_1317;
  _99 = Iy_28 + _48;
  vect__100.802_1326 = vect__88.790_1303 * vect_cst_.803_98;
  _100 = _88 * 8.3333335816860198974609375e-2;
  vect__101.804_1327 = vect__59.768_1263 + vect__100.802_1326;
  _101 = _59 + _100;
  _102 = _52 + pretmp_916;
  _103 = (long unsigned int) _102;
  _104 = _103 * 4;
  _105 = img_56(D) + _104;
  vect__106.807_1334 = MEM[(float *)vectp.805_1332];
  _106 = *_105;
  vect__107.808_1336 = vect__106.807_1334 * vect_cst_.809_1335;
  _107 = _106 * -1.6666667163372039794921875e-1;
  vect__108.810_1337 = vect__101.804_1327 + vect__107.808_1336;
  _108 = _101 + _107;
  _109 = j_83 + pretmp_916;
  _110 = (long unsigned int) _109;
  _111 = _110 * 4;
  _112 = img_56(D) + _111;
  vect__113.813_1345 = MEM[(float *)vectp.811_1343];
  _113 = *_112;
  vect__114.814_1347 = vect__113.813_1345 * vect_cst_.815_1346;
  _114 = _113 * 1.6666667163372039794921875e-1;
  vect__115.816_1348 = vect__108.810_1337 + vect__114.814_1347;
  _115 = _108 + _114;
  vect__116.817_1350 = vect__66.772_1270 * vect_cst_.818_1349;
  _116 = _66 * -8.3333335816860198974609375e-2;
  vect__117.819_1351 = vect__115.816_1348 + vect__116.817_1350;
  _117 = _115 + _116;
  vect__118.820_1352 = vect__96.797_1316 + vect__117.819_1351;
  _118 = _96 + _117;
  MEM[(float *)vectp.821_1358] = vect__118.820_1352;
  vectp.765_1260 = vectp.765_1259 + 16;
  vectp.770_1269 = vectp.770_1268 + 16;
  vectp.776_1280 = vectp.776_1279 + 16;
  vectp.782_1291 = vectp.782_1290 + 16;
  vectp.788_1302 = vectp.788_1301 + 16;
  vectp.794_1313 = vectp.794_1312 + 16;
  vectp.800_1324 = vectp.800_1323 + 16;
  vectp.805_1333 = vectp.805_1332 + 16;
  vectp.811_1344 = vectp.811_1343 + 16;
  vectp.821_1359 = vectp.821_1358 + 16;
  ivtmp_1361 = ivtmp_119 + 1;
  if (ivtmp_1361 < bnd.762_1169)
    goto <bb 4>;
  else
    goto <bb 8>;

  <bb 6>:
  # j_1173 = PHI <j_1207(7), j_1247(9)>
  _1175 = j_1173 + pretmp_916;
  _1176 = (long unsigned int) _1175;
  _1177 = _1176 * 4;
  _1178 = Ix_26 + _1177;
  _1179 = j_1173 + -1;
  _1180 = _1179 + pretmp_921;
  _1181 = (long unsigned int) _1180;
  _1182 = _1181 * 4;
  _1183 = img_56(D) + _1182;
  _1184 = *_1183;
  _1185 = _1184 * -8.3333335816860198974609375e-2;
  _1186 = _1179 + pretmp_924;
  _1187 = (long unsigned int) _1186;
  _1188 = _1187 * 4;
  _1189 = img_56(D) + _1188;
  _1190 = *_1189;
  _1191 = _1190 * 8.3333335816860198974609375e-2;
  _1192 = _1185 + _1191;
  _1193 = j_1173 + pretmp_921;
  _1194 = (long unsigned int) _1193;
  _1195 = _1194 * 4;
  _1196 = img_56(D) + _1195;
  _1197 = *_1196;
  _1198 = _1197 * -1.6666667163372039794921875e-1;
  _1199 = _1192 + _1198;
  _1200 = j_1173 + pretmp_924;
  _1201 = (long unsigned int) _1200;
  _1202 = _1201 * 4;
  _1203 = img_56(D) + _1202;
  _1204 = *_1203;
  _1205 = _1204 * 1.6666667163372039794921875e-1;
  _1206 = _1199 + _1205;
  j_1207 = j_1173 + 1;
  _1208 = j_1207 + pretmp_921;
  _1209 = (long unsigned int) _1208;
  _1210 = _1209 * 4;
  _1211 = img_56(D) + _1210;
  _1212 = *_1211;
  _1213 = _1212 * -8.3333335816860198974609375e-2;
  _1214 = _1206 + _1213;
  _1215 = j_1207 + pretmp_924;
  _1216 = (long unsigned int) _1215;
  _1217 = _1216 * 4;
  _1218 = img_56(D) + _1217;
  _1219 = *_1218;
  _1220 = _1219 * 8.3333335816860198974609375e-2;
  _1221 = _1214 + _1220;
  *_1178 = _1221;
  _1223 = Iy_28 + _1177;
  _1224 = _1212 * 8.3333335816860198974609375e-2;
  _1225 = _1185 + _1224;
  _1226 = _1179 + pretmp_916;
  _1227 = (long unsigned int) _1226;
  _1228 = _1227 * 4;
  _1229 = img_56(D) + _1228;
  _1230 = *_1229;
  _1231 = _1230 * -1.6666667163372039794921875e-1;
  _1232 = _1225 + _1231;
  _1233 = j_1207 + pretmp_916;
  _1234 = (long unsigned int) _1233;
  _1235 = _1234 * 4;
  _1236 = img_56(D) + _1235;
  _1237 = *_1236;
  _1238 = _1237 * 1.6666667163372039794921875e-1;
  _1239 = _1232 + _1238;
  _1240 = _1190 * -8.3333335816860198974609375e-2;
  _1241 = _1239 + _1240;
  _1242 = _1220 + _1241;
  *_1223 = _1242;
  if (C_19(D) >= j_1207)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # j_1248 = PHI <j_83(5)>
  _1254 = (int) ratio_mult_vf.763_1172;
  tmp.764_1253 = j_1159 + _1254;
  if (niters.761_1168 == ratio_mult_vf.763_1172)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  # j_1247 = PHI <tmp.764_1253(8), j_1159(23)>
  goto <bb 6>;

  <bb 10>:

  <bb 11>:

  <bb 12>:
  pretmp_145 = pretmp_923;

  <bb 13>:
  # prephitmp_983 = PHI <pretmp_923(12), pretmp_982(16)>
  if (R_17(D) >= prephitmp_983)
    goto <bb 14>;
  else
    goto <bb 25>;

  <bb 14>:

  <bb 15>:
  # i_318 = PHI <1(3), prephitmp_983(14)>
  if (C_19(D) > 0)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  pretmp_982 = i_318 + 1;
  goto <bb 13>;

  <bb 17>:
  pretmp_916 = _20 * i_318;
  pretmp_920 = i_318 + -1;
  pretmp_921 = _20 * pretmp_920;
  pretmp_923 = i_318 + 1;
  pretmp_924 = _20 * pretmp_923;
  niters.756_1076 = (unsigned int) C_19(D);
  _1078 = (long unsigned int) pretmp_921;
  _1079 = _1078 * 4;
  vectp.757_1077 = img_56(D) + _1079;
  _1081 = (unsigned long) vectp.757_1077;
  _1082 = _1081 & 15;
  _1083 = _1082 >> 2;
  _1084 = -_1083;
  _1085 = (unsigned int) _1084;
  _1086 = _1085 & 3;
  prolog_loop_niters.758_1080 = MIN_EXPR <niters.756_1076, _1086>;
  if (niters.756_1076 <= 4)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:

  <bb 19>:
  # prologue_after_cost_adjust.759_1158 = PHI <niters.756_1076(18), prolog_loop_niters.758_1080(17)>
  if (prologue_after_cost_adjust.759_1158 == 0)
    goto <bb 23>;
  else
    goto <bb 20>;

  <bb 20>:
  # j_1363 = PHI <1(19)>
  # ivtmp_1365 = PHI <0(19)>

  <bb 97>:
  # j_1087 = PHI <j_1363(20), j_1121(21)>
  # ivtmp_1165 = PHI <ivtmp_1365(20), ivtmp_1166(21)>
  _1089 = j_1087 + pretmp_916;
  _1090 = (long unsigned int) _1089;
  _1091 = _1090 * 4;
  _1092 = Ix_26 + _1091;
  _1093 = j_1087 + -1;
  _1094 = _1093 + pretmp_921;
  _1095 = (long unsigned int) _1094;
  _1096 = _1095 * 4;
  _1097 = img_56(D) + _1096;
  _1098 = *_1097;
  _1099 = _1098 * -8.3333335816860198974609375e-2;
  _1100 = _1093 + pretmp_924;
  _1101 = (long unsigned int) _1100;
  _1102 = _1101 * 4;
  _1103 = img_56(D) + _1102;
  _1104 = *_1103;
  _1105 = _1104 * 8.3333335816860198974609375e-2;
  _1106 = _1099 + _1105;
  _1107 = j_1087 + pretmp_921;
  _1108 = (long unsigned int) _1107;
  _1109 = _1108 * 4;
  _1110 = img_56(D) + _1109;
  _1111 = *_1110;
  _1112 = _1111 * -1.6666667163372039794921875e-1;
  _1113 = _1106 + _1112;
  _1114 = j_1087 + pretmp_924;
  _1115 = (long unsigned int) _1114;
  _1116 = _1115 * 4;
  _1117 = img_56(D) + _1116;
  _1118 = *_1117;
  _1119 = _1118 * 1.6666667163372039794921875e-1;
  _1120 = _1113 + _1119;
  j_1121 = j_1087 + 1;
  _1122 = j_1121 + pretmp_921;
  _1123 = (long unsigned int) _1122;
  _1124 = _1123 * 4;
  _1125 = img_56(D) + _1124;
  _1126 = *_1125;
  _1127 = _1126 * -8.3333335816860198974609375e-2;
  _1128 = _1120 + _1127;
  _1129 = j_1121 + pretmp_924;
  _1130 = (long unsigned int) _1129;
  _1131 = _1130 * 4;
  _1132 = img_56(D) + _1131;
  _1133 = *_1132;
  _1134 = _1133 * 8.3333335816860198974609375e-2;
  _1135 = _1128 + _1134;
  *_1092 = _1135;
  _1137 = Iy_28 + _1091;
  _1138 = _1126 * 8.3333335816860198974609375e-2;
  _1139 = _1099 + _1138;
  _1140 = _1093 + pretmp_916;
  _1141 = (long unsigned int) _1140;
  _1142 = _1141 * 4;
  _1143 = img_56(D) + _1142;
  _1144 = *_1143;
  _1145 = _1144 * -1.6666667163372039794921875e-1;
  _1146 = _1139 + _1145;
  _1147 = j_1121 + pretmp_916;
  _1148 = (long unsigned int) _1147;
  _1149 = _1148 * 4;
  _1150 = img_56(D) + _1149;
  _1151 = *_1150;
  _1152 = _1151 * 1.6666667163372039794921875e-1;
  _1153 = _1146 + _1152;
  _1154 = _1104 * -8.3333335816860198974609375e-2;
  _1155 = _1153 + _1154;
  _1156 = _1134 + _1155;
  *_1137 = _1156;
  ivtmp_1166 = ivtmp_1165 + 1;
  if (ivtmp_1166 < prologue_after_cost_adjust.759_1158)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 97>;

  <bb 22>:
  # j_1160 = PHI <j_1121(97)>
  if (niters.756_1076 == prologue_after_cost_adjust.759_1158)
    goto <bb 12>;
  else
    goto <bb 23>;

  <bb 23>:
  # j_1159 = PHI <j_1160(22), 1(19)>
  prolog_loop_adjusted_niters.760_1167 = (sizetype) prologue_after_cost_adjust.759_1158;
  niters.761_1168 = niters.756_1076 - prologue_after_cost_adjust.759_1158;
  _1170 = niters.761_1168 + 4294967292;
  _1171 = _1170 >> 2;
  bnd.762_1169 = _1171 + 1;
  ratio_mult_vf.763_1172 = bnd.762_1169 << 2;
  _1244 = (unsigned int) C_19(D);
  _1245 = _1244 - prologue_after_cost_adjust.759_1158;
  _1246 = _1245 + 4294967295;
  if (_1246 <= 2)
    goto <bb 9>;
  else
    goto <bb 24>;

  <bb 24>:
  _1256 = (sizetype) pretmp_921;
  _1257 = prolog_loop_adjusted_niters.760_1167 + _1256;
  _1258 = _1257 * 4;
  vectp.766_1255 = img_56(D) + _1258;
  vect_cst_.769_1262 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _1265 = (sizetype) pretmp_924;
  _1266 = prolog_loop_adjusted_niters.760_1167 + _1265;
  _1267 = _1266 * 4;
  vectp.771_1264 = img_56(D) + _1267;
  vect_cst_.774_1271 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _1275 = (sizetype) pretmp_921;
  _1276 = prolog_loop_adjusted_niters.760_1167 + _1275;
  _1277 = _1276 + 1;
  _1278 = _1277 * 4;
  vectp.777_1274 = img_56(D) + _1278;
  vect_cst_.780_1282 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };
  _1286 = (sizetype) pretmp_924;
  _1287 = prolog_loop_adjusted_niters.760_1167 + _1286;
  _1288 = _1287 + 1;
  _1289 = _1288 * 4;
  vectp.783_1285 = img_56(D) + _1289;
  vect_cst_.786_1293 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };
  _1297 = (sizetype) pretmp_921;
  _1298 = prolog_loop_adjusted_niters.760_1167 + _1297;
  _1299 = _1298 + 2;
  _1300 = _1299 * 4;
  vectp.789_1296 = img_56(D) + _1300;
  vect_cst_.792_1304 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _1308 = (sizetype) pretmp_924;
  _1309 = prolog_loop_adjusted_niters.760_1167 + _1308;
  _1310 = _1309 + 2;
  _1311 = _1310 * 4;
  vectp.795_1307 = img_56(D) + _1311;
  vect_cst_.798_1315 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _1319 = (sizetype) pretmp_916;
  _1320 = prolog_loop_adjusted_niters.760_1167 + _1319;
  _1321 = _1320 + 1;
  _1322 = _1321 * 4;
  vectp.801_1318 = Ix_26 + _1322;
  vect_cst_.803_98 = { 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2, 8.3333335816860198974609375e-2 };
  _1329 = (sizetype) pretmp_916;
  _1330 = prolog_loop_adjusted_niters.760_1167 + _1329;
  _1331 = _1330 * 4;
  vectp.806_1328 = img_56(D) + _1331;
  vect_cst_.809_1335 = { -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1, -1.6666667163372039794921875e-1 };
  _1339 = (sizetype) pretmp_916;
  _1340 = prolog_loop_adjusted_niters.760_1167 + _1339;
  _1341 = _1340 + 2;
  _1342 = _1341 * 4;
  vectp.812_1338 = img_56(D) + _1342;
  vect_cst_.815_1346 = { 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1, 1.6666667163372039794921875e-1 };
  vect_cst_.818_1349 = { -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2, -8.3333335816860198974609375e-2 };
  _1354 = (sizetype) pretmp_916;
  _1355 = prolog_loop_adjusted_niters.760_1167 + _1354;
  _1356 = _1355 + 1;
  _1357 = _1356 * 4;
  vectp.822_1353 = Iy_28 + _1357;
  goto <bb 5>;

  <bb 25>:
  if (R_17(D) > 0)
    goto <bb 26>;
  else
    goto <bb 48>;

  <bb 26>:
  goto <bb 38>;

  <bb 27>:

  <bb 28>:
  # j_321 = PHI <j_743(46), j_138(27)>
  # vectp.741_1039 = PHI <vectp.742_1034(46), vectp.741_1040(27)>
  # vectp.745_1048 = PHI <vectp.746_1043(46), vectp.745_1049(27)>
  # vectp.747_1055 = PHI <vectp.748_129(46), vectp.747_1056(27)>
  # vectp.751_1064 = PHI <vectp.752_1059(46), vectp.751_1065(27)>
  # vectp.754_1072 = PHI <vectp.755_1067(46), vectp.754_1073(27)>
  # ivtmp_137 = PHI <0(46), ivtmp_1075(27)>
  _122 = j_321 + pretmp_989;
  _123 = (long unsigned int) _122;
  _124 = _123 * 4;
  _125 = Ixx_30 + _124;
  _126 = Ix_26 + _124;
  vect__127.743_1041 = MEM[(float *)vectp.741_1039];
  _127 = *_126;
  vect__128.744_1042 = vect__127.743_1041 * vect__127.743_1041;
  _128 = _127 * _127;
  MEM[(float *)vectp.745_1048] = vect__128.744_1042;
  _130 = Iyy_34 + _124;
  _131 = Iy_28 + _124;
  vect__132.749_1057 = MEM[(float *)vectp.747_1055];
  _132 = *_131;
  vect__133.750_1058 = vect__132.749_1057 * vect__132.749_1057;
  _133 = _132 * _132;
  MEM[(float *)vectp.751_1064] = vect__133.750_1058;
  _135 = Ixy_32 + _124;
  vect__136.753_134 = vect__127.743_1041 * vect__132.749_1057;
  _136 = _127 * _132;
  MEM[(float *)vectp.754_1072] = vect__136.753_134;
  j_138 = j_321 + 1;
  vectp.741_1040 = vectp.741_1039 + 16;
  vectp.745_1049 = vectp.745_1048 + 16;
  vectp.747_1056 = vectp.747_1055 + 16;
  vectp.751_1065 = vectp.751_1064 + 16;
  vectp.754_1073 = vectp.754_1072 + 16;
  ivtmp_1075 = ivtmp_137 + 1;
  if (ivtmp_1075 < bnd.738_1000)
    goto <bb 27>;
  else
    goto <bb 31>;

  <bb 29>:
  # j_1004 = PHI <j_1022(30), j_1026(32)>
  _1006 = j_1004 + pretmp_989;
  _1007 = (long unsigned int) _1006;
  _1008 = _1007 * 4;
  _1009 = Ixx_30 + _1008;
  _1010 = Ix_26 + _1008;
  _1011 = *_1010;
  _1012 = _1011 * _1011;
  *_1009 = _1012;
  _1014 = Iyy_34 + _1008;
  _1015 = Iy_28 + _1008;
  _1016 = *_1015;
  _1017 = _1016 * _1016;
  *_1014 = _1017;
  _1019 = Ixy_32 + _1008;
  _1020 = _1011 * _1016;
  *_1019 = _1020;
  j_1022 = j_1004 + 1;
  if (C_19(D) >= j_1022)
    goto <bb 30>;
  else
    goto <bb 33>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  # j_1027 = PHI <j_138(28)>
  _1033 = (int) ratio_mult_vf.739_1003;
  tmp.740_1032 = j_743 + _1033;
  if (niters.737_999 == ratio_mult_vf.739_1003)
    goto <bb 34>;
  else
    goto <bb 32>;

  <bb 32>:
  # j_1026 = PHI <tmp.740_1032(31), j_743(45)>
  goto <bb 29>;

  <bb 33>:

  <bb 34>:

  <bb 35>:

  <bb 36>:
  i_139 = i_320 + 1;
  if (R_17(D) >= i_139)
    goto <bb 37>;
  else
    goto <bb 47>;

  <bb 37>:

  <bb 38>:
  # i_320 = PHI <1(26), i_139(37)>
  if (C_19(D) > 0)
    goto <bb 39>;
  else
    goto <bb 36>;

  <bb 39>:
  pretmp_989 = _20 * i_320;
  niters.732_927 = (unsigned int) C_19(D);
  _925 = (sizetype) pretmp_989;
  _922 = _925 + 1;
  _919 = _922 * 4;
  vectp.733_926 = Ix_26 + _919;
  _917 = (unsigned long) vectp.733_926;
  _867 = _917 & 15;
  _851 = _867 >> 2;
  _837 = -_851;
  _767 = (unsigned int) _837;
  _766 = _767 & 3;
  prolog_loop_niters.734_918 = MIN_EXPR <_766, niters.732_927>;
  if (niters.732_927 <= 4)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:

  <bb 41>:
  # prologue_after_cost_adjust.735_744 = PHI <niters.732_927(40), prolog_loop_niters.734_918(39)>
  if (prologue_after_cost_adjust.735_744 == 0)
    goto <bb 45>;
  else
    goto <bb 42>;

  <bb 42>:
  # j_959 = PHI <1(41)>
  # ivtmp_1362 = PHI <0(41)>

  <bb 96>:
  # j_765 = PHI <j_959(42), j_745(43)>
  # ivtmp_735 = PHI <ivtmp_1362(42), ivtmp_628(43)>
  _763 = j_765 + pretmp_989;
  _762 = (long unsigned int) _763;
  _761 = _762 * 4;
  _760 = Ixx_30 + _761;
  _759 = Ix_26 + _761;
  _758 = *_759;
  _757 = _758 * _758;
  *_760 = _757;
  _755 = Iyy_34 + _761;
  _754 = Iy_28 + _761;
  _753 = *_754;
  _752 = _753 * _753;
  *_755 = _752;
  _748 = Ixy_32 + _761;
  _747 = _758 * _753;
  *_748 = _747;
  j_745 = j_765 + 1;
  ivtmp_628 = ivtmp_735 + 1;
  if (ivtmp_628 < prologue_after_cost_adjust.735_744)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  goto <bb 96>;

  <bb 44>:
  # j_742 = PHI <j_745(96)>
  if (prologue_after_cost_adjust.735_744 == niters.732_927)
    goto <bb 35>;
  else
    goto <bb 45>;

  <bb 45>:
  # j_743 = PHI <j_742(44), 1(41)>
  prolog_loop_adjusted_niters.736_998 = (sizetype) prologue_after_cost_adjust.735_744;
  niters.737_999 = niters.732_927 - prologue_after_cost_adjust.735_744;
  _1001 = niters.737_999 + 4294967292;
  _1002 = _1001 >> 2;
  bnd.738_1000 = _1002 + 1;
  ratio_mult_vf.739_1003 = bnd.738_1000 << 2;
  _1023 = (unsigned int) C_19(D);
  _1024 = _1023 - prologue_after_cost_adjust.735_744;
  _1025 = _1024 + 4294967295;
  if (_1025 <= 2)
    goto <bb 32>;
  else
    goto <bb 46>;

  <bb 46>:
  _1035 = (sizetype) pretmp_989;
  _1036 = prolog_loop_adjusted_niters.736_998 + _1035;
  _1037 = _1036 + 1;
  _1038 = _1037 * 4;
  vectp.742_1034 = Ix_26 + _1038;
  _1044 = (sizetype) pretmp_989;
  _1045 = prolog_loop_adjusted_niters.736_998 + _1044;
  _1046 = _1045 + 1;
  _1047 = _1046 * 4;
  vectp.746_1043 = Ixx_30 + _1047;
  _1051 = (sizetype) pretmp_989;
  _1052 = prolog_loop_adjusted_niters.736_998 + _1051;
  _1053 = _1052 + 1;
  _1054 = _1053 * 4;
  vectp.748_129 = Iy_28 + _1054;
  _1060 = (sizetype) pretmp_989;
  _1061 = prolog_loop_adjusted_niters.736_998 + _1060;
  _1062 = _1061 + 1;
  _1063 = _1062 * 4;
  vectp.752_1059 = Iyy_34 + _1063;
  _1068 = (sizetype) pretmp_989;
  _1069 = prolog_loop_adjusted_niters.736_998 + _1068;
  _1070 = _1069 + 1;
  _1071 = _1070 * 4;
  vectp.755_1067 = Ixy_32 + _1071;
  goto <bb 28>;

  <bb 47>:

  <bb 48>:
  if (R_17(D) > 2)
    goto <bb 49>;
  else
    goto <bb 93>;

  <bb 49>:
  goto <bb 62>;

  <bb 50>:

  <bb 51>:
  # j_323 = PHI <j_687(71), j_159(50)>
  # vectp.621_541 = PHI <vectp.622_546(71), vectp.621_540(50)>
  # vectp.624_533 = PHI <vectp.625_538(71), vectp.624_532(50)>
  # vectp.628_524 = PHI <vectp.629_529(71), vectp.628_523(50)>
  # vectp.632_515 = PHI <vectp.633_520(71), vectp.632_514(50)>
  # vectp.636_506 = PHI <vectp.637_511(71), vectp.636_505(50)>
  # vectp.640_497 = PHI <vectp.641_502(71), vectp.640_496(50)>
  # vectp.644_488 = PHI <vectp.645_493(71), vectp.644_487(50)>
  # vectp.648_479 = PHI <vectp.649_484(71), vectp.648_478(50)>
  # vectp.652_470 = PHI <vectp.653_475(71), vectp.652_469(50)>
  # vectp.656_461 = PHI <vectp.657_466(71), vectp.656_460(50)>
  # vectp.658_454 = PHI <vectp.659_201(71), vectp.658_453(50)>
  # vectp.661_446 = PHI <vectp.662_451(71), vectp.661_445(50)>
  # vectp.665_437 = PHI <vectp.666_442(71), vectp.665_436(50)>
  # vectp.669_428 = PHI <vectp.670_433(71), vectp.669_427(50)>
  # vectp.673_419 = PHI <vectp.674_424(71), vectp.673_418(50)>
  # vectp.677_410 = PHI <vectp.678_415(71), vectp.677_409(50)>
  # vectp.681_401 = PHI <vectp.682_406(71), vectp.681_400(50)>
  # vectp.685_392 = PHI <vectp.686_397(71), vectp.685_391(50)>
  # vectp.689_383 = PHI <vectp.690_388(71), vectp.689_382(50)>
  # vectp.693_374 = PHI <vectp.694_379(71), vectp.693_373(50)>
  # vectp.695_367 = PHI <vectp.696_229(71), vectp.695_366(50)>
  # vectp.698_359 = PHI <vectp.699_364(71), vectp.698_358(50)>
  # vectp.702_350 = PHI <vectp.703_355(71), vectp.702_349(50)>
  # vectp.706_341 = PHI <vectp.707_346(71), vectp.706_340(50)>
  # vectp.710_315 = PHI <vectp.711_337(71), vectp.710_314(50)>
  # vectp.714_306 = PHI <vectp.715_311(71), vectp.714_305(50)>
  # vectp.718_274 = PHI <vectp.719_302(71), vectp.718_272(50)>
  # vectp.722_12 = PHI <vectp.723_266(71), vectp.722_11(50)>
  # vectp.726_3 = PHI <vectp.727_8(71), vectp.726_2(50)>
  # vectp.730_931 = PHI <vectp.731_984(71), vectp.730_930(50)>
  # ivtmp_257 = PHI <0(71), ivtmp_928(50)>
  _141 = j_323 + pretmp_734;
  _142 = (long unsigned int) _141;
  _143 = _142 * 4;
  _144 = Syy_40 + _143;
  _147 = j_323 + -1;
  _148 = _147 + pretmp_739;
  _149 = (long unsigned int) _148;
  _150 = _149 * 4;
  _151 = Iyy_34 + _150;
  vect__152.623_539 = MEM[(float *)vectp.621_541];
  _152 = *_151;
  _153 = j_323 + pretmp_739;
  _154 = (long unsigned int) _153;
  _155 = _154 * 4;
  _156 = Iyy_34 + _155;
  vect__157.626_531 = MEM[(float *)vectp.624_533];
  _157 = *_156;
  vect__158.627_530 = vect__152.623_539 + vect__157.626_531;
  _158 = _152 + _157;
  j_159 = j_323 + 1;
  _160 = j_159 + pretmp_739;
  _161 = (long unsigned int) _160;
  _162 = _161 * 4;
  _163 = Iyy_34 + _162;
  vect__164.630_522 = MEM[(float *)vectp.628_524];
  _164 = *_163;
  vect__165.631_521 = vect__158.627_530 + vect__164.630_522;
  _165 = _158 + _164;
  _166 = _147 + pretmp_734;
  _167 = (long unsigned int) _166;
  _168 = _167 * 4;
  _169 = Iyy_34 + _168;
  vect__170.634_513 = MEM[(float *)vectp.632_515];
  _170 = *_169;
  vect__171.635_512 = vect__165.631_521 + vect__170.634_513;
  _171 = _165 + _170;
  _172 = Iyy_34 + _143;
  vect__173.638_504 = MEM[(float *)vectp.636_506];
  _173 = *_172;
  vect__174.639_503 = vect__171.635_512 + vect__173.638_504;
  _174 = _171 + _173;
  _175 = j_159 + pretmp_734;
  _176 = (long unsigned int) _175;
  _177 = _176 * 4;
  _178 = Iyy_34 + _177;
  vect__179.642_495 = MEM[(float *)vectp.640_497];
  _179 = *_178;
  vect__180.643_494 = vect__174.639_503 + vect__179.642_495;
  _180 = _174 + _179;
  _183 = _147 + pretmp_750;
  _184 = (long unsigned int) _183;
  _185 = _184 * 4;
  _186 = Iyy_34 + _185;
  vect__187.646_486 = MEM[(float *)vectp.644_488];
  _187 = *_186;
  vect__188.647_485 = vect__180.643_494 + vect__187.646_486;
  _188 = _180 + _187;
  _189 = j_323 + pretmp_750;
  _190 = (long unsigned int) _189;
  _191 = _190 * 4;
  _192 = Iyy_34 + _191;
  vect__193.650_477 = MEM[(float *)vectp.648_479];
  _193 = *_192;
  vect__194.651_476 = vect__188.647_485 + vect__193.650_477;
  _194 = _188 + _193;
  _195 = j_159 + pretmp_750;
  _196 = (long unsigned int) _195;
  _197 = _196 * 4;
  _198 = Iyy_34 + _197;
  vect__199.654_468 = MEM[(float *)vectp.652_470];
  _199 = *_198;
  vect__200.655_467 = vect__194.651_476 + vect__199.654_468;
  _200 = _194 + _199;
  MEM[(float *)vectp.656_461] = vect__200.655_467;
  _202 = Sxy_38 + _143;
  _203 = Ixy_32 + _150;
  vect__204.660_452 = MEM[(float *)vectp.658_454];
  _204 = *_203;
  _205 = Ixy_32 + _155;
  vect__206.663_444 = MEM[(float *)vectp.661_446];
  _206 = *_205;
  vect__207.664_443 = vect__204.660_452 + vect__206.663_444;
  _207 = _204 + _206;
  _208 = Ixy_32 + _162;
  vect__209.667_435 = MEM[(float *)vectp.665_437];
  _209 = *_208;
  vect__210.668_434 = vect__207.664_443 + vect__209.667_435;
  _210 = _207 + _209;
  _211 = Ixy_32 + _168;
  vect__212.671_426 = MEM[(float *)vectp.669_428];
  _212 = *_211;
  vect__213.672_425 = vect__210.668_434 + vect__212.671_426;
  _213 = _210 + _212;
  _214 = Ixy_32 + _143;
  vect__215.675_417 = MEM[(float *)vectp.673_419];
  _215 = *_214;
  vect__216.676_416 = vect__213.672_425 + vect__215.675_417;
  _216 = _213 + _215;
  _217 = Ixy_32 + _177;
  vect__218.679_408 = MEM[(float *)vectp.677_410];
  _218 = *_217;
  vect__219.680_407 = vect__216.676_416 + vect__218.679_408;
  _219 = _216 + _218;
  _220 = Ixy_32 + _185;
  vect__221.683_399 = MEM[(float *)vectp.681_401];
  _221 = *_220;
  vect__222.684_398 = vect__219.680_407 + vect__221.683_399;
  _222 = _219 + _221;
  _223 = Ixy_32 + _191;
  vect__224.687_390 = MEM[(float *)vectp.685_392];
  _224 = *_223;
  vect__225.688_389 = vect__222.684_398 + vect__224.687_390;
  _225 = _222 + _224;
  _226 = Ixy_32 + _197;
  vect__227.691_381 = MEM[(float *)vectp.689_383];
  _227 = *_226;
  vect__228.692_380 = vect__225.688_389 + vect__227.691_381;
  _228 = _225 + _227;
  MEM[(float *)vectp.693_374] = vect__228.692_380;
  _230 = Sxx_36 + _143;
  _231 = Ixx_30 + _150;
  vect__232.697_365 = MEM[(float *)vectp.695_367];
  _232 = *_231;
  _233 = Ixx_30 + _155;
  vect__234.700_357 = MEM[(float *)vectp.698_359];
  _234 = *_233;
  vect__235.701_356 = vect__232.697_365 + vect__234.700_357;
  _235 = _232 + _234;
  _236 = Ixx_30 + _162;
  vect__237.704_348 = MEM[(float *)vectp.702_350];
  _237 = *_236;
  vect__238.705_347 = vect__235.701_356 + vect__237.704_348;
  _238 = _235 + _237;
  _239 = Ixx_30 + _168;
  vect__240.708_339 = MEM[(float *)vectp.706_341];
  _240 = *_239;
  vect__241.709_338 = vect__238.705_347 + vect__240.708_339;
  _241 = _238 + _240;
  _242 = Ixx_30 + _143;
  vect__243.712_313 = MEM[(float *)vectp.710_315];
  _243 = *_242;
  vect__244.713_312 = vect__241.709_338 + vect__243.712_313;
  _244 = _241 + _243;
  _245 = Ixx_30 + _177;
  vect__246.716_304 = MEM[(float *)vectp.714_306];
  _246 = *_245;
  vect__247.717_303 = vect__244.713_312 + vect__246.716_304;
  _247 = _244 + _246;
  _248 = Ixx_30 + _185;
  vect__249.720_271 = MEM[(float *)vectp.718_274];
  _249 = *_248;
  vect__250.721_267 = vect__247.717_303 + vect__249.720_271;
  _250 = _247 + _249;
  _251 = Ixx_30 + _191;
  vect__252.724_10 = MEM[(float *)vectp.722_12];
  _252 = *_251;
  vect__253.725_9 = vect__250.721_267 + vect__252.724_10;
  _253 = _250 + _252;
  _254 = Ixx_30 + _197;
  vect__255.728_1 = MEM[(float *)vectp.726_3];
  _255 = *_254;
  vect__256.729_990 = vect__253.725_9 + vect__255.728_1;
  _256 = _253 + _255;
  MEM[(float *)vectp.730_931] = vect__256.729_990;
  vectp.621_540 = vectp.621_541 + 16;
  vectp.624_532 = vectp.624_533 + 16;
  vectp.628_523 = vectp.628_524 + 16;
  vectp.632_514 = vectp.632_515 + 16;
  vectp.636_505 = vectp.636_506 + 16;
  vectp.640_496 = vectp.640_497 + 16;
  vectp.644_487 = vectp.644_488 + 16;
  vectp.648_478 = vectp.648_479 + 16;
  vectp.652_469 = vectp.652_470 + 16;
  vectp.656_460 = vectp.656_461 + 16;
  vectp.658_453 = vectp.658_454 + 16;
  vectp.661_445 = vectp.661_446 + 16;
  vectp.665_436 = vectp.665_437 + 16;
  vectp.669_427 = vectp.669_428 + 16;
  vectp.673_418 = vectp.673_419 + 16;
  vectp.677_409 = vectp.677_410 + 16;
  vectp.681_400 = vectp.681_401 + 16;
  vectp.685_391 = vectp.685_392 + 16;
  vectp.689_382 = vectp.689_383 + 16;
  vectp.693_373 = vectp.693_374 + 16;
  vectp.695_366 = vectp.695_367 + 16;
  vectp.698_358 = vectp.698_359 + 16;
  vectp.702_349 = vectp.702_350 + 16;
  vectp.706_340 = vectp.706_341 + 16;
  vectp.710_314 = vectp.710_315 + 16;
  vectp.714_305 = vectp.714_306 + 16;
  vectp.718_272 = vectp.718_274 + 16;
  vectp.722_11 = vectp.722_12 + 16;
  vectp.726_2 = vectp.726_3 + 16;
  vectp.730_930 = vectp.730_931 + 16;
  ivtmp_928 = ivtmp_257 + 1;
  if (ivtmp_928 < bnd.618_677)
    goto <bb 50>;
  else
    goto <bb 54>;

  <bb 52>:
  # j_673 = PHI <j_655(53), j_554(55)>
  _671 = j_673 + pretmp_734;
  _670 = (long unsigned int) _671;
  _669 = _670 * 4;
  _668 = Syy_40 + _669;
  _667 = j_673 + -1;
  _666 = _667 + pretmp_739;
  _665 = (long unsigned int) _666;
  _664 = _665 * 4;
  _663 = Iyy_34 + _664;
  _662 = *_663;
  _661 = j_673 + pretmp_739;
  _660 = (long unsigned int) _661;
  _659 = _660 * 4;
  _658 = Iyy_34 + _659;
  _657 = *_658;
  _656 = _662 + _657;
  j_655 = j_673 + 1;
  _654 = j_655 + pretmp_739;
  _653 = (long unsigned int) _654;
  _652 = _653 * 4;
  _651 = Iyy_34 + _652;
  _650 = *_651;
  _649 = _656 + _650;
  _648 = _667 + pretmp_734;
  _647 = (long unsigned int) _648;
  _646 = _647 * 4;
  _645 = Iyy_34 + _646;
  _644 = *_645;
  _643 = _649 + _644;
  _642 = Iyy_34 + _669;
  _641 = *_642;
  _640 = _643 + _641;
  _639 = j_655 + pretmp_734;
  _638 = (long unsigned int) _639;
  _637 = _638 * 4;
  _636 = Iyy_34 + _637;
  _635 = *_636;
  _634 = _640 + _635;
  _633 = _667 + pretmp_750;
  _632 = (long unsigned int) _633;
  _631 = _632 * 4;
  _630 = Iyy_34 + _631;
  _629 = *_630;
  _627 = _634 + _629;
  _626 = j_673 + pretmp_750;
  _625 = (long unsigned int) _626;
  _624 = _625 * 4;
  _623 = Iyy_34 + _624;
  _622 = *_623;
  _621 = _627 + _622;
  _620 = j_655 + pretmp_750;
  _619 = (long unsigned int) _620;
  _618 = _619 * 4;
  _617 = Iyy_34 + _618;
  _616 = *_617;
  _615 = _621 + _616;
  *_668 = _615;
  _613 = Sxy_38 + _669;
  _612 = Ixy_32 + _664;
  _611 = *_612;
  _610 = Ixy_32 + _659;
  _609 = *_610;
  _608 = _611 + _609;
  _607 = Ixy_32 + _652;
  _606 = *_607;
  _605 = _608 + _606;
  _604 = Ixy_32 + _646;
  _603 = *_604;
  _602 = _605 + _603;
  _601 = Ixy_32 + _669;
  _600 = *_601;
  _599 = _602 + _600;
  _598 = Ixy_32 + _637;
  _597 = *_598;
  _596 = _599 + _597;
  _595 = Ixy_32 + _631;
  _594 = *_595;
  _593 = _596 + _594;
  _592 = Ixy_32 + _624;
  _591 = *_592;
  _590 = _593 + _591;
  _589 = Ixy_32 + _618;
  _588 = *_589;
  _587 = _590 + _588;
  *_613 = _587;
  _585 = Sxx_36 + _669;
  _584 = Ixx_30 + _664;
  _583 = *_584;
  _582 = Ixx_30 + _659;
  _581 = *_582;
  _580 = _583 + _581;
  _579 = Ixx_30 + _652;
  _578 = *_579;
  _577 = _580 + _578;
  _576 = Ixx_30 + _646;
  _575 = *_576;
  _574 = _577 + _575;
  _573 = Ixx_30 + _669;
  _572 = *_573;
  _571 = _574 + _572;
  _570 = Ixx_30 + _637;
  _569 = *_570;
  _568 = _571 + _569;
  _567 = Ixx_30 + _631;
  _566 = *_567;
  _565 = _568 + _566;
  _564 = Ixx_30 + _624;
  _563 = *_564;
  _562 = _565 + _563;
  _561 = Ixx_30 + _618;
  _560 = *_561;
  _559 = _562 + _560;
  *_585 = _559;
  if (C_19(D) > j_655)
    goto <bb 53>;
  else
    goto <bb 56>;

  <bb 53>:
  goto <bb 52>;

  <bb 54>:
  # j_553 = PHI <j_159(51)>
  _547 = (int) ratio_mult_vf.619_674;
  tmp.620_548 = _547 + j_687;
  if (ratio_mult_vf.619_674 == niters.617_678)
    goto <bb 57>;
  else
    goto <bb 55>;

  <bb 55>:
  # j_554 = PHI <tmp.620_548(54), j_687(70)>
  goto <bb 52>;

  <bb 56>:

  <bb 57>:

  <bb 58>:
  pretmp_50 = pretmp_749;

  <bb 59>:
  # prephitmp_836 = PHI <pretmp_749(58), pretmp_835(63)>
  if (R_17(D) > prephitmp_836)
    goto <bb 61>;
  else
    goto <bb 60>;

  <bb 60>:
  goto <bb 83>;

  <bb 61>:

  <bb 62>:
  # i_322 = PHI <2(49), prephitmp_836(61)>
  if (C_19(D) > 2)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  pretmp_835 = i_322 + 1;
  goto <bb 59>;

  <bb 64>:
  pretmp_734 = _20 * i_322;
  pretmp_738 = i_322 + -1;
  pretmp_739 = _20 * pretmp_738;
  pretmp_749 = i_322 + 1;
  pretmp_750 = _20 * pretmp_749;
  _854 = (unsigned int) C_19(D);
  niters.612_855 = _854 + 4294967294;
  _852 = (sizetype) pretmp_739;
  _849 = _852 + 1;
  _848 = _849 * 4;
  vectp.613_853 = Iyy_34 + _848;
  _846 = (unsigned long) vectp.613_853;
  _845 = _846 & 15;
  _844 = _845 >> 2;
  _843 = -_844;
  _842 = (unsigned int) _843;
  _841 = _842 & 3;
  prolog_loop_niters.614_847 = MIN_EXPR <_841, niters.612_855>;
  if (niters.612_855 <= 4)
    goto <bb 65>;
  else
    goto <bb 66>;

  <bb 65>:

  <bb 66>:
  # prologue_after_cost_adjust.615_688 = PHI <niters.612_855(65), prolog_loop_niters.614_847(64)>
  if (prologue_after_cost_adjust.615_688 == 0)
    goto <bb 70>;
  else
    goto <bb 67>;

  <bb 67>:
  # j_51 = PHI <2(66)>
  # ivtmp_45 = PHI <0(66)>

  <bb 95>:
  # j_840 = PHI <j_51(67), j_819(68)>
  # ivtmp_681 = PHI <ivtmp_45(67), ivtmp_680(68)>
  _838 = j_840 + pretmp_734;
  _834 = (long unsigned int) _838;
  _833 = _834 * 4;
  _832 = Syy_40 + _833;
  _831 = j_840 + -1;
  _830 = _831 + pretmp_739;
  _829 = (long unsigned int) _830;
  _828 = _829 * 4;
  _827 = Iyy_34 + _828;
  _826 = *_827;
  _825 = j_840 + pretmp_739;
  _824 = (long unsigned int) _825;
  _823 = _824 * 4;
  _822 = Iyy_34 + _823;
  _821 = *_822;
  _820 = _826 + _821;
  j_819 = j_840 + 1;
  _818 = j_819 + pretmp_739;
  _817 = (long unsigned int) _818;
  _816 = _817 * 4;
  _815 = Iyy_34 + _816;
  _814 = *_815;
  _813 = _820 + _814;
  _812 = _831 + pretmp_734;
  _811 = (long unsigned int) _812;
  _810 = _811 * 4;
  _809 = Iyy_34 + _810;
  _808 = *_809;
  _807 = _813 + _808;
  _806 = Iyy_34 + _833;
  _805 = *_806;
  _804 = _807 + _805;
  _803 = j_819 + pretmp_734;
  _802 = (long unsigned int) _803;
  _801 = _802 * 4;
  _800 = Iyy_34 + _801;
  _799 = *_800;
  _798 = _804 + _799;
  _797 = _831 + pretmp_750;
  _796 = (long unsigned int) _797;
  _795 = _796 * 4;
  _794 = Iyy_34 + _795;
  _793 = *_794;
  _792 = _798 + _793;
  _791 = j_840 + pretmp_750;
  _790 = (long unsigned int) _791;
  _789 = _790 * 4;
  _788 = Iyy_34 + _789;
  _787 = *_788;
  _786 = _792 + _787;
  _785 = j_819 + pretmp_750;
  _784 = (long unsigned int) _785;
  _783 = _784 * 4;
  _782 = Iyy_34 + _783;
  _781 = *_782;
  _780 = _786 + _781;
  *_832 = _780;
  _778 = Sxy_38 + _833;
  _777 = Ixy_32 + _828;
  _776 = *_777;
  _775 = Ixy_32 + _823;
  _774 = *_775;
  _773 = _776 + _774;
  _772 = Ixy_32 + _816;
  _771 = *_772;
  _770 = _773 + _771;
  _769 = Ixy_32 + _810;
  _768 = *_769;
  _733 = _770 + _768;
  _732 = Ixy_32 + _833;
  _731 = *_732;
  _730 = _733 + _731;
  _729 = Ixy_32 + _801;
  _728 = *_729;
  _727 = _730 + _728;
  _726 = Ixy_32 + _795;
  _725 = *_726;
  _724 = _727 + _725;
  _723 = Ixy_32 + _789;
  _722 = *_723;
  _721 = _724 + _722;
  _720 = Ixy_32 + _783;
  _719 = *_720;
  _718 = _721 + _719;
  *_778 = _718;
  _716 = Sxx_36 + _833;
  _715 = Ixx_30 + _828;
  _714 = *_715;
  _713 = Ixx_30 + _823;
  _712 = *_713;
  _711 = _714 + _712;
  _710 = Ixx_30 + _816;
  _709 = *_710;
  _708 = _711 + _709;
  _707 = Ixx_30 + _810;
  _706 = *_707;
  _705 = _708 + _706;
  _704 = Ixx_30 + _833;
  _703 = *_704;
  _702 = _705 + _703;
  _701 = Ixx_30 + _801;
  _700 = *_701;
  _699 = _702 + _700;
  _698 = Ixx_30 + _795;
  _697 = *_698;
  _696 = _699 + _697;
  _695 = Ixx_30 + _789;
  _694 = *_695;
  _693 = _696 + _694;
  _692 = Ixx_30 + _783;
  _691 = *_692;
  _690 = _693 + _691;
  *_716 = _690;
  ivtmp_680 = ivtmp_681 + 1;
  if (ivtmp_680 < prologue_after_cost_adjust.615_688)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  goto <bb 95>;

  <bb 69>:
  # j_686 = PHI <j_819(95)>
  if (prologue_after_cost_adjust.615_688 == niters.612_855)
    goto <bb 58>;
  else
    goto <bb 70>;

  <bb 70>:
  # j_687 = PHI <j_686(69), 2(66)>
  prolog_loop_adjusted_niters.616_679 = (sizetype) prologue_after_cost_adjust.615_688;
  niters.617_678 = niters.612_855 - prologue_after_cost_adjust.615_688;
  _676 = niters.617_678 + 4294967292;
  _675 = _676 >> 2;
  bnd.618_677 = _675 + 1;
  ratio_mult_vf.619_674 = bnd.618_677 << 2;
  _557 = (unsigned int) C_19(D);
  _556 = _557 - prologue_after_cost_adjust.615_688;
  _555 = _556 + 4294967293;
  if (_555 <= 2)
    goto <bb 55>;
  else
    goto <bb 71>;

  <bb 71>:
  _545 = (sizetype) pretmp_739;
  _544 = _545 + prolog_loop_adjusted_niters.616_679;
  _543 = _544 + 1;
  _542 = _543 * 4;
  vectp.622_546 = Iyy_34 + _542;
  _537 = (sizetype) pretmp_739;
  _536 = _537 + prolog_loop_adjusted_niters.616_679;
  _535 = _536 + 2;
  _534 = _535 * 4;
  vectp.625_538 = Iyy_34 + _534;
  _528 = (sizetype) pretmp_739;
  _527 = _528 + prolog_loop_adjusted_niters.616_679;
  _526 = _527 + 3;
  _525 = _526 * 4;
  vectp.629_529 = Iyy_34 + _525;
  _519 = (sizetype) pretmp_734;
  _518 = _519 + prolog_loop_adjusted_niters.616_679;
  _517 = _518 + 1;
  _516 = _517 * 4;
  vectp.633_520 = Iyy_34 + _516;
  _510 = (sizetype) pretmp_734;
  _509 = _510 + prolog_loop_adjusted_niters.616_679;
  _508 = _509 + 2;
  _507 = _508 * 4;
  vectp.637_511 = Iyy_34 + _507;
  _501 = (sizetype) pretmp_734;
  _500 = _501 + prolog_loop_adjusted_niters.616_679;
  _499 = _500 + 3;
  _498 = _499 * 4;
  vectp.641_502 = Iyy_34 + _498;
  _492 = (sizetype) pretmp_750;
  _491 = _492 + prolog_loop_adjusted_niters.616_679;
  _490 = _491 + 1;
  _489 = _490 * 4;
  vectp.645_493 = Iyy_34 + _489;
  _483 = (sizetype) pretmp_750;
  _482 = _483 + prolog_loop_adjusted_niters.616_679;
  _481 = _482 + 2;
  _480 = _481 * 4;
  vectp.649_484 = Iyy_34 + _480;
  _474 = (sizetype) pretmp_750;
  _473 = _474 + prolog_loop_adjusted_niters.616_679;
  _472 = _473 + 3;
  _471 = _472 * 4;
  vectp.653_475 = Iyy_34 + _471;
  _465 = (sizetype) pretmp_734;
  _464 = _465 + prolog_loop_adjusted_niters.616_679;
  _463 = _464 + 2;
  _462 = _463 * 4;
  vectp.657_466 = Syy_40 + _462;
  _458 = (sizetype) pretmp_739;
  _457 = _458 + prolog_loop_adjusted_niters.616_679;
  _456 = _457 + 1;
  _455 = _456 * 4;
  vectp.659_201 = Ixy_32 + _455;
  _450 = (sizetype) pretmp_739;
  _449 = _450 + prolog_loop_adjusted_niters.616_679;
  _448 = _449 + 2;
  _447 = _448 * 4;
  vectp.662_451 = Ixy_32 + _447;
  _441 = (sizetype) pretmp_739;
  _440 = _441 + prolog_loop_adjusted_niters.616_679;
  _439 = _440 + 3;
  _438 = _439 * 4;
  vectp.666_442 = Ixy_32 + _438;
  _432 = (sizetype) pretmp_734;
  _431 = _432 + prolog_loop_adjusted_niters.616_679;
  _430 = _431 + 1;
  _429 = _430 * 4;
  vectp.670_433 = Ixy_32 + _429;
  _423 = (sizetype) pretmp_734;
  _422 = _423 + prolog_loop_adjusted_niters.616_679;
  _421 = _422 + 2;
  _420 = _421 * 4;
  vectp.674_424 = Ixy_32 + _420;
  _414 = (sizetype) pretmp_734;
  _413 = _414 + prolog_loop_adjusted_niters.616_679;
  _412 = _413 + 3;
  _411 = _412 * 4;
  vectp.678_415 = Ixy_32 + _411;
  _405 = (sizetype) pretmp_750;
  _404 = _405 + prolog_loop_adjusted_niters.616_679;
  _403 = _404 + 1;
  _402 = _403 * 4;
  vectp.682_406 = Ixy_32 + _402;
  _396 = (sizetype) pretmp_750;
  _395 = _396 + prolog_loop_adjusted_niters.616_679;
  _394 = _395 + 2;
  _393 = _394 * 4;
  vectp.686_397 = Ixy_32 + _393;
  _387 = (sizetype) pretmp_750;
  _386 = _387 + prolog_loop_adjusted_niters.616_679;
  _385 = _386 + 3;
  _384 = _385 * 4;
  vectp.690_388 = Ixy_32 + _384;
  _378 = (sizetype) pretmp_734;
  _377 = _378 + prolog_loop_adjusted_niters.616_679;
  _376 = _377 + 2;
  _375 = _376 * 4;
  vectp.694_379 = Sxy_38 + _375;
  _371 = (sizetype) pretmp_739;
  _370 = _371 + prolog_loop_adjusted_niters.616_679;
  _369 = _370 + 1;
  _368 = _369 * 4;
  vectp.696_229 = Ixx_30 + _368;
  _363 = (sizetype) pretmp_739;
  _362 = _363 + prolog_loop_adjusted_niters.616_679;
  _361 = _362 + 2;
  _360 = _361 * 4;
  vectp.699_364 = Ixx_30 + _360;
  _354 = (sizetype) pretmp_739;
  _353 = _354 + prolog_loop_adjusted_niters.616_679;
  _352 = _353 + 3;
  _351 = _352 * 4;
  vectp.703_355 = Ixx_30 + _351;
  _345 = (sizetype) pretmp_734;
  _344 = _345 + prolog_loop_adjusted_niters.616_679;
  _343 = _344 + 1;
  _342 = _343 * 4;
  vectp.707_346 = Ixx_30 + _342;
  _336 = (sizetype) pretmp_734;
  _335 = _336 + prolog_loop_adjusted_niters.616_679;
  _317 = _335 + 2;
  _316 = _317 * 4;
  vectp.711_337 = Ixx_30 + _316;
  _310 = (sizetype) pretmp_734;
  _309 = _310 + prolog_loop_adjusted_niters.616_679;
  _308 = _309 + 3;
  _307 = _308 * 4;
  vectp.715_311 = Ixx_30 + _307;
  _300 = (sizetype) pretmp_750;
  _299 = _300 + prolog_loop_adjusted_niters.616_679;
  _298 = _299 + 1;
  _295 = _298 * 4;
  vectp.719_302 = Ixx_30 + _295;
  _16 = (sizetype) pretmp_750;
  _15 = _16 + prolog_loop_adjusted_niters.616_679;
  _14 = _15 + 2;
  _13 = _14 * 4;
  vectp.723_266 = Ixx_30 + _13;
  _7 = (sizetype) pretmp_750;
  _6 = _7 + prolog_loop_adjusted_niters.616_679;
  _5 = _6 + 3;
  _4 = _5 * 4;
  vectp.727_8 = Ixx_30 + _4;
  _935 = (sizetype) pretmp_734;
  _934 = prolog_loop_adjusted_niters.616_679 + _935;
  _933 = _934 + 2;
  _932 = _933 * 4;
  vectp.731_984 = Sxx_36 + _932;
  goto <bb 51>;

  <bb 72>:

  <bb 73>:
  # j_325 = PHI <j_963(91), j_285(72)>
  # vectp.593_892 = PHI <vectp.594_897(91), vectp.593_891(72)>
  # vectp.596_884 = PHI <vectp.597_889(91), vectp.596_883(72)>
  # vectp.601_874 = PHI <vectp.602_879(91), vectp.601_873(72)>
  # vectp.610_859 = PHI <vectp.611_864(91), vectp.610_858(72)>
  # ivtmp_284 = PHI <0(91), ivtmp_856(72)>
  _261 = j_325 + pretmp_850;
  _262 = (long unsigned int) _261;
  _263 = _262 * 4;
  _264 = Sxx_36 + _263;
  vect__265.595_890 = MEM[(float *)vectp.593_892];
  _265 = *_264;
  _268 = Syy_40 + _263;
  vect__269.598_882 = MEM[(float *)vectp.596_884];
  _269 = *_268;
  vect_trace_270.599_881 = vect__265.595_890 + vect__269.598_882;
  trace_270 = _265 + _269;
  vect__275.600_880 = vect__265.595_890 * vect__269.598_882;
  _275 = _265 * _269;
  _276 = Sxy_38 + _263;
  vect__277.603_872 = MEM[(float *)vectp.601_874];
  _277 = *_276;
  vect__278.604_871 = vect__277.603_872 * vect__277.603_872;
  _278 = _277 * _277;
  vect_det_279.605_870 = vect__275.600_880 - vect__278.604_871;
  det_279 = _275 - _278;
  _280 = _42 + _263;
  vect__281.606_868 = vect_trace_270.599_881 * vect_cst_.607_869;
  _281 = trace_270 * 3.9999999105930328369140625e-2;
  vect__282.608_866 = vect__281.606_868 * vect_trace_270.599_881;
  _282 = _281 * trace_270;
  vect__283.609_865 = vect_det_279.605_870 - vect__282.608_866;
  _283 = det_279 - _282;
  MEM[(float *)vectp.610_859] = vect__283.609_865;
  j_285 = j_325 + 1;
  vectp.593_891 = vectp.593_892 + 16;
  vectp.596_883 = vectp.596_884 + 16;
  vectp.601_873 = vectp.601_874 + 16;
  vectp.610_858 = vectp.610_859 + 16;
  ivtmp_856 = ivtmp_284 + 1;
  if (ivtmp_856 < bnd.590_953)
    goto <bb 72>;
  else
    goto <bb 76>;

  <bb 74>:
  # j_949 = PHI <j_909(75), j_905(77)>
  _947 = j_949 + pretmp_850;
  _946 = (long unsigned int) _947;
  _945 = _946 * 4;
  _944 = Sxx_36 + _945;
  _943 = *_944;
  _942 = Syy_40 + _945;
  _941 = *_942;
  trace_940 = _943 + _941;
  _939 = _943 * _941;
  _938 = Sxy_38 + _945;
  _937 = *_938;
  _936 = _937 * _937;
  det_915 = _939 - _936;
  _914 = _42 + _945;
  _913 = trace_940 * 3.9999999105930328369140625e-2;
  _912 = _913 * trace_940;
  _911 = det_915 - _912;
  *_914 = _911;
  j_909 = j_949 + 1;
  if (C_19(D) > j_909)
    goto <bb 75>;
  else
    goto <bb 78>;

  <bb 75>:
  goto <bb 74>;

  <bb 76>:
  # j_904 = PHI <j_285(73)>
  _898 = (int) ratio_mult_vf.591_950;
  tmp.592_899 = _898 + j_963;
  if (ratio_mult_vf.591_950 == niters.589_954)
    goto <bb 79>;
  else
    goto <bb 77>;

  <bb 77>:
  # j_905 = PHI <tmp.592_899(76), j_963(90)>
  goto <bb 74>;

  <bb 78>:

  <bb 79>:

  <bb 80>:

  <bb 81>:
  i_286 = i_324 + 1;
  if (R_17(D) > i_286)
    goto <bb 82>;
  else
    goto <bb 92>;

  <bb 82>:

  <bb 83>:
  # i_324 = PHI <2(60), i_286(82)>
  if (C_19(D) > 2)
    goto <bb 84>;
  else
    goto <bb 81>;

  <bb 84>:
  pretmp_850 = _20 * i_324;
  _182 = (unsigned int) C_19(D);
  niters.584_146 = _182 + 4294967294;
  _181 = (sizetype) pretmp_850;
  _260 = _181 + 2;
  _121 = _260 * 4;
  vectp.585_60 = Sxx_36 + _121;
  _334 = (unsigned long) vectp.585_60;
  _329 = _334 & 15;
  _297 = _329 >> 2;
  _993 = -_297;
  _992 = (unsigned int) _993;
  _991 = _992 & 3;
  prolog_loop_niters.586_333 = MIN_EXPR <niters.584_146, _991>;
  if (niters.584_146 <= 4)
    goto <bb 85>;
  else
    goto <bb 86>;

  <bb 85>:

  <bb 86>:
  # prologue_after_cost_adjust.587_964 = PHI <niters.584_146(85), prolog_loop_niters.586_333(84)>
  if (prologue_after_cost_adjust.587_964 == 0)
    goto <bb 90>;
  else
    goto <bb 87>;

  <bb 87>:
  # j_1163 = PHI <2(86)>
  # ivtmp_737 = PHI <0(86)>

  <bb 94>:
  # j_988 = PHI <j_1163(87), j_965(88)>
  # ivtmp_957 = PHI <ivtmp_737(87), ivtmp_956(88)>
  _986 = j_988 + pretmp_850;
  _985 = (long unsigned int) _986;
  _981 = _985 * 4;
  _980 = Sxx_36 + _981;
  _979 = *_980;
  _978 = Syy_40 + _981;
  _977 = *_978;
  trace_976 = _979 + _977;
  _975 = _979 * _977;
  _974 = Sxy_38 + _981;
  _973 = *_974;
  _972 = _973 * _973;
  det_971 = _975 - _972;
  _970 = _42 + _981;
  _969 = trace_976 * 3.9999999105930328369140625e-2;
  _968 = _969 * trace_976;
  _967 = det_971 - _968;
  *_970 = _967;
  j_965 = j_988 + 1;
  ivtmp_956 = ivtmp_957 + 1;
  if (ivtmp_956 < prologue_after_cost_adjust.587_964)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  goto <bb 94>;

  <bb 89>:
  # j_962 = PHI <j_965(94)>
  if (niters.584_146 == prologue_after_cost_adjust.587_964)
    goto <bb 80>;
  else
    goto <bb 90>;

  <bb 90>:
  # j_963 = PHI <j_962(89), 2(86)>
  prolog_loop_adjusted_niters.588_955 = (sizetype) prologue_after_cost_adjust.587_964;
  niters.589_954 = niters.584_146 - prologue_after_cost_adjust.587_964;
  _952 = niters.589_954 + 4294967292;
  _951 = _952 >> 2;
  bnd.590_953 = _951 + 1;
  ratio_mult_vf.591_950 = bnd.590_953 << 2;
  _908 = (unsigned int) C_19(D);
  _907 = _908 - prologue_after_cost_adjust.587_964;
  _906 = _907 + 4294967293;
  if (_906 <= 2)
    goto <bb 77>;
  else
    goto <bb 91>;

  <bb 91>:
  _896 = (sizetype) pretmp_850;
  _895 = _896 + prolog_loop_adjusted_niters.588_955;
  _894 = _895 + 2;
  _893 = _894 * 4;
  vectp.594_897 = Sxx_36 + _893;
  _888 = (sizetype) pretmp_850;
  _887 = _888 + prolog_loop_adjusted_niters.588_955;
  _886 = _887 + 2;
  _885 = _886 * 4;
  vectp.597_889 = Syy_40 + _885;
  _878 = (sizetype) pretmp_850;
  _877 = _878 + prolog_loop_adjusted_niters.588_955;
  _876 = _877 + 2;
  _875 = _876 * 4;
  vectp.602_879 = Sxy_38 + _875;
  vect_cst_.607_869 = { 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2, 3.9999999105930328369140625e-2 };
  _863 = (sizetype) pretmp_850;
  _862 = _863 + prolog_loop_adjusted_niters.588_955;
  _861 = _862 + 2;
  _860 = _861 * 4;
  vectp.611_864 = _42 + _860;
  goto <bb 73>;

  <bb 92>:

  <bb 93>:
  free (Ix_26);
  free (Iy_28);
  free (Ixx_30);
  free (Ixy_32);
  free (Iyy_34);
  free (Sxx_36);
  free (Sxy_38);
  free (Syy_40);
  return;

}



;; Function cv::Mat_<_Tp>& cv::Mat_<_Tp>::operator=(const cv::Mat&) [with _Tp = float] (_ZN2cv4Mat_IfEaSERKNS_3MatE, funcdef_no=4330, decl_uid=74649, symbol_order=1984)

cv::Mat_<_Tp>& cv::Mat_<_Tp>::operator=(const cv::Mat&) [with _Tp = float] (struct Mat_ * const this, const struct Mat & m)
{
  const struct _OutputArray D.82987;
  struct Mat_ & D.82985;
  const struct _OutputArray D.82976;
  struct Mat_ & D.82974;
  struct Mat & D.82968;
  struct Mat D.82964;
  struct Mat_ & D.82963;
  struct Mat & D.82959;
  struct Mat D.78493;
  struct Mat_ & _1;
  const int _5;
  struct Mat * _7;
  int * _8;
  int _9;
  int * _11;
  int _17;
  int _18;
  int * _21;
  int _22;
  int _23;
  int _24;
  int _25;
  int _26;
  size_t * _27;
  size_t * const _28;
  long unsigned int _29;
  long unsigned int _30;
  uchar * _31;
  uchar * _32;
  uchar * _33;
  uchar * _34;
  int * _35;
  struct MatAllocator * _36;
  unsigned int _37;
  int * _39;
  const int _40;
  int _41;
  struct Mat * _42;
  int _43;
  int _44;
  struct Mat_ & _45;
  struct Mat_ & _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _52;
  size_t * _53;
  size_t * const _54;
  long unsigned int _55;
  long unsigned int _56;
  uchar * _57;
  uchar * _58;
  uchar * _59;
  uchar * _60;
  int * _61;
  struct MatAllocator * _62;
  int * _63;
  unsigned int _64;
  int * _66;
  size_t * _67;
  int * _69;
  unsigned int _70;
  int * _72;
  size_t * _74;
  unsigned int _76;
  int * _78;
  int * pretmp_164;
  int * pretmp_165;
  int * prephitmp_192;
  int * pretmp_193;

  <bb 2>:
  _5 = MEM[(int *)m_4(D)];
  _17 = _5 & 4095;
  if (_17 == 5)
    goto <bb 3>;
  else
    goto <bb 13>;

  <bb 3>:
  _7 = &this_6(D)->D.74999;
  if (m_4(D) != _7)
    goto <bb 4>;
  else
    goto <bb 47>;

  <bb 4>:
  _21 = m_4(D)->refcount;
  if (_21 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  __sync_fetch_and_add_4 (_21, 1);

  <bb 6>:
  _8 = MEM[(struct Mat *)this_6(D)].refcount;
  if (_8 != 0B)
    goto <bb 7>;
  else
    goto <bb 51>;

  <bb 7>:
  _37 = __sync_fetch_and_add_4 (_8, 4294967295);
  if (_37 == 1)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 8>:
  MEM[(struct Mat *)this_6(D)].datalimit = 0B;
  MEM[(struct Mat *)this_6(D)].dataend = 0B;
  MEM[(struct Mat *)this_6(D)].datastart = 0B;
  MEM[(struct Mat *)this_6(D)].data = 0B;
  _39 = MEM[(struct Mat *)this_6(D)].size.p;
  *_39 = 0;
  MEM[(struct Mat *)this_6(D)].refcount = 0B;
  _22 = m_4(D)->flags;
  MEM[(struct Mat *)this_6(D)].flags = _22;
  _23 = MEM[(struct Mat *)this_6(D)].dims;
  if (_23 <= 2)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _24 = m_4(D)->dims;
  if (_24 <= 2)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  MEM[(struct Mat *)this_6(D)].dims = _24;
  _25 = m_4(D)->rows;
  MEM[(struct Mat *)this_6(D)].rows = _25;
  _26 = m_4(D)->cols;
  MEM[(struct Mat *)this_6(D)].cols = _26;
  _27 = MEM[(size_t * *)this_6(D) + 72B];
  _28 = MEM[(size_t * *)m_4(D) + 72B];
  _29 = MEM[(const size_t &)_28];
  *_27 = _29;
  _30 = MEM[(const size_t &)_28 + 8];
  MEM[(size_t &)_27 + 8] = _30;
  goto <bb 12>;

  <bb 11>:
  cv::Mat::copySize (_7, m_4(D));

  <bb 12>:
  _31 = m_4(D)->data;
  MEM[(struct Mat *)this_6(D)].data = _31;
  _32 = m_4(D)->datastart;
  MEM[(struct Mat *)this_6(D)].datastart = _32;
  _33 = m_4(D)->dataend;
  MEM[(struct Mat *)this_6(D)].dataend = _33;
  _34 = m_4(D)->datalimit;
  MEM[(struct Mat *)this_6(D)].datalimit = _34;
  _35 = m_4(D)->refcount;
  MEM[(struct Mat *)this_6(D)].refcount = _35;
  _36 = m_4(D)->allocator;
  MEM[(struct Mat *)this_6(D)].allocator = _36;
  goto <bb 47>;

  <bb 13>:
  _18 = _5 & 7;
  if (_18 == 5)
    goto <bb 14>;
  else
    goto <bb 46>;

  <bb 14>:
  _9 = m_4(D)->dims;
  D.78493 = cv::Mat::reshape (m_4(D), 1, _9, 0B); [return slot optimization]
  _40 = MEM[(int *)&D.78493];
  _41 = _40 & 4095;
  if (_41 == 5)
    goto <bb 15>;
  else
    goto <bb 26>;

  <bb 15>:
  _42 = &this_6(D)->D.74999;
  if (&D.78493 != _42)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  pretmp_164 = D.78493.refcount;
  goto <bb 39>;

  <bb 17>:
  _11 = D.78493.refcount;
  if (_11 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __sync_fetch_and_add_4 (_11, 1);

  <bb 19>:
  _63 = MEM[(struct Mat *)this_6(D)].refcount;
  if (_63 != 0B)
    goto <bb 20>;
  else
    goto <bb 54>;

  <bb 20>:
  _64 = __sync_fetch_and_add_4 (_63, 4294967295);
  if (_64 == 1)
    goto <bb 52>;
  else
    goto <bb 54>;

  <bb 21>:
  MEM[(struct Mat *)this_6(D)].datalimit = 0B;
  MEM[(struct Mat *)this_6(D)].dataend = 0B;
  MEM[(struct Mat *)this_6(D)].datastart = 0B;
  MEM[(struct Mat *)this_6(D)].data = 0B;
  _66 = MEM[(struct Mat *)this_6(D)].size.p;
  *_66 = 0;
  MEM[(struct Mat *)this_6(D)].refcount = 0B;
  _48 = D.78493.flags;
  MEM[(struct Mat *)this_6(D)].flags = _48;
  _49 = MEM[(struct Mat *)this_6(D)].dims;
  if (_49 <= 2)
    goto <bb 22>;
  else
    goto <bb 24>;

  <bb 22>:
  _50 = D.78493.dims;
  if (_50 <= 2)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  MEM[(struct Mat *)this_6(D)].dims = _50;
  _51 = D.78493.rows;
  MEM[(struct Mat *)this_6(D)].rows = _51;
  _52 = D.78493.cols;
  MEM[(struct Mat *)this_6(D)].cols = _52;
  _53 = MEM[(size_t * *)this_6(D) + 72B];
  _54 = MEM[(size_t * *)&D.78493 + 72B];
  _55 = MEM[(const size_t &)_54];
  *_53 = _55;
  _56 = MEM[(const size_t &)_54 + 8];
  MEM[(size_t &)_53 + 8] = _56;
  goto <bb 25>;

  <bb 24>:
  cv::Mat::copySize (_42, &D.78493);

  <bb 25>:
  _57 = D.78493.data;
  MEM[(struct Mat *)this_6(D)].data = _57;
  _58 = D.78493.datastart;
  MEM[(struct Mat *)this_6(D)].datastart = _58;
  _59 = D.78493.dataend;
  MEM[(struct Mat *)this_6(D)].dataend = _59;
  _60 = D.78493.datalimit;
  MEM[(struct Mat *)this_6(D)].datalimit = _60;
  _61 = D.78493.refcount;
  MEM[(struct Mat *)this_6(D)].refcount = _61;
  _62 = D.78493.allocator;
  MEM[(struct Mat *)this_6(D)].allocator = _62;
  goto <bb 39>;

  <bb 26>:
  _43 = _40 & 7;
  if (_43 == 5)
    goto <bb 27>;
  else
    goto <bb 36>;

  <bb 27>:
  _44 = D.78493.dims;
  D.82964 = cv::Mat::reshape (&D.78493, 1, _44, 0B); [return slot optimization]
  goto <bb 29>;

<L10>:
  goto <bb 49> (<L6>);

  <bb 29>:
  _45 = cv::Mat_<float>::operator= (this_6(D), &D.82964);

  <bb 30>:
  _69 = D.82964.refcount;
  if (_69 != 0B)
    goto <bb 31>;
  else
    goto <bb 57>;

  <bb 31>:
  _70 = __sync_fetch_and_add_4 (_69, 4294967295);
  if (_70 == 1)
    goto <bb 55>;
  else
    goto <bb 57>;

  <bb 32>:
  D.82964.datalimit = 0B;
  D.82964.dataend = 0B;
  D.82964.datastart = 0B;
  D.82964.data = 0B;
  _72 = D.82964.size.p;
  *_72 = 0;
  D.82964.refcount = 0B;
  _67 = D.82964.step.p;
  if (&D.82964.step.buf != _67)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  D.82964 ={v} {CLOBBER};
  D.82964 ={v} {CLOBBER};
  pretmp_165 = D.78493.refcount;
  goto <bb 39>;

  <bb 34>:
  cv::fastFree (_67);
  goto <bb 33>;

<L11>:
  goto <bb 49> (<L6>);

  <bb 36>:
  MEM[(struct _InputArray *)&D.82976].flags = -2147418107;
  MEM[(struct _InputArray *)&D.82976].obj = this_6(D);
  MEM[(struct Size_ *)&D.82976 + 24B].width = 0;
  MEM[(struct Size_ *)&D.82976 + 24B].height = 0;
  D.82976.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (&D.78493, &D.82976, 5, 1.0e+0, 0.0);
  goto <bb 38>;

<L12>:
  goto <bb 49> (<L6>);

  <bb 38>:
  D.82976 ={v} {CLOBBER};
  pretmp_193 = D.78493.refcount;

  <bb 39>:
  # _47 = PHI <this_6(D)(25), _45(33), this_6(D)(38), this_6(D)(16)>
  # prephitmp_192 = PHI <_61(25), pretmp_165(33), pretmp_193(38), pretmp_164(16)>
  if (prephitmp_192 != 0B)
    goto <bb 42>;
  else
    goto <bb 59>;

<L8>:
  cv::Mat::~Mat (&D.82964);
  D.82964 ={v} {CLOBBER};
  resx 5

<L13>:
  goto <bb 49> (<L6>);

  <bb 42>:
  _76 = __sync_fetch_and_add_4 (prephitmp_192, 4294967295);
  if (_76 == 1)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 43>:
  D.78493.datalimit = 0B;
  D.78493.dataend = 0B;
  D.78493.datastart = 0B;
  D.78493.data = 0B;
  _78 = D.78493.size.p;
  *_78 = 0;
  D.78493.refcount = 0B;
  _74 = D.78493.step.p;
  if (&D.78493.step.buf != _74)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  cv::fastFree (_74);

  <bb 45>:
  D.78493 ={v} {CLOBBER};
  D.78493 ={v} {CLOBBER};
  goto <bb 47>;

  <bb 46>:
  MEM[(struct _InputArray *)&D.82987].flags = -2147418107;
  MEM[(struct _InputArray *)&D.82987].obj = this_6(D);
  MEM[(struct Size_ *)&D.82987 + 24B].width = 0;
  MEM[(struct Size_ *)&D.82987 + 24B].height = 0;
  D.82987.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (m_4(D), &D.82987, 5, 1.0e+0, 0.0);
  D.82987 ={v} {CLOBBER};

  <bb 47>:
  # _1 = PHI <this_6(D)(12), _47(45), this_6(D)(46), this_6(D)(3)>
  return _1;

<L9>:

<L6>:
  cv::Mat::~Mat (&D.78493);
  D.78493 ={v} {CLOBBER};
  resx 1

  <bb 50>:
  cv::Mat::deallocate (_7);
  goto <bb 8>;

  <bb 51>:
  goto <bb 8>;

  <bb 52>:
  cv::Mat::deallocate (_42);
  goto <bb 21>;

<L14>:
  goto <bb 49> (<L6>);

  <bb 54>:
  goto <bb 21>;

  <bb 55>:
  cv::Mat::deallocate (&D.82964);
  goto <bb 32>;

<L15>:
  goto <bb 49> (<L6>);

  <bb 57>:
  goto <bb 32>;

  <bb 58>:
  cv::Mat::deallocate (&D.78493);
  goto <bb 43>;

  <bb 59>:
  goto <bb 43>;

}



;; Function cv::Mat_<_Tp>::Mat_(const cv::Mat&) [with _Tp = float] (_ZN2cv4Mat_IfEC2ERKNS_3MatE, funcdef_no=4266, decl_uid=74942, symbol_order=1920)

cv::Mat_<_Tp>::Mat_(const cv::Mat&) [with _Tp = float] (struct Mat_ * const this, const struct Mat & m)
{
  const struct _OutputArray D.83087;
  struct Mat_ & D.83085;
  const struct _OutputArray D.83076;
  struct Mat_ & D.83074;
  const struct _OutputArray D.83065;
  struct Mat_ & D.83063;
  const struct _OutputArray D.83054;
  struct Mat_ & D.83052;
  const struct _OutputArray D.83043;
  struct Mat_ & D.83041;
  struct Mat & D.83035;
  struct Mat D.83031;
  struct Mat_ & D.83030;
  struct Mat & D.83026;
  struct Mat D.83022;
  struct Mat_ & D.83021;
  struct Mat & D.83017;
  struct Mat D.83013;
  struct Mat_ & D.83012;
  struct Mat & D.83008;
  struct Mat D.83004;
  struct Mat_ & D.83003;
  struct Mat & D.82999;
  struct Mat D.82995;
  struct Mat_ & D.82994;
  int * _6;
  struct Mat * _7;
  int * _9;
  size_t[2] * _10;
  const int _24;
  int _25;
  struct Mat * _26;
  int _27;
  int _28;
  int * pretmp_31;
  int _32;
  int _33;
  int _34;
  int _35;
  int _36;
  size_t * _37;
  size_t * const _38;
  long unsigned int _39;
  long unsigned int _40;
  uchar * _41;
  uchar * _42;
  uchar * _43;
  uchar * _44;
  int * _45;
  struct MatAllocator * _46;
  unsigned int _48;
  int * _50;
  const int _51;
  int _52;
  struct Mat * _53;
  int _54;
  int _55;
  int * prephitmp_58;
  int * _59;
  int _60;
  int _61;
  int _62;
  int _63;
  int _64;
  size_t * _65;
  size_t * const _66;
  long unsigned int _67;
  long unsigned int _68;
  uchar * _69;
  uchar * _70;
  uchar * _71;
  uchar * _72;
  int * _73;
  struct MatAllocator * _74;
  int * _75;
  unsigned int _76;
  int * _78;
  const int _79;
  int _80;
  struct Mat * _81;
  int _82;
  int _83;
  int * pretmp_85;
  int * _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  size_t * _93;
  size_t * const _94;
  long unsigned int _95;
  long unsigned int _96;
  uchar * _97;
  uchar * _98;
  uchar * _99;
  uchar * _100;
  int * _101;
  struct MatAllocator * _102;
  int * _103;
  unsigned int _104;
  int * _106;
  const int _107;
  int _108;
  struct Mat * _109;
  int _110;
  int _111;
  int * _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  size_t * _121;
  size_t * const _122;
  long unsigned int _123;
  long unsigned int _124;
  uchar * _125;
  uchar * _126;
  uchar * _127;
  uchar * _128;
  int * _129;
  struct MatAllocator * _130;
  int * _131;
  unsigned int _132;
  int * _134;
  const int _135;
  int _136;
  struct Mat * _137;
  int _138;
  int _139;
  int * _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  size_t * _149;
  size_t * const _150;
  long unsigned int _151;
  long unsigned int _152;
  uchar * _153;
  uchar * _154;
  uchar * _155;
  uchar * _156;
  int * _157;
  struct MatAllocator * _158;
  int * _159;
  unsigned int _160;
  int * _162;
  size_t * _163;
  int * _165;
  unsigned int _166;
  int * _168;
  size_t * _170;
  int * _172;
  unsigned int _173;
  int * _175;
  size_t * _177;
  unsigned int _180;
  int * _182;
  size_t * _184;
  unsigned int _187;
  int * _189;
  size_t * _191;
  unsigned int _194;
  int * _196;
  int * pretmp_485;
  int * prephitmp_486;
  int * pretmp_488;
  int * pretmp_489;
  int * pretmp_490;
  int * prephitmp_491;
  int * pretmp_492;
  int * pretmp_493;
  int * pretmp_495;
  int * prephitmp_497;
  int * pretmp_498;

  <bb 2>:
  _9 = &MEM[(struct Mat *)this_1(D)].rows;
  MEM[(struct MSize *)this_1(D) + 64B].p = _9;
  _10 = &MEM[(struct MStep *)this_1(D) + 72B].buf;
  MEM[(struct MStep *)this_1(D) + 72B].p = _10;
  MEM[(size_t *)this_1(D) + 88B] = 0;
  MEM[(size_t *)this_1(D) + 80B] = 0;
  MEM[(struct Mat *)this_1(D)].cols = 0;
  MEM[(struct Mat *)this_1(D)].rows = 0;
  MEM[(struct Mat *)this_1(D)].dims = 0;
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  MEM[(struct Mat *)this_1(D)].allocator = 0B;
  this_1(D)->D.74999.flags = 1124007941;
  _24 = MEM[(int *)m_5(D)];
  _25 = _24 & 4095;
  if (_25 == 5)
    goto <bb 3>;
  else
    goto <bb 13>;

  <bb 3>:
  _26 = &this_1(D)->D.74999;
  if (m_5(D) != _26)
    goto <bb 4>;
  else
    goto <bb 132>;

  <bb 4>:
  _6 = m_5(D)->refcount;
  if (_6 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  __sync_fetch_and_add_4 (_6, 1);
  pretmp_31 = MEM[(struct Mat *)this_1(D)].refcount;

  <bb 6>:
  # prephitmp_58 = PHI <pretmp_31(5), 0B(4)>
  if (prephitmp_58 != 0B)
    goto <bb 7>;
  else
    goto <bb 140>;

  <bb 7>:
  _48 = __sync_fetch_and_add_4 (prephitmp_58, 4294967295);
  if (_48 == 1)
    goto <bb 138>;
  else
    goto <bb 140>;

  <bb 8>:
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  _50 = MEM[(struct Mat *)this_1(D)].size.p;
  *_50 = 0;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  _32 = m_5(D)->flags;
  MEM[(struct Mat *)this_1(D)].flags = _32;
  _33 = MEM[(struct Mat *)this_1(D)].dims;
  if (_33 <= 2)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _34 = m_5(D)->dims;
  if (_34 <= 2)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  MEM[(struct Mat *)this_1(D)].dims = _34;
  _35 = m_5(D)->rows;
  MEM[(struct Mat *)this_1(D)].rows = _35;
  _36 = m_5(D)->cols;
  MEM[(struct Mat *)this_1(D)].cols = _36;
  _37 = MEM[(size_t * *)this_1(D) + 72B];
  _38 = MEM[(size_t * *)m_5(D) + 72B];
  _39 = MEM[(const size_t &)_38];
  *_37 = _39;
  _40 = MEM[(const size_t &)_38 + 8];
  MEM[(size_t &)_37 + 8] = _40;
  goto <bb 12>;

  <bb 11>:
  cv::Mat::copySize (_26, m_5(D));

  <bb 12>:
  _41 = m_5(D)->data;
  MEM[(struct Mat *)this_1(D)].data = _41;
  _42 = m_5(D)->datastart;
  MEM[(struct Mat *)this_1(D)].datastart = _42;
  _43 = m_5(D)->dataend;
  MEM[(struct Mat *)this_1(D)].dataend = _43;
  _44 = m_5(D)->datalimit;
  MEM[(struct Mat *)this_1(D)].datalimit = _44;
  _45 = m_5(D)->refcount;
  MEM[(struct Mat *)this_1(D)].refcount = _45;
  _46 = m_5(D)->allocator;
  MEM[(struct Mat *)this_1(D)].allocator = _46;
  goto <bb 132>;

  <bb 13>:
  _27 = _24 & 7;
  if (_27 == 5)
    goto <bb 14>;
  else
    goto <bb 129>;

  <bb 14>:
  _28 = m_5(D)->dims;
  D.82995 = cv::Mat::reshape (m_5(D), 1, _28, 0B); [return slot optimization]
  goto <bb 16>;

<L7>:
  goto <bb 137> (<L0>);

  <bb 16>:
  _51 = MEM[(int *)&D.82995];
  _52 = _51 & 4095;
  if (_52 == 5)
    goto <bb 17>;
  else
    goto <bb 28>;

  <bb 17>:
  _53 = &this_1(D)->D.74999;
  if (&D.82995 != _53)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  pretmp_85 = D.82995.refcount;
  goto <bb 120>;

  <bb 19>:
  _59 = D.82995.refcount;
  if (_59 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  __sync_fetch_and_add_4 (_59, 1);

  <bb 21>:
  _75 = MEM[(struct Mat *)this_1(D)].refcount;
  if (_75 != 0B)
    goto <bb 22>;
  else
    goto <bb 141>;

  <bb 22>:
  _76 = __sync_fetch_and_add_4 (_75, 4294967295);
  if (_76 == 1)
    goto <bb 142>;
  else
    goto <bb 141>;

  <bb 23>:
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  _78 = MEM[(struct Mat *)this_1(D)].size.p;
  *_78 = 0;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  _60 = D.82995.flags;
  MEM[(struct Mat *)this_1(D)].flags = _60;
  _61 = MEM[(struct Mat *)this_1(D)].dims;
  if (_61 <= 2)
    goto <bb 24>;
  else
    goto <bb 26>;

  <bb 24>:
  _62 = D.82995.dims;
  if (_62 <= 2)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  MEM[(struct Mat *)this_1(D)].dims = _62;
  _63 = D.82995.rows;
  MEM[(struct Mat *)this_1(D)].rows = _63;
  _64 = D.82995.cols;
  MEM[(struct Mat *)this_1(D)].cols = _64;
  _65 = MEM[(size_t * *)this_1(D) + 72B];
  _66 = MEM[(size_t * *)&D.82995 + 72B];
  _67 = MEM[(const size_t &)_66];
  *_65 = _67;
  _68 = MEM[(const size_t &)_66 + 8];
  MEM[(size_t &)_65 + 8] = _68;
  goto <bb 27>;

  <bb 26>:
  cv::Mat::copySize (_53, &D.82995);

  <bb 27>:
  _69 = D.82995.data;
  MEM[(struct Mat *)this_1(D)].data = _69;
  _70 = D.82995.datastart;
  MEM[(struct Mat *)this_1(D)].datastart = _70;
  _71 = D.82995.dataend;
  MEM[(struct Mat *)this_1(D)].dataend = _71;
  _72 = D.82995.datalimit;
  MEM[(struct Mat *)this_1(D)].datalimit = _72;
  _73 = D.82995.refcount;
  MEM[(struct Mat *)this_1(D)].refcount = _73;
  _74 = D.82995.allocator;
  MEM[(struct Mat *)this_1(D)].allocator = _74;
  goto <bb 120>;

  <bb 28>:
  _54 = _51 & 7;
  if (_54 == 5)
    goto <bb 29>;
  else
    goto <bb 117>;

  <bb 29>:
  _55 = D.82995.dims;
  D.83004 = cv::Mat::reshape (&D.82995, 1, _55, 0B); [return slot optimization]
  goto <bb 31>;

<L9>:
  goto <bb 134> (<L1>);

  <bb 31>:
  _79 = MEM[(int *)&D.83004];
  _80 = _79 & 4095;
  if (_80 == 5)
    goto <bb 32>;
  else
    goto <bb 43>;

  <bb 32>:
  _81 = &this_1(D)->D.74999;
  if (&D.83004 != _81)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  pretmp_492 = D.83004.refcount;
  goto <bb 108>;

  <bb 34>:
  _87 = D.83004.refcount;
  if (_87 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  __sync_fetch_and_add_4 (_87, 1);

  <bb 36>:
  _103 = MEM[(struct Mat *)this_1(D)].refcount;
  if (_103 != 0B)
    goto <bb 37>;
  else
    goto <bb 146>;

  <bb 37>:
  _104 = __sync_fetch_and_add_4 (_103, 4294967295);
  if (_104 == 1)
    goto <bb 144>;
  else
    goto <bb 146>;

  <bb 38>:
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  _106 = MEM[(struct Mat *)this_1(D)].size.p;
  *_106 = 0;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  _88 = D.83004.flags;
  MEM[(struct Mat *)this_1(D)].flags = _88;
  _89 = MEM[(struct Mat *)this_1(D)].dims;
  if (_89 <= 2)
    goto <bb 39>;
  else
    goto <bb 41>;

  <bb 39>:
  _90 = D.83004.dims;
  if (_90 <= 2)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  MEM[(struct Mat *)this_1(D)].dims = _90;
  _91 = D.83004.rows;
  MEM[(struct Mat *)this_1(D)].rows = _91;
  _92 = D.83004.cols;
  MEM[(struct Mat *)this_1(D)].cols = _92;
  _93 = MEM[(size_t * *)this_1(D) + 72B];
  _94 = MEM[(size_t * *)&D.83004 + 72B];
  _95 = MEM[(const size_t &)_94];
  *_93 = _95;
  _96 = MEM[(const size_t &)_94 + 8];
  MEM[(size_t &)_93 + 8] = _96;
  goto <bb 42>;

  <bb 41>:
  cv::Mat::copySize (_81, &D.83004);

  <bb 42>:
  _97 = D.83004.data;
  MEM[(struct Mat *)this_1(D)].data = _97;
  _98 = D.83004.datastart;
  MEM[(struct Mat *)this_1(D)].datastart = _98;
  _99 = D.83004.dataend;
  MEM[(struct Mat *)this_1(D)].dataend = _99;
  _100 = D.83004.datalimit;
  MEM[(struct Mat *)this_1(D)].datalimit = _100;
  _101 = D.83004.refcount;
  MEM[(struct Mat *)this_1(D)].refcount = _101;
  _102 = D.83004.allocator;
  MEM[(struct Mat *)this_1(D)].allocator = _102;
  goto <bb 108>;

  <bb 43>:
  _82 = _79 & 7;
  if (_82 == 5)
    goto <bb 44>;
  else
    goto <bb 105>;

  <bb 44>:
  _83 = D.83004.dims;
  D.83013 = cv::Mat::reshape (&D.83004, 1, _83, 0B); [return slot optimization]
  goto <bb 46>;

<L11>:
  goto <bb 122> (<L2>);

  <bb 46>:
  _107 = MEM[(int *)&D.83013];
  _108 = _107 & 4095;
  if (_108 == 5)
    goto <bb 47>;
  else
    goto <bb 58>;

  <bb 47>:
  _109 = &this_1(D)->D.74999;
  if (&D.83013 != _109)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  pretmp_498 = D.83013.refcount;
  goto <bb 96>;

  <bb 49>:
  _115 = D.83013.refcount;
  if (_115 != 0B)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  __sync_fetch_and_add_4 (_115, 1);

  <bb 51>:
  _131 = MEM[(struct Mat *)this_1(D)].refcount;
  if (_131 != 0B)
    goto <bb 52>;
  else
    goto <bb 149>;

  <bb 52>:
  _132 = __sync_fetch_and_add_4 (_131, 4294967295);
  if (_132 == 1)
    goto <bb 147>;
  else
    goto <bb 149>;

  <bb 53>:
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  _134 = MEM[(struct Mat *)this_1(D)].size.p;
  *_134 = 0;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  _116 = D.83013.flags;
  MEM[(struct Mat *)this_1(D)].flags = _116;
  _117 = MEM[(struct Mat *)this_1(D)].dims;
  if (_117 <= 2)
    goto <bb 54>;
  else
    goto <bb 56>;

  <bb 54>:
  _118 = D.83013.dims;
  if (_118 <= 2)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  MEM[(struct Mat *)this_1(D)].dims = _118;
  _119 = D.83013.rows;
  MEM[(struct Mat *)this_1(D)].rows = _119;
  _120 = D.83013.cols;
  MEM[(struct Mat *)this_1(D)].cols = _120;
  _121 = MEM[(size_t * *)this_1(D) + 72B];
  _122 = MEM[(size_t * *)&D.83013 + 72B];
  _123 = MEM[(const size_t &)_122];
  *_121 = _123;
  _124 = MEM[(const size_t &)_122 + 8];
  MEM[(size_t &)_121 + 8] = _124;
  goto <bb 57>;

  <bb 56>:
  cv::Mat::copySize (_109, &D.83013);

  <bb 57>:
  _125 = D.83013.data;
  MEM[(struct Mat *)this_1(D)].data = _125;
  _126 = D.83013.datastart;
  MEM[(struct Mat *)this_1(D)].datastart = _126;
  _127 = D.83013.dataend;
  MEM[(struct Mat *)this_1(D)].dataend = _127;
  _128 = D.83013.datalimit;
  MEM[(struct Mat *)this_1(D)].datalimit = _128;
  _129 = D.83013.refcount;
  MEM[(struct Mat *)this_1(D)].refcount = _129;
  _130 = D.83013.allocator;
  MEM[(struct Mat *)this_1(D)].allocator = _130;
  goto <bb 96>;

  <bb 58>:
  _110 = _107 & 7;
  if (_110 == 5)
    goto <bb 59>;
  else
    goto <bb 93>;

  <bb 59>:
  _111 = D.83013.dims;
  D.83022 = cv::Mat::reshape (&D.83013, 1, _111, 0B); [return slot optimization]
  goto <bb 61>;

<L13>:
  goto <bb 110> (<L3>);

  <bb 61>:
  _135 = MEM[(int *)&D.83022];
  _136 = _135 & 4095;
  if (_136 == 5)
    goto <bb 62>;
  else
    goto <bb 72>;

  <bb 62>:
  _137 = &this_1(D)->D.74999;
  if (&D.83022 != _137)
    goto <bb 63>;
  else
    goto <bb 85>;

  <bb 63>:
  _143 = D.83022.refcount;
  if (_143 != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

  <bb 64>:
  __sync_fetch_and_add_4 (_143, 1);

  <bb 65>:
  _159 = MEM[(struct Mat *)this_1(D)].refcount;
  if (_159 != 0B)
    goto <bb 66>;
  else
    goto <bb 152>;

  <bb 66>:
  _160 = __sync_fetch_and_add_4 (_159, 4294967295);
  if (_160 == 1)
    goto <bb 150>;
  else
    goto <bb 152>;

  <bb 67>:
  MEM[(struct Mat *)this_1(D)].datalimit = 0B;
  MEM[(struct Mat *)this_1(D)].dataend = 0B;
  MEM[(struct Mat *)this_1(D)].datastart = 0B;
  MEM[(struct Mat *)this_1(D)].data = 0B;
  _162 = MEM[(struct Mat *)this_1(D)].size.p;
  *_162 = 0;
  MEM[(struct Mat *)this_1(D)].refcount = 0B;
  _144 = D.83022.flags;
  MEM[(struct Mat *)this_1(D)].flags = _144;
  _145 = MEM[(struct Mat *)this_1(D)].dims;
  if (_145 <= 2)
    goto <bb 68>;
  else
    goto <bb 70>;

  <bb 68>:
  _146 = D.83022.dims;
  if (_146 <= 2)
    goto <bb 69>;
  else
    goto <bb 70>;

  <bb 69>:
  MEM[(struct Mat *)this_1(D)].dims = _146;
  _147 = D.83022.rows;
  MEM[(struct Mat *)this_1(D)].rows = _147;
  _148 = D.83022.cols;
  MEM[(struct Mat *)this_1(D)].cols = _148;
  _149 = MEM[(size_t * *)this_1(D) + 72B];
  _150 = MEM[(size_t * *)&D.83022 + 72B];
  _151 = MEM[(const size_t &)_150];
  *_149 = _151;
  _152 = MEM[(const size_t &)_150 + 8];
  MEM[(size_t &)_149 + 8] = _152;
  goto <bb 71>;

  <bb 70>:
  cv::Mat::copySize (_137, &D.83022);

  <bb 71>:
  _153 = D.83022.data;
  MEM[(struct Mat *)this_1(D)].data = _153;
  _154 = D.83022.datastart;
  MEM[(struct Mat *)this_1(D)].datastart = _154;
  _155 = D.83022.dataend;
  MEM[(struct Mat *)this_1(D)].dataend = _155;
  _156 = D.83022.datalimit;
  MEM[(struct Mat *)this_1(D)].datalimit = _156;
  _157 = D.83022.refcount;
  MEM[(struct Mat *)this_1(D)].refcount = _157;
  _158 = D.83022.allocator;
  MEM[(struct Mat *)this_1(D)].allocator = _158;
  goto <bb 85>;

  <bb 72>:
  _138 = _135 & 7;
  if (_138 == 5)
    goto <bb 73>;
  else
    goto <bb 82>;

  <bb 73>:
  _139 = D.83022.dims;
  D.83031 = cv::Mat::reshape (&D.83022, 1, _139, 0B); [return slot optimization]
  goto <bb 75>;

<L15>:
  goto <bb 98> (<L4>);

  <bb 75>:
  cv::Mat_<float>::operator= (this_1(D), &D.83031);

  <bb 76>:
  _165 = D.83031.refcount;
  if (_165 != 0B)
    goto <bb 77>;
  else
    goto <bb 155>;

  <bb 77>:
  _166 = __sync_fetch_and_add_4 (_165, 4294967295);
  if (_166 == 1)
    goto <bb 153>;
  else
    goto <bb 155>;

  <bb 78>:
  D.83031.datalimit = 0B;
  D.83031.dataend = 0B;
  D.83031.datastart = 0B;
  D.83031.data = 0B;
  _168 = D.83031.size.p;
  *_168 = 0;
  D.83031.refcount = 0B;
  _163 = D.83031.step.p;
  if (&D.83031.step.buf != _163)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  D.83031 ={v} {CLOBBER};
  D.83031 ={v} {CLOBBER};
  goto <bb 85>;

  <bb 80>:
  cv::fastFree (_163);
  goto <bb 79>;

<L16>:
  goto <bb 98> (<L4>);

  <bb 82>:
  MEM[(struct _InputArray *)&D.83043].flags = -2147418107;
  MEM[(struct _InputArray *)&D.83043].obj = this_1(D);
  MEM[(struct Size_ *)&D.83043 + 24B].width = 0;
  MEM[(struct Size_ *)&D.83043 + 24B].height = 0;
  D.83043.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (&D.83022, &D.83043, 5, 1.0e+0, 0.0);
  goto <bb 84>;

<L17>:
  goto <bb 98> (<L4>);

  <bb 84>:
  D.83043 ={v} {CLOBBER};

  <bb 85>:
  _172 = D.83022.refcount;
  if (_172 != 0B)
    goto <bb 88>;
  else
    goto <bb 158>;

<L5>:
  cv::Mat::~Mat (&D.83031);
  D.83031 ={v} {CLOBBER};
  resx 11

<L18>:
  goto <bb 98> (<L4>);

  <bb 88>:
  _173 = __sync_fetch_and_add_4 (_172, 4294967295);
  if (_173 == 1)
    goto <bb 156>;
  else
    goto <bb 158>;

  <bb 89>:
  D.83022.datalimit = 0B;
  D.83022.dataend = 0B;
  D.83022.datastart = 0B;
  D.83022.data = 0B;
  _175 = D.83022.size.p;
  *_175 = 0;
  D.83022.refcount = 0B;
  _170 = D.83022.step.p;
  if (&D.83022.step.buf != _170)
    goto <bb 91>;
  else
    goto <bb 90>;

  <bb 90>:
  D.83022 ={v} {CLOBBER};
  D.83022 ={v} {CLOBBER};
  pretmp_493 = D.83013.refcount;
  goto <bb 96>;

  <bb 91>:
  cv::fastFree (_170);
  goto <bb 90>;

<L19>:
  goto <bb 110> (<L3>);

  <bb 93>:
  MEM[(struct _InputArray *)&D.83054].flags = -2147418107;
  MEM[(struct _InputArray *)&D.83054].obj = this_1(D);
  MEM[(struct Size_ *)&D.83054 + 24B].width = 0;
  MEM[(struct Size_ *)&D.83054 + 24B].height = 0;
  D.83054.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (&D.83013, &D.83054, 5, 1.0e+0, 0.0);
  goto <bb 95>;

<L20>:
  goto <bb 110> (<L3>);

  <bb 95>:
  D.83054 ={v} {CLOBBER};
  pretmp_495 = D.83013.refcount;

  <bb 96>:
  # prephitmp_497 = PHI <_129(57), pretmp_493(90), pretmp_495(95), pretmp_498(48)>
  if (prephitmp_497 != 0B)
    goto <bb 100>;
  else
    goto <bb 161>;

<L14>:

<L4>:
  cv::Mat::~Mat (&D.83022);
  D.83022 ={v} {CLOBBER};
  resx 9

<L21>:
  goto <bb 110> (<L3>);

  <bb 100>:
  _180 = __sync_fetch_and_add_4 (prephitmp_497, 4294967295);
  if (_180 == 1)
    goto <bb 159>;
  else
    goto <bb 161>;

  <bb 101>:
  D.83013.datalimit = 0B;
  D.83013.dataend = 0B;
  D.83013.datastart = 0B;
  D.83013.data = 0B;
  _182 = D.83013.size.p;
  *_182 = 0;
  D.83013.refcount = 0B;
  _177 = D.83013.step.p;
  if (&D.83013.step.buf != _177)
    goto <bb 103>;
  else
    goto <bb 102>;

  <bb 102>:
  D.83013 ={v} {CLOBBER};
  D.83013 ={v} {CLOBBER};
  pretmp_490 = D.83004.refcount;
  goto <bb 108>;

  <bb 103>:
  cv::fastFree (_177);
  goto <bb 102>;

<L22>:
  goto <bb 122> (<L2>);

  <bb 105>:
  MEM[(struct _InputArray *)&D.83065].flags = -2147418107;
  MEM[(struct _InputArray *)&D.83065].obj = this_1(D);
  MEM[(struct Size_ *)&D.83065 + 24B].width = 0;
  MEM[(struct Size_ *)&D.83065 + 24B].height = 0;
  D.83065.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (&D.83004, &D.83065, 5, 1.0e+0, 0.0);
  goto <bb 107>;

<L23>:
  goto <bb 122> (<L2>);

  <bb 107>:
  D.83065 ={v} {CLOBBER};
  pretmp_489 = D.83004.refcount;

  <bb 108>:
  # prephitmp_491 = PHI <_101(42), pretmp_490(102), pretmp_489(107), pretmp_492(33)>
  if (prephitmp_491 != 0B)
    goto <bb 112>;
  else
    goto <bb 162>;

<L12>:

<L3>:
  cv::Mat::~Mat (&D.83013);
  D.83013 ={v} {CLOBBER};
  resx 7

<L24>:
  goto <bb 122> (<L2>);

  <bb 112>:
  _187 = __sync_fetch_and_add_4 (prephitmp_491, 4294967295);
  if (_187 == 1)
    goto <bb 163>;
  else
    goto <bb 162>;

  <bb 113>:
  D.83004.datalimit = 0B;
  D.83004.dataend = 0B;
  D.83004.datastart = 0B;
  D.83004.data = 0B;
  _189 = D.83004.size.p;
  *_189 = 0;
  D.83004.refcount = 0B;
  _184 = D.83004.step.p;
  if (&D.83004.step.buf != _184)
    goto <bb 115>;
  else
    goto <bb 114>;

  <bb 114>:
  D.83004 ={v} {CLOBBER};
  D.83004 ={v} {CLOBBER};
  pretmp_488 = D.82995.refcount;
  goto <bb 120>;

  <bb 115>:
  cv::fastFree (_184);
  goto <bb 114>;

<L25>:
  goto <bb 134> (<L1>);

  <bb 117>:
  MEM[(struct _InputArray *)&D.83076].flags = -2147418107;
  MEM[(struct _InputArray *)&D.83076].obj = this_1(D);
  MEM[(struct Size_ *)&D.83076 + 24B].width = 0;
  MEM[(struct Size_ *)&D.83076 + 24B].height = 0;
  D.83076.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (&D.82995, &D.83076, 5, 1.0e+0, 0.0);
  goto <bb 119>;

<L26>:
  goto <bb 134> (<L1>);

  <bb 119>:
  D.83076 ={v} {CLOBBER};
  pretmp_485 = D.82995.refcount;

  <bb 120>:
  # prephitmp_486 = PHI <_73(27), pretmp_488(114), pretmp_485(119), pretmp_85(18)>
  if (prephitmp_486 != 0B)
    goto <bb 124>;
  else
    goto <bb 167>;

<L10>:

<L2>:
  cv::Mat::~Mat (&D.83004);
  D.83004 ={v} {CLOBBER};
  resx 5

<L27>:
  goto <bb 134> (<L1>);

  <bb 124>:
  _194 = __sync_fetch_and_add_4 (prephitmp_486, 4294967295);
  if (_194 == 1)
    goto <bb 165>;
  else
    goto <bb 167>;

  <bb 125>:
  D.82995.datalimit = 0B;
  D.82995.dataend = 0B;
  D.82995.datastart = 0B;
  D.82995.data = 0B;
  _196 = D.82995.size.p;
  *_196 = 0;
  D.82995.refcount = 0B;
  _191 = D.82995.step.p;
  if (&D.82995.step.buf != _191)
    goto <bb 127>;
  else
    goto <bb 126>;

  <bb 126>:
  D.82995 ={v} {CLOBBER};
  D.82995 ={v} {CLOBBER};
  goto <bb 132>;

  <bb 127>:
  cv::fastFree (_191);
  goto <bb 126>;

<L28>:
  goto <bb 137> (<L0>);

  <bb 129>:
  MEM[(struct _InputArray *)&D.83087].flags = -2147418107;
  MEM[(struct _InputArray *)&D.83087].obj = this_1(D);
  MEM[(struct Size_ *)&D.83087 + 24B].width = 0;
  MEM[(struct Size_ *)&D.83087 + 24B].height = 0;
  D.83087.D.39359._vptr._InputArray = &MEM[(void *)&_ZTVN2cv12_OutputArrayE + 16B];
  cv::Mat::convertTo (m_5(D), &D.83087, 5, 1.0e+0, 0.0);
  goto <bb 131>;

<L29>:
  goto <bb 137> (<L0>);

  <bb 131>:
  D.83087 ={v} {CLOBBER};

  <bb 132>:
  return;

<L8>:

<L1>:
  cv::Mat::~Mat (&D.82995);
  D.82995 ={v} {CLOBBER};
  resx 3

<L30>:
  goto <bb 137> (<L0>);

<L6>:

<L0>:
  _7 = &this_1(D)->D.74999;
  cv::Mat::~Mat (_7);
  resx 1

  <bb 138>:
  cv::Mat::deallocate (_26);
  goto <bb 8>;

<L31>:
  goto <bb 137> (<L0>);

  <bb 140>:
  goto <bb 8>;

  <bb 141>:
  goto <bb 23>;

  <bb 142>:
  cv::Mat::deallocate (_53);
  goto <bb 23>;

<L32>:
  goto <bb 134> (<L1>);

  <bb 144>:
  cv::Mat::deallocate (_81);
  goto <bb 38>;

<L33>:
  goto <bb 122> (<L2>);

  <bb 146>:
  goto <bb 38>;

  <bb 147>:
  cv::Mat::deallocate (_109);
  goto <bb 53>;

<L34>:
  goto <bb 110> (<L3>);

  <bb 149>:
  goto <bb 53>;

  <bb 150>:
  cv::Mat::deallocate (_137);
  goto <bb 67>;

<L35>:
  goto <bb 98> (<L4>);

  <bb 152>:
  goto <bb 67>;

  <bb 153>:
  cv::Mat::deallocate (&D.83031);
  goto <bb 78>;

<L36>:
  goto <bb 98> (<L4>);

  <bb 155>:
  goto <bb 78>;

  <bb 156>:
  cv::Mat::deallocate (&D.83022);
  goto <bb 89>;

<L37>:
  goto <bb 110> (<L3>);

  <bb 158>:
  goto <bb 89>;

  <bb 159>:
  cv::Mat::deallocate (&D.83013);
  goto <bb 101>;

<L38>:
  goto <bb 122> (<L2>);

  <bb 161>:
  goto <bb 101>;

  <bb 162>:
  goto <bb 113>;

  <bb 163>:
  cv::Mat::deallocate (&D.83004);
  goto <bb 113>;

<L39>:
  goto <bb 134> (<L1>);

  <bb 165>:
  cv::Mat::deallocate (&D.82995);
  goto <bb 125>;

<L40>:
  goto <bb 137> (<L0>);

  <bb 167>:
  goto <bb 125>;

}



;; Function int main(int, char**) (main, funcdef_no=4003, decl_uid=74487, symbol_order=1663) (executed once)


Analyzing loop at harris.cpp:161
harris.cpp:161:24: note: ===== analyze_loop_nest =====
harris.cpp:161:24: note: === vect_analyze_loop_form ===
harris.cpp:161:24: note: not vectorized: control flow in loop.
harris.cpp:161:24: note: bad loop form.

Analyzing loop at harris.cpp:143
harris.cpp:143:5: note: ===== analyze_loop_nest =====
harris.cpp:143:5: note: === vect_analyze_loop_form ===
harris.cpp:143:5: note: ===== analyze_loop_nest_1 =====
harris.cpp:143:5: note: === vect_analyze_loop_form ===
harris.cpp:143:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [1, + , 1](no_overflow) < _529 + -2
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) _529 + 4294967293, bounded by 2147483644
harris.cpp:143:5: note: Symbolic number of iterations is (unsigned int) _529 + 4294967294
harris.cpp:143:5: note: not vectorized: control flow in loop.
harris.cpp:143:5: note: bad loop form.

Analyzing loop at harris.cpp:144
harris.cpp:144:9: note: ===== analyze_loop_nest =====
harris.cpp:144:9: note: === vect_analyze_loop_form ===
harris.cpp:144:9: note: === get_loop_niters ===
harris.cpp:144:9: note: Symbolic number of iterations is (unsigned int) _529 + 4294967294
harris.cpp:144:9: note: === vect_analyze_data_refs ===
Creating dr for *_280
analyze_innermost: success.
	base_address: pretmp_848 + (sizetype) ((long unsigned int) pretmp_852 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_848 + (sizetype) ((long unsigned int) pretmp_852 * 4)
	Access function 0: {8B, +, 4}_8
Creating dr for *_558
analyze_innermost: success.
	base_address: (float &) pretmp_860 + (sizetype) pretmp_842
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *(float &) pretmp_860 + (sizetype) pretmp_842
	Access function 0: {0, +, 4}_8
harris.cpp:144:9: note: got vectype for stmt: _281 = *_280;
vector(4) float
harris.cpp:144:9: note: got vectype for stmt: *_558 = _281;
vector(4) float
harris.cpp:144:9: note: === vect_analyze_scalar_cycles ===
harris.cpp:144:9: note: Analyze phi: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: Access function of PHI: {0, +, 1}_8
harris.cpp:144:9: note: step: 1,  init: 0
harris.cpp:144:9: note: Detected induction.
harris.cpp:144:9: note: Analyze phi: .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: === vect_pattern_recog ===
harris.cpp:144:9: note: vect_is_simple_use: operand _555
harris.cpp:144:9: note: def_stmt: _555 = (long unsigned int) j_569;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: vect_is_simple_use: operand j_569
harris.cpp:144:9: note: def_stmt: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: type of def: 4.
harris.cpp:144:9: note: vect_is_simple_use: operand 4
harris.cpp:144:9: note: vect_is_simple_use: operand _278
harris.cpp:144:9: note: def_stmt: _278 = (long unsigned int) _277;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: vect_is_simple_use: operand _277
harris.cpp:144:9: note: def_stmt: _277 = _276 + pretmp_852;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: vect_is_simple_use: operand 4
harris.cpp:144:9: note: === vect_analyze_data_ref_accesses ===
harris.cpp:144:9: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:144:9: note: init: phi relevant? j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: init: phi relevant? .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: init: stmt relevant? _555 = (long unsigned int) j_569;

harris.cpp:144:9: note: init: stmt relevant? _556 = _555 * 4;

harris.cpp:144:9: note: init: stmt relevant? _557 = _556 + pretmp_842;

harris.cpp:144:9: note: init: stmt relevant? _558 = pretmp_860 + _557;

harris.cpp:144:9: note: init: stmt relevant? _276 = j_569 + 2;

harris.cpp:144:9: note: init: stmt relevant? _277 = _276 + pretmp_852;

harris.cpp:144:9: note: init: stmt relevant? _278 = (long unsigned int) _277;

harris.cpp:144:9: note: init: stmt relevant? _279 = _278 * 4;

harris.cpp:144:9: note: init: stmt relevant? _280 = pretmp_848 + _279;

harris.cpp:144:9: note: init: stmt relevant? _281 = *_280;

harris.cpp:144:9: note: init: stmt relevant? *_558 = _281;

harris.cpp:144:9: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:144:9: note: mark relevant 4, live 0.
harris.cpp:144:9: note: init: stmt relevant? j_283 = j_569 + 1;

harris.cpp:144:9: note: init: stmt relevant? if (_230 > j_283)

harris.cpp:144:9: note: worklist: examine stmt: *_558 = _281;

harris.cpp:144:9: note: vect_is_simple_use: operand _281
harris.cpp:144:9: note: def_stmt: _281 = *_280;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: mark relevant 4, live 0.
harris.cpp:144:9: note: worklist: examine stmt: _281 = *_280;

harris.cpp:144:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _281 = *_280;
  stmt_b: *_558 = _281;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _281 = *_280;
  stmt_b: _281 = *_280;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_8)
  (chrec_b = {8B, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_558 = _281;
  stmt_b: *_558 = _281;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 4}_8)
  (chrec_b = {0, +, 4}_8)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:144:9: note: versioning for alias required: can't determine dependence between *_280 and *_558
harris.cpp:144:9: note: mark for run-time aliasing test between *_280 and *_558
harris.cpp:144:9: note: === vect_determine_vectorization_factor ===
harris.cpp:144:9: note: ==> examining phi: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: ==> examining phi: .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: ==> examining statement: _555 = (long unsigned int) j_569;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _556 = _555 * 4;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _557 = _556 + pretmp_842;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _558 = pretmp_860 + _557;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _276 = j_569 + 2;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _277 = _276 + pretmp_852;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _278 = (long unsigned int) _277;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _279 = _278 * 4;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _280 = pretmp_848 + _279;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: _281 = *_280;

harris.cpp:144:9: note: get vectype for scalar type:  float
harris.cpp:144:9: note: vectype: vector(4) float
harris.cpp:144:9: note: nunits = 4
harris.cpp:144:9: note: ==> examining statement: *_558 = _281;

harris.cpp:144:9: note: get vectype for scalar type:  float
harris.cpp:144:9: note: vectype: vector(4) float
harris.cpp:144:9: note: nunits = 4
harris.cpp:144:9: note: ==> examining statement: j_283 = j_569 + 1;

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: ==> examining statement: if (_230 > j_283)

harris.cpp:144:9: note: skip.
harris.cpp:144:9: note: vectorization factor = 4
harris.cpp:144:9: note: === vect_analyze_data_refs_alignment ===
harris.cpp:144:9: note: vect_compute_data_ref_alignment:
harris.cpp:144:9: note: can't force alignment of ref: *_280
harris.cpp:144:9: note: vect_compute_data_ref_alignment:
harris.cpp:144:9: note: can't force alignment of ref: *_558
harris.cpp:144:9: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:144:9: note: improved number of alias checks from 1 to 1
harris.cpp:144:9: note: === vect_enhance_data_refs_alignment ===
harris.cpp:144:9: note: Unknown misalignment, is_packed = 0
harris.cpp:144:9: note: Unknown misalignment, is_packed = 0
harris.cpp:144:9: note: vect_can_advance_ivs_p:
harris.cpp:144:9: note: Analyze phi: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: Analyze phi: .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: virtual phi. skip.
harris.cpp:144:9: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:144:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:144:9: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:144:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:144:9: note: Setting misalignment to -1.
harris.cpp:144:9: note: Setting misalignment to -1.
harris.cpp:144:9: note: Alignment of access forced using peeling.
harris.cpp:144:9: note: Peeling for alignment will be applied.
harris.cpp:144:9: note: Vectorizing an unaligned access.
harris.cpp:144:9: note: === vect_analyze_slp ===
harris.cpp:144:9: note: === vect_make_slp_decision ===
harris.cpp:144:9: note: === vect_detect_hybrid_slp ===
harris.cpp:144:9: note: === vect_analyze_loop_operations ===
harris.cpp:144:9: note: examining phi: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: examining phi: .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: ==> examining statement: _555 = (long unsigned int) j_569;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _556 = _555 * 4;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _557 = _556 + pretmp_842;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _558 = pretmp_860 + _557;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _276 = j_569 + 2;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _277 = _276 + pretmp_852;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _278 = (long unsigned int) _277;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _279 = _278 * 4;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _280 = pretmp_848 + _279;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: _281 = *_280;

harris.cpp:144:9: note: vect_is_simple_use: operand *_280
harris.cpp:144:9: note: not ssa-name.
harris.cpp:144:9: note: use not simple.
harris.cpp:144:9: note: vect_is_simple_use: operand *_280
harris.cpp:144:9: note: not ssa-name.
harris.cpp:144:9: note: use not simple.
harris.cpp:144:9: note: vect_model_load_cost: aligned.
harris.cpp:144:9: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:144:9: note: ==> examining statement: *_558 = _281;

harris.cpp:144:9: note: vect_is_simple_use: operand _281
harris.cpp:144:9: note: def_stmt: _281 = *_280;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:144:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:144:9: note: ==> examining statement: j_283 = j_569 + 1;

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: ==> examining statement: if (_230 > j_283)

harris.cpp:144:9: note: irrelevant.
harris.cpp:144:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:144:9: note: Cost model analysis: 
  Vector inside of loop cost: 3
  Vector prologue cost: 16
  Vector epilogue cost: 4
  Scalar iteration cost: 2
  Scalar outside cost: 1
  Vector outside cost: 20
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 13

harris.cpp:144:9: note:   Runtime profitability threshold = 12
harris.cpp:144:9: note:   Static estimate profitability threshold = 12
harris.cpp:144:9: note: epilog loop required
harris.cpp:144:9: note: vect_can_advance_ivs_p:
harris.cpp:144:9: note: Analyze phi: j_569 = PHI <0(322), j_283(316)>

harris.cpp:144:9: note: Analyze phi: .MEM_573 = PHI <.MEM_1044(322), .MEM_282(316)>

harris.cpp:144:9: note: virtual phi. skip.
harris.cpp:144:9: note: loop vectorized
harris.cpp:144:9: note: === vec_transform_loop ===
harris.cpp:144:9: note: Profitability threshold is 12 loop iterations.
harris.cpp:144:9: note: create runtime check for data references *_280 and *_558
harris.cpp:144:9: note: created 1 versioning for alias checks.
harris.cpp:144:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #732
Registering new PHI nodes in block #733
Registering new PHI nodes in block #317
Updating SSA information for statement _555 = (long unsigned int) j_569;
Updating SSA information for statement _556 = _555 * 4;
Updating SSA information for statement _557 = _556 + pretmp_842;
Updating SSA information for statement _558 = pretmp_860 + _557;
Updating SSA information for statement _276 = j_569 + 2;
Updating SSA information for statement _277 = _276 + pretmp_852;
Updating SSA information for statement _278 = (long unsigned int) _277;
Updating SSA information for statement _279 = _278 * 4;
Updating SSA information for statement _280 = pretmp_848 + _279;
Updating SSA information for statement _281 = *_280;
Updating SSA information for statement *_558 = _281;
Updating SSA information for statement j_283 = j_569 + 1;
Updating SSA information for statement if (_230 > j_283)
Registering new PHI nodes in block #316
Registering new PHI nodes in block #735
Registering new PHI nodes in block #734
Registering new PHI nodes in block #730
Updating SSA information for statement _878 = (long unsigned int) j_569;
Updating SSA information for statement _875 = _555 * 4;
Updating SSA information for statement _872 = _556 + pretmp_842;
Updating SSA information for statement _870 = pretmp_860 + _557;
Updating SSA information for statement _869 = j_569 + 2;
Updating SSA information for statement _864 = _276 + pretmp_852;
Updating SSA information for statement _859 = (long unsigned int) _277;
Updating SSA information for statement _858 = _278 * 4;
Updating SSA information for statement _855 = pretmp_848 + _279;
Updating SSA information for statement _854 = *_280;
Updating SSA information for statement *_558 = _281;
Updating SSA information for statement j_832 = j_569 + 1;
Updating SSA information for statement if (_230 > j_283)
Registering new PHI nodes in block #731
Registering new PHI nodes in block #318

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_832 -> { j_283 }
.MEM_844 -> { .MEM_282 }
_854 -> { _281 }
_855 -> { _280 }
_858 -> { _279 }
_859 -> { _278 }
_864 -> { _277 }
_869 -> { _276 }
_870 -> { _558 }
_872 -> { _557 }
_875 -> { _556 }
_878 -> { _555 }
.MEM_879 -> { .MEM_573 }
j_880 -> { j_569 }
Incremental SSA update started at block: 732
Number of blocks in CFG: 736
Number of blocks to update: 8 (  1%)
Affected blocks: 316 317 318 730 731 733 734 735


harris.cpp:144:9: note: loop peeled for vectorization to enhance alignment
harris.cpp:144:9: note: created vectp.1265_822
harris.cpp:144:9: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.1265_822 & 15) >> 2) & 3, niters.1264_829>
Removing basic block 739
<bb 739>:


;; Scaling loop 14 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 8 with scale 0.777800, bounding iterations to 0 from guessed 13
;; guessed iterations are now 11

loop at /usr/include/opencv2/core/mat.hpp:538: if (ivtmp_849 < prolog_loop_niters.1266_805)

Setting upper bound of nb iterations for prologue loop to 2
harris.cpp:144:9: note: === vect_update_inits_of_dr ===
harris.cpp:144:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 744
<bb 744>:


;; Scaling loop 8 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 15 with scale 0.777800, bounding iterations to 4 from guessed 13
;; guessed iterations are now 3
harris.cpp:144:9: note: vect_update_ivs_after_vectorizer: phi: j_569 = PHI <j_682(748), j_283(316)>

harris.cpp:144:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_573 = PHI <.MEM_20(748), .MEM_282(316)>

harris.cpp:144:9: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:144:9: note: ------>vectorizing phi: j_569 = PHI <j_682(752), j_283(316)>

harris.cpp:144:9: note: ------>vectorizing phi: .MEM_573 = PHI <.MEM_20(752), .MEM_282(316)>

harris.cpp:144:9: note: ------>vectorizing statement: _555 = (long unsigned int) j_569;

harris.cpp:144:9: note: ------>vectorizing statement: _556 = _555 * 4;

harris.cpp:144:9: note: ------>vectorizing statement: _557 = _556 + pretmp_842;

harris.cpp:144:9: note: ------>vectorizing statement: _558 = pretmp_860 + _557;

harris.cpp:144:9: note: ------>vectorizing statement: _276 = j_569 + 2;

harris.cpp:144:9: note: ------>vectorizing statement: _277 = _276 + pretmp_852;

harris.cpp:144:9: note: ------>vectorizing statement: _278 = (long unsigned int) _277;

harris.cpp:144:9: note: ------>vectorizing statement: _279 = _278 * 4;

harris.cpp:144:9: note: ------>vectorizing statement: _280 = pretmp_848 + _279;

harris.cpp:144:9: note: ------>vectorizing statement: _281 = *_280;

harris.cpp:144:9: note: transform statement.
harris.cpp:144:9: note: transform load. ncopies = 1
harris.cpp:144:9: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_848 + (sizetype) ((long unsigned int) pretmp_852 * 4)
harris.cpp:144:9: note: created vectp.1273_1270
harris.cpp:144:9: note: add new stmt: vect__281.1274_1243 = MEM[(float *)vectp.1272_1252];

harris.cpp:144:9: note: ------>vectorizing statement: *_558 = _281;

harris.cpp:144:9: note: transform statement.
harris.cpp:144:9: note: vect_is_simple_use: operand _281
harris.cpp:144:9: note: def_stmt: _281 = *_280;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: transform store. ncopies = 1
harris.cpp:144:9: note: vect_get_vec_def_for_operand: _281
harris.cpp:144:9: note: vect_is_simple_use: operand _281
harris.cpp:144:9: note: def_stmt: _281 = *_280;

harris.cpp:144:9: note: type of def: 3.
harris.cpp:144:9: note: def =  _281
  def_stmt =  _281 = *_280;

harris.cpp:144:9: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *(float &) pretmp_860 + (sizetype) pretmp_842
harris.cpp:144:9: note: created vectp.1276_1240
harris.cpp:144:9: note: add new stmt: MEM[(float &)vectp.1275_1225] = vect__281.1274_1243;

harris.cpp:144:9: note: ------>vectorizing statement: j_283 = j_569 + 1;

harris.cpp:144:9: note: ------>vectorizing statement: vectp.1272_1246 = vectp.1272_1252 + 16;

harris.cpp:144:9: note: ------>vectorizing statement: vectp.1275_1210 = vectp.1275_1225 + 16;

harris.cpp:144:9: note: ------>vectorizing statement: if (_230 > j_283)


loop at /usr/include/opencv2/core/mat.hpp:538: if (ivtmp_1198 < bnd.1269_8)

;; Scaling loop 8 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
harris.cpp:144:9: note: LOOP VECTORIZED


Analyzing loop at harris.cpp:135
harris.cpp:135:9: note: ===== analyze_loop_nest =====
harris.cpp:135:9: note: === vect_analyze_loop_form ===
harris.cpp:135:9: note: not vectorized: control flow in loop.
harris.cpp:135:9: note: bad loop form.

Analyzing loop at harris.cpp:127
harris.cpp:127:5: note: ===== analyze_loop_nest =====
harris.cpp:127:5: note: === vect_analyze_loop_form ===
harris.cpp:127:5: note: ===== analyze_loop_nest_1 =====
harris.cpp:127:5: note: === vect_analyze_loop_form ===
harris.cpp:127:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 9
  exit condition [1, + , 1](no_overflow) < _529 + -2
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) _529 + 4294967293, bounded by 2147483644
harris.cpp:127:5: note: Symbolic number of iterations is (unsigned int) _529 + 4294967294
harris.cpp:127:5: note: not vectorized: control flow in loop.
harris.cpp:127:5: note: bad loop form.

Analyzing loop at harris.cpp:128
harris.cpp:128:9: note: ===== analyze_loop_nest =====
harris.cpp:128:9: note: === vect_analyze_loop_form ===
harris.cpp:128:9: note: === get_loop_niters ===
harris.cpp:128:9: note: Symbolic number of iterations is (unsigned int) _529 + 4294967294
harris.cpp:128:9: note: === vect_analyze_data_refs ===
Creating dr for *_242
analyze_innermost: success.
	base_address: pretmp_571 + (sizetype) ((long unsigned int) pretmp_680 * 4)
	offset from base address: 0
	constant offset from base address: 8
	step: 4
	aligned to: 128
	base_object: *pretmp_571 + (sizetype) ((long unsigned int) pretmp_680 * 4)
	Access function 0: {8B, +, 4}_9
Creating dr for *_549
analyze_innermost: success.
	base_address: (float &) pretmp_808 + (sizetype) pretmp_581
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *(float &) pretmp_808 + (sizetype) pretmp_581
	Access function 0: {0, +, 4}_9
harris.cpp:128:9: note: got vectype for stmt: _243 = *_242;
vector(4) float
harris.cpp:128:9: note: got vectype for stmt: *_549 = _243;
vector(4) float
harris.cpp:128:9: note: === vect_analyze_scalar_cycles ===
harris.cpp:128:9: note: Analyze phi: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: Access function of PHI: {0, +, 1}_9
harris.cpp:128:9: note: step: 1,  init: 0
harris.cpp:128:9: note: Detected induction.
harris.cpp:128:9: note: Analyze phi: .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: === vect_pattern_recog ===
harris.cpp:128:9: note: vect_is_simple_use: operand _546
harris.cpp:128:9: note: def_stmt: _546 = (long unsigned int) j_572;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: vect_is_simple_use: operand j_572
harris.cpp:128:9: note: def_stmt: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: type of def: 4.
harris.cpp:128:9: note: vect_is_simple_use: operand 4
harris.cpp:128:9: note: vect_is_simple_use: operand _240
harris.cpp:128:9: note: def_stmt: _240 = (long unsigned int) _239;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: vect_is_simple_use: operand _239
harris.cpp:128:9: note: def_stmt: _239 = _238 + pretmp_680;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: vect_is_simple_use: operand 4
harris.cpp:128:9: note: === vect_analyze_data_ref_accesses ===
harris.cpp:128:9: note: === vect_mark_stmts_to_be_vectorized ===
harris.cpp:128:9: note: init: phi relevant? j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: init: phi relevant? .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: init: stmt relevant? _546 = (long unsigned int) j_572;

harris.cpp:128:9: note: init: stmt relevant? _547 = _546 * 4;

harris.cpp:128:9: note: init: stmt relevant? _548 = _547 + pretmp_581;

harris.cpp:128:9: note: init: stmt relevant? _549 = pretmp_808 + _548;

harris.cpp:128:9: note: init: stmt relevant? _238 = j_572 + 2;

harris.cpp:128:9: note: init: stmt relevant? _239 = _238 + pretmp_680;

harris.cpp:128:9: note: init: stmt relevant? _240 = (long unsigned int) _239;

harris.cpp:128:9: note: init: stmt relevant? _241 = _240 * 4;

harris.cpp:128:9: note: init: stmt relevant? _242 = pretmp_571 + _241;

harris.cpp:128:9: note: init: stmt relevant? _243 = *_242;

harris.cpp:128:9: note: init: stmt relevant? *_549 = _243;

harris.cpp:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
harris.cpp:128:9: note: mark relevant 4, live 0.
harris.cpp:128:9: note: init: stmt relevant? j_245 = j_572 + 1;

harris.cpp:128:9: note: init: stmt relevant? if (_230 > j_245)

harris.cpp:128:9: note: worklist: examine stmt: *_549 = _243;

harris.cpp:128:9: note: vect_is_simple_use: operand _243
harris.cpp:128:9: note: def_stmt: _243 = *_242;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: mark relevant 4, live 0.
harris.cpp:128:9: note: worklist: examine stmt: _243 = *_242;

harris.cpp:128:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: *_549 = _243;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _243 = *_242;
  stmt_b: _243 = *_242;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 4}_9)
  (chrec_b = {8B, +, 4}_9)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_549 = _243;
  stmt_b: *_549 = _243;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 4}_9)
  (chrec_b = {0, +, 4}_9)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
harris.cpp:128:9: note: versioning for alias required: can't determine dependence between *_242 and *_549
harris.cpp:128:9: note: mark for run-time aliasing test between *_242 and *_549
harris.cpp:128:9: note: === vect_determine_vectorization_factor ===
harris.cpp:128:9: note: ==> examining phi: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: ==> examining phi: .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: ==> examining statement: _546 = (long unsigned int) j_572;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _547 = _546 * 4;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _548 = _547 + pretmp_581;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _549 = pretmp_808 + _548;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _238 = j_572 + 2;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _239 = _238 + pretmp_680;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _240 = (long unsigned int) _239;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _241 = _240 * 4;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _242 = pretmp_571 + _241;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: _243 = *_242;

harris.cpp:128:9: note: get vectype for scalar type:  float
harris.cpp:128:9: note: vectype: vector(4) float
harris.cpp:128:9: note: nunits = 4
harris.cpp:128:9: note: ==> examining statement: *_549 = _243;

harris.cpp:128:9: note: get vectype for scalar type:  float
harris.cpp:128:9: note: vectype: vector(4) float
harris.cpp:128:9: note: nunits = 4
harris.cpp:128:9: note: ==> examining statement: j_245 = j_572 + 1;

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: ==> examining statement: if (_230 > j_245)

harris.cpp:128:9: note: skip.
harris.cpp:128:9: note: vectorization factor = 4
harris.cpp:128:9: note: === vect_analyze_data_refs_alignment ===
harris.cpp:128:9: note: vect_compute_data_ref_alignment:
harris.cpp:128:9: note: can't force alignment of ref: *_242
harris.cpp:128:9: note: vect_compute_data_ref_alignment:
harris.cpp:128:9: note: can't force alignment of ref: *_549
harris.cpp:128:9: note: === vect_prune_runtime_alias_test_list ===
harris.cpp:128:9: note: improved number of alias checks from 1 to 1
harris.cpp:128:9: note: === vect_enhance_data_refs_alignment ===
harris.cpp:128:9: note: Unknown misalignment, is_packed = 0
harris.cpp:128:9: note: Unknown misalignment, is_packed = 0
harris.cpp:128:9: note: vect_can_advance_ivs_p:
harris.cpp:128:9: note: Analyze phi: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: Analyze phi: .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: virtual phi. skip.
harris.cpp:128:9: note: vect_model_load_cost: unaligned supported by hardware.
harris.cpp:128:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:128:9: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:128:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
harris.cpp:128:9: note: Setting misalignment to -1.
harris.cpp:128:9: note: Setting misalignment to -1.
harris.cpp:128:9: note: Alignment of access forced using peeling.
harris.cpp:128:9: note: Peeling for alignment will be applied.
harris.cpp:128:9: note: Vectorizing an unaligned access.
harris.cpp:128:9: note: === vect_analyze_slp ===
harris.cpp:128:9: note: === vect_make_slp_decision ===
harris.cpp:128:9: note: === vect_detect_hybrid_slp ===
harris.cpp:128:9: note: === vect_analyze_loop_operations ===
harris.cpp:128:9: note: examining phi: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: examining phi: .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: ==> examining statement: _546 = (long unsigned int) j_572;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _547 = _546 * 4;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _548 = _547 + pretmp_581;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _549 = pretmp_808 + _548;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _238 = j_572 + 2;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _239 = _238 + pretmp_680;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _240 = (long unsigned int) _239;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _241 = _240 * 4;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _242 = pretmp_571 + _241;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: _243 = *_242;

harris.cpp:128:9: note: vect_is_simple_use: operand *_242
harris.cpp:128:9: note: not ssa-name.
harris.cpp:128:9: note: use not simple.
harris.cpp:128:9: note: vect_is_simple_use: operand *_242
harris.cpp:128:9: note: not ssa-name.
harris.cpp:128:9: note: use not simple.
harris.cpp:128:9: note: vect_model_load_cost: aligned.
harris.cpp:128:9: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
harris.cpp:128:9: note: ==> examining statement: *_549 = _243;

harris.cpp:128:9: note: vect_is_simple_use: operand _243
harris.cpp:128:9: note: def_stmt: _243 = *_242;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: vect_model_store_cost: unaligned supported by hardware.
harris.cpp:128:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
harris.cpp:128:9: note: ==> examining statement: j_245 = j_572 + 1;

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: ==> examining statement: if (_230 > j_245)

harris.cpp:128:9: note: irrelevant.
harris.cpp:128:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
cost model: prologue peel iters set to vf/2.
cost model: epilogue peel iters set to vf/2 because peeling for alignment is unknown.
harris.cpp:128:9: note: Cost model analysis: 
  Vector inside of loop cost: 3
  Vector prologue cost: 16
  Vector epilogue cost: 4
  Scalar iteration cost: 2
  Scalar outside cost: 1
  Vector outside cost: 20
  prologue iterations: 2
  epilogue iterations: 2
  Calculated minimum iters for profitability: 13

harris.cpp:128:9: note:   Runtime profitability threshold = 12
harris.cpp:128:9: note:   Static estimate profitability threshold = 12
harris.cpp:128:9: note: epilog loop required
harris.cpp:128:9: note: vect_can_advance_ivs_p:
harris.cpp:128:9: note: Analyze phi: j_572 = PHI <0(280), j_245(273)>

harris.cpp:128:9: note: Analyze phi: .MEM_1109 = PHI <.MEM_612(280), .MEM_244(273)>

harris.cpp:128:9: note: virtual phi. skip.
harris.cpp:128:9: note: loop vectorized
harris.cpp:128:9: note: === vec_transform_loop ===
harris.cpp:128:9: note: Profitability threshold is 12 loop iterations.
harris.cpp:128:9: note: create runtime check for data references *_242 and *_549
harris.cpp:128:9: note: created 1 versioning for alias checks.
harris.cpp:128:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #755
Registering new PHI nodes in block #756
Registering new PHI nodes in block #274
Updating SSA information for statement _546 = (long unsigned int) j_572;
Updating SSA information for statement _547 = _546 * 4;
Updating SSA information for statement _548 = _547 + pretmp_581;
Updating SSA information for statement _549 = pretmp_808 + _548;
Updating SSA information for statement _238 = j_572 + 2;
Updating SSA information for statement _239 = _238 + pretmp_680;
Updating SSA information for statement _240 = (long unsigned int) _239;
Updating SSA information for statement _241 = _240 * 4;
Updating SSA information for statement _242 = pretmp_571 + _241;
Updating SSA information for statement _243 = *_242;
Updating SSA information for statement *_549 = _243;
Updating SSA information for statement j_245 = j_572 + 1;
Updating SSA information for statement if (_230 > j_245)
Registering new PHI nodes in block #273
Registering new PHI nodes in block #758
Registering new PHI nodes in block #757
Registering new PHI nodes in block #753
Updating SSA information for statement _1087 = (long unsigned int) j_572;
Updating SSA information for statement _603 = _546 * 4;
Updating SSA information for statement _607 = _547 + pretmp_581;
Updating SSA information for statement _606 = pretmp_808 + _548;
Updating SSA information for statement _874 = j_572 + 2;
Updating SSA information for statement _1165 = _238 + pretmp_680;
Updating SSA information for statement _1174 = (long unsigned int) _239;
Updating SSA information for statement _1180 = _240 * 4;
Updating SSA information for statement _609 = pretmp_571 + _241;
Updating SSA information for statement _584 = *_242;
Updating SSA information for statement *_549 = _243;
Updating SSA information for statement j_1428 = j_572 + 1;
Updating SSA information for statement if (_230 > j_245)
Registering new PHI nodes in block #754
Registering new PHI nodes in block #275

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_584 -> { _243 }
_603 -> { _547 }
.MEM_604 -> { .MEM_1109 }
_606 -> { _549 }
_607 -> { _548 }
_609 -> { _242 }
_874 -> { _238 }
_1087 -> { _546 }
.MEM_1123 -> { .MEM_244 }
_1165 -> { _239 }
_1174 -> { _240 }
_1180 -> { _241 }
j_1191 -> { j_572 }
j_1428 -> { j_245 }
Incremental SSA update started at block: 755
Number of blocks in CFG: 759
Number of blocks to update: 8 (  1%)
Affected blocks: 273 274 275 753 754 756 757 758


harris.cpp:128:9: note: loop peeled for vectorization to enhance alignment
harris.cpp:128:9: note: created vectp.1278_1418
harris.cpp:128:9: note: niters for prolog loop: MIN_EXPR <(unsigned int) -(((unsigned long) vectp.1278_1418 & 15) >> 2) & 3, niters.1277_290>
Removing basic block 762
<bb 762>:


;; Scaling loop 17 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 4
;; Scaling loop 9 with scale 0.777800, bounding iterations to 0 from guessed 14
;; guessed iterations are now 11

loop at /usr/include/opencv2/core/mat.hpp:538: if (ivtmp_1105 < prolog_loop_niters.1279_1086)

Setting upper bound of nb iterations for prologue loop to 2
harris.cpp:128:9: note: === vect_update_inits_of_dr ===
harris.cpp:128:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 767
<bb 767>:


;; Scaling loop 9 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 18 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 3
harris.cpp:128:9: note: vect_update_ivs_after_vectorizer: phi: j_572 = PHI <j_1431(771), j_245(273)>

harris.cpp:128:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_1109 = PHI <.MEM_1117(771), .MEM_244(273)>

harris.cpp:128:9: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 2
harris.cpp:128:9: note: ------>vectorizing phi: j_572 = PHI <j_1431(775), j_245(273)>

harris.cpp:128:9: note: ------>vectorizing phi: .MEM_1109 = PHI <.MEM_1117(775), .MEM_244(273)>

harris.cpp:128:9: note: ------>vectorizing statement: _546 = (long unsigned int) j_572;

harris.cpp:128:9: note: ------>vectorizing statement: _547 = _546 * 4;

harris.cpp:128:9: note: ------>vectorizing statement: _548 = _547 + pretmp_581;

harris.cpp:128:9: note: ------>vectorizing statement: _549 = pretmp_808 + _548;

harris.cpp:128:9: note: ------>vectorizing statement: _238 = j_572 + 2;

harris.cpp:128:9: note: ------>vectorizing statement: _239 = _238 + pretmp_680;

harris.cpp:128:9: note: ------>vectorizing statement: _240 = (long unsigned int) _239;

harris.cpp:128:9: note: ------>vectorizing statement: _241 = _240 * 4;

harris.cpp:128:9: note: ------>vectorizing statement: _242 = pretmp_571 + _241;

harris.cpp:128:9: note: ------>vectorizing statement: _243 = *_242;

harris.cpp:128:9: note: transform statement.
harris.cpp:128:9: note: transform load. ncopies = 1
harris.cpp:128:9: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_571 + (sizetype) ((long unsigned int) pretmp_680 * 4)
harris.cpp:128:9: note: created vectp.1286_1053
harris.cpp:128:9: note: add new stmt: vect__243.1287_1396 = MEM[(float *)vectp.1285_176];

harris.cpp:128:9: note: ------>vectorizing statement: *_549 = _243;

harris.cpp:128:9: note: transform statement.
harris.cpp:128:9: note: vect_is_simple_use: operand _243
harris.cpp:128:9: note: def_stmt: _243 = *_242;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: transform store. ncopies = 1
harris.cpp:128:9: note: vect_get_vec_def_for_operand: _243
harris.cpp:128:9: note: vect_is_simple_use: operand _243
harris.cpp:128:9: note: def_stmt: _243 = *_242;

harris.cpp:128:9: note: type of def: 3.
harris.cpp:128:9: note: def =  _243
  def_stmt =  _243 = *_242;

harris.cpp:128:9: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *(float &) pretmp_808 + (sizetype) pretmp_581
harris.cpp:128:9: note: created vectp.1289_177
harris.cpp:128:9: note: add new stmt: MEM[(float &)vectp.1288_1029] = vect__243.1287_1396;

harris.cpp:128:9: note: ------>vectorizing statement: j_245 = j_572 + 1;

harris.cpp:128:9: note: ------>vectorizing statement: vectp.1285_1031 = vectp.1285_176 + 16;

harris.cpp:128:9: note: ------>vectorizing statement: vectp.1288_1030 = vectp.1288_1029 + 16;

harris.cpp:128:9: note: ------>vectorizing statement: if (_230 > j_245)


loop at /usr/include/opencv2/core/mat.hpp:538: if (ivtmp_1021 < bnd.1282_1424)

;; Scaling loop 9 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 2
harris.cpp:128:9: note: LOOP VECTORIZED


Analyzing loop at harris.cpp:119
harris.cpp:119:9: note: ===== analyze_loop_nest =====
harris.cpp:119:9: note: === vect_analyze_loop_form ===
harris.cpp:119:9: note: not vectorized: control flow in loop.
harris.cpp:119:9: note: bad loop form.

Analyzing loop at harris.cpp:111
harris.cpp:111:5: note: ===== analyze_loop_nest =====
harris.cpp:111:5: note: === vect_analyze_loop_form ===
harris.cpp:111:5: note: not vectorized: multiple nested loops.
harris.cpp:111:5: note: bad loop form.

Analyzing loop at harris.cpp:112
harris.cpp:112:9: note: ===== analyze_loop_nest =====
harris.cpp:112:9: note: === vect_analyze_loop_form ===
harris.cpp:112:9: note: not vectorized: control flow in loop.
harris.cpp:112:9: note: bad loop form.

Analyzing loop at harris.cpp:100
harris.cpp:100:2: note: ===== analyze_loop_nest =====
harris.cpp:100:2: note: === vect_analyze_loop_form ===
harris.cpp:100:2: note: not vectorized: control flow in loop.
harris.cpp:100:2: note: bad loop form.
harris.cpp:43:5: note: vectorized 2 loops in function.
Merging blocks 280 and 755
Merging blocks 322 and 732
Merging blocks 733 and 740
Merging blocks 736 and 748
Merging blocks 742 and 735
Merging blocks 750 and 743
Merging blocks 756 and 763
Merging blocks 759 and 771
Merging blocks 765 and 758
Merging blocks 773 and 766
Created preheader block for loop 14
Created preheader block for loop 17
int main(int, char**) (int argc, char * * argv)
{
  vector(4) float * vectp.1289;
  vector(4) float * vectp.1288;
  vector(4) float vect__243.1287;
  vector(4) float * vectp.1286;
  vector(4) float * vectp.1285;
  int tmp.1284;
  unsigned int ratio_mult_vf.1283;
  unsigned int bnd.1282;
  unsigned int niters.1281;
  sizetype prolog_loop_adjusted_niters.1280;
  unsigned int prolog_loop_niters.1279;
  vector(4) float * vectp.1278;
  unsigned int niters.1277;
  vector(4) float * vectp.1276;
  vector(4) float * vectp.1275;
  vector(4) float vect__281.1274;
  vector(4) float * vectp.1273;
  vector(4) float * vectp.1272;
  int tmp.1271;
  unsigned int ratio_mult_vf.1270;
  unsigned int bnd.1269;
  unsigned int niters.1268;
  sizetype prolog_loop_adjusted_niters.1267;
  unsigned int prolog_loop_niters.1266;
  vector(4) float * vectp.1265;
  unsigned int niters.1264;
  _Atomic_word __result;
  _Atomic_word __result;
  _Atomic_word __result;
  _Atomic_word __result;
  char_type D.83195;
  char __c;
  char_type D.83192;
  char __c;
  char_type D.83189;
  struct basic_ostream & D.83186;
  struct basic_ostream & D.83184;
  struct basic_ostream & D.83181;
  struct basic_ostream & D.83174;
  char_type D.83171;
  char __c;
  char_type D.83168;
  char __c;
  char_type D.83165;
  struct basic_ostream & D.83162;
  struct basic_ostream & D.83160;
  struct basic_ostream & D.83157;
  struct basic_ostream & D.83150;
  char_type D.83147;
  char __c;
  char_type D.83144;
  char __c;
  char_type D.83141;
  struct basic_ostream & D.83138;
  struct basic_ostream & D.83136;
  struct basic_ostream & D.83133;
  struct basic_ostream & D.83126;
  struct MatCommaInitializer_ commaInitializer;
  const struct _OutputArray D.83119;
  const struct _OutputArray D.83114;
  const struct _OutputArray D.83109;
  const struct _OutputArray D.83104;
  const struct _OutputArray D.83099;
  struct Mat & D.83094;
  struct allocator_type D.82911;
  struct allocator_type D.82908;
  struct allocator_type D.82905;
  struct allocator_type D.82902;
  struct allocator_type D.82899;
  struct allocator_type D.82896;
  struct allocator_type D.82893;
  struct allocator_type D.82890;
  struct allocator_type D.82879;
  struct allocator_type D.82876;
  struct allocator_type D.82873;
  struct allocator_type D.82870;
  struct allocator_type D.82867;
  struct allocator_type D.82864;
  struct allocator_type D.82861;
  struct allocator_type D.82858;
  struct allocator_type D.82855;
  struct allocator_type D.82667;
  int c;
  int j;
  int i;
  int i;
  int j;
  int i;
  int i;
  int jj;
  int ii;
  int j;
  int i;
  int i;
  struct Mat diffOptCV;
  struct Mat diffCVOpt;
  struct Mat result_opt;
  struct Mat result_ref;
  float * harris;
  float * img_ref;
  struct Mat sumKern;
  struct Mat gaussKern;
  struct Mat gradYKern;
  struct Mat gradXKern;
  struct Mat opencv_harris;
  struct Mat img_show_pipe;
  struct Mat img_show_harris;
  struct Mat img_show;
  struct Mat img_region_harris;
  struct Mat img_region;
  struct Rect roi;
  struct Mat imgGrayf;
  struct Mat imgGray;
  struct Mat img;
  double t_end;
  double t_start;
  struct allocator D.76178;
  const struct string D.76179;
  struct MatExpr D.76176;
  const struct _InputArray D.76180;
  const struct _InputArray D.76173;
  const struct _InputArray D.76174;
  const struct _OutputArray D.76175;
  struct allocator D.76170;
  const struct string D.76171;
  struct MatExpr D.76168;
  const struct _InputArray D.76172;
  struct allocator D.76165;
  const struct string D.76166;
  struct MatExpr D.76163;
  const struct _InputArray D.76167;
  struct allocator D.76160;
  const struct string D.76161;
  struct MatExpr D.76158;
  const struct _InputArray D.76162;
  struct allocator D.76153;
  const struct string D.76154;
  struct allocator D.76150;
  const struct string D.76151;
  struct allocator D.76147;
  const struct string D.76148;
  struct allocator D.76144;
  const struct string D.76145;
  const struct _InputArray D.76117;
  const struct _OutputArray D.76118;
  struct Mat_ D.76112;
  struct MatCommaInitializer_ D.76113;
  struct Mat_ D.76114;
  struct Mat_ D.76101;
  struct MatCommaInitializer_ D.76105;
  struct Mat_ D.76109;
  struct MatExpr D.76099;
  struct Mat_ D.76095;
  struct MatCommaInitializer_ D.76096;
  struct Mat_ D.76097;
  struct MatExpr D.76077;
  struct Mat_ D.75833;
  struct MatCommaInitializer_ D.76068;
  struct Mat_ D.76075;
  struct Mat D.74525;
  struct Mat D.74522;
  struct Mat D.74519;
  struct Mat D.74516;
  struct Mat D.74513;
  const struct _OutputArray D.74506;
  const struct _InputArray D.74504;
  const struct _OutputArray D.74505;
  struct allocator D.74501;
  const struct string D.74502;
  struct Mat D.74503;
  float * prephitmp_1;
  float & _2;
  sizetype _3;
  size_t pretmp_4;
  size_t pretmp_6;
  long unsigned int _7;
  long unsigned int _9;
  long unsigned int _13;
  unsigned int _14;
  unsigned int ivtmp_16;
  float _18;
  int _22;
  long unsigned int _23;
  int pretmp_24;
  char * _57;
  char * _60;
  int * _63;
  int _66;
  int * _68;
  unsigned int ivtmp_87;
  uchar * const _90;
  uchar * const _93;
  uchar * const _95;
  uchar * const _96;
  uchar * const _97;
  uchar * const _98;
  uchar * const _99;
  uchar * const _100;
  uchar * const _101;
  const struct Mat * const _102;
  const struct MatOp * _106;
  uchar * const _111;
  uchar * const _113;
  uchar * const _114;
  uchar * const _115;
  uchar * const _116;
  uchar * const _117;
  uchar * const _118;
  uchar * const _119;
  const struct Mat * const _120;
  const struct MatOp * _124;
  uchar * const _131;
  uchar * const _132;
  uchar * const _133;
  uchar * const _134;
  uchar * const _135;
  uchar * const _136;
  uchar * const _137;
  const struct Mat * const _138;
  uchar * const _143;
  uchar * const _145;
  uchar * const _146;
  uchar * const _147;
  uchar * const _148;
  uchar * const _149;
  uchar * const _150;
  uchar * const _151;
  const struct Mat * const _152;
  struct __ostream_type & _156;
  long int _159;
  long int _167;
  double _169;
  double _171;
  double _172;
  double _173;
  float & _174;
  sizetype _175;
  int (*__vtbl_ptr_type) () * _178;
  long unsigned int _179;
  int _184;
  int _185;
  int _186;
  long unsigned int _187;
  long unsigned int _188;
  unsigned int _192;
  int _198;
  long unsigned int _199;
  long unsigned int _200;
  float * _201;
  float * pretmp_203;
  float _204;
  long int _211;
  long int _215;
  double _217;
  double _219;
  double _220;
  double _221;
  unsigned int _223;
  float _224;
  unsigned int _225;
  int (*__vtbl_ptr_type) () * _226;
  bool _227;
  const int _229;
  int _230;
  int _231;
  int _234;
  long unsigned int _235;
  long unsigned int _236;
  long unsigned int _237;
  int _238;
  int _239;
  long unsigned int _240;
  long unsigned int _241;
  float * _242;
  float _243;
  unsigned int ivtmp_244;
  long int _250;
  long int _254;
  double _256;
  double _258;
  double _259;
  double _260;
  sizetype _261;
  unsigned int _262;
  unsigned int ivtmp_263;
  int (*__vtbl_ptr_type) () * _265;
  const int _268;
  long unsigned int _271;
  sizetype _272;
  int _276;
  int _277;
  long unsigned int _278;
  long unsigned int _279;
  float * _280;
  float _281;
  unsigned int ivtmp_282;
  const int _285;
  unsigned long _286;
  const int _288;
  struct _Rep * _294;
  char * _296;
  struct _Rep * _300;
  char * _302;
  struct _Rep * _306;
  char * _308;
  struct _Rep * _312;
  char * _314;
  signed char _318;
  struct _Rep * _323;
  char * _325;
  size_t * _328;
  struct _Rep * _334;
  char * _336;
  size_t * _339;
  struct _Rep * _345;
  char * _347;
  size_t * _350;
  struct _Rep * _363;
  char * _365;
  size_t * _368;
  struct _Rep * _380;
  char * _382;
  struct _Rep * _387;
  char * _389;
  struct _Rep * _394;
  char * _396;
  float * harris.23_402;
  unsigned int _404;
  struct _Rep * _441;
  char * _443;
  struct _Rep * _445;
  char * _447;
  struct _Rep * _449;
  char * _451;
  struct _Rep * _453;
  char * _455;
  char * _466;
  struct _Rep * _516;
  char * _519;
  struct _Rep * _525;
  unsigned int ivtmp_526;
  unsigned int ivtmp_527;
  long unsigned int _528;
  int _529;
  int (*__vtbl_ptr_type) () * _530;
  int (*__vtbl_ptr_type) () _531;
  int (*__vtbl_ptr_type) () * _532;
  int (*__vtbl_ptr_type) () _533;
  long unsigned int _535;
  long unsigned int _536;
  long unsigned int _537;
  long unsigned int _538;
  sizetype _539;
  float & _540;
  struct __ostream_type & _541;
  int _542;
  long unsigned int _543;
  long unsigned int _544;
  float * _545;
  long unsigned int _546;
  long unsigned int _547;
  sizetype _548;
  float & _549;
  struct __ostream_type & _550;
  int _551;
  float & _552;
  float _553;
  long unsigned int _555;
  long unsigned int _556;
  sizetype _557;
  float & _558;
  int _559;
  float _560;
  int _561;
  char * _562;
  struct _Rep * _563;
  float * pretmp_564;
  unsigned int ivtmp_565;
  float * prephitmp_567;
  bool _568;
  float * pretmp_571;
  unsigned int _574;
  int _579;
  long unsigned int pretmp_581;
  float & _583;
  float _584;
  long unsigned int _585;
  unsigned int _586;
  long unsigned int _588;
  float * pretmp_589;
  unsigned long _591;
  unsigned long _592;
  float * _593;
  unsigned long _595;
  uchar * pretmp_597;
  size_t * pretmp_598;
  long unsigned int _599;
  unsigned long _600;
  unsigned int _601;
  long unsigned int _603;
  bool _605;
  float & _606;
  sizetype _607;
  float * _609;
  sizetype _610;
  int _611;
  unsigned int _678;
  int pretmp_679;
  int pretmp_680;
  const struct __ctype_type * _798;
  const struct __ctype_type * _800;
  const struct __ctype_type * _802;
  long unsigned int _803;
  uchar * pretmp_808;
  size_t * pretmp_810;
  sizetype _815;
  sizetype _818;
  sizetype _820;
  float _828;
  float * _835;
  size_t pretmp_838;
  unsigned int ivtmp_839;
  long unsigned int pretmp_840;
  long unsigned int pretmp_842;
  float * pretmp_848;
  unsigned int ivtmp_849;
  int pretmp_850;
  int pretmp_852;
  float _854;
  float * _855;
  long unsigned int _858;
  long unsigned int _859;
  uchar * pretmp_860;
  int _864;
  float * prephitmp_865;
  long unsigned int _868;
  int _869;
  float & _870;
  sizetype _872;
  int _874;
  long unsigned int _875;
  long unsigned int _878;
  bool _882;
  bool _885;
  bool _888;
  float * _889;
  sizetype _890;
  sizetype _892;
  sizetype _895;
  float & _898;
  sizetype _899;
  bool _900;
  float & _902;
  float * _905;
  sizetype _908;
  sizetype _909;
  sizetype _910;
  int * _990;
  int _991;
  int _992;
  int _993;
  int _994;
  int _995;
  size_t * _996;
  size_t * const _997;
  long unsigned int _998;
  long unsigned int _999;
  uchar * _1000;
  uchar * _1001;
  uchar * _1002;
  uchar * _1003;
  int * _1004;
  struct MatAllocator * _1005;
  unsigned int _1006;
  bool _1007;
  int * _1008;
  const struct Mat * _1016;
  long unsigned int _1017;
  uchar * _1018;
  uchar * _1019;
  uchar * _1020;
  unsigned int ivtmp_1021;
  float & _1024;
  long int _1032;
  sizetype _1033;
  struct basic_ios * _1034;
  unsigned long _1035;
  int _1036;
  struct basic_ostream & _1037;
  unsigned int _1038;
  char _1039;
  sizetype _1040;
  sizetype _1041;
  char_type _1042;
  sizetype _1043;
  char_type _1045;
  sizetype _1046;
  int (*__vtbl_ptr_type) () * _1047;
  int (*__vtbl_ptr_type) () _1048;
  float & _1050;
  unsigned int ivtmp_1051;
  void * PROF_1052;
  char_type _1054;
  unsigned int _1055;
  sizetype _1061;
  float * _1064;
  long int _1069;
  sizetype _1070;
  struct basic_ios * _1071;
  sizetype _1072;
  int _1073;
  struct basic_ostream & _1074;
  char _1076;
  long unsigned int _1077;
  float * _1078;
  char_type _1079;
  int _1080;
  sizetype _1081;
  char_type _1082;
  long unsigned int _1083;
  int (*__vtbl_ptr_type) () * _1084;
  int (*__vtbl_ptr_type) () _1085;
  long unsigned int _1087;
  int _1088;
  void * PROF_1089;
  int _1090;
  char_type _1091;
  sizetype _1092;
  sizetype _1093;
  unsigned int _1103;
  unsigned int ivtmp_1105;
  long int _1106;
  sizetype _1107;
  struct basic_ios * _1108;
  int _1110;
  struct basic_ostream & _1111;
  char _1113;
  char_type _1116;
  char_type _1119;
  int (*__vtbl_ptr_type) () * _1121;
  int (*__vtbl_ptr_type) () _1122;
  bool _1124;
  void * PROF_1126;
  char_type _1128;
  unsigned int ivtmp_1129;
  _Atomic_word * _1131;
  unsigned int _1132;
  _Atomic_word _1133;
  int _1135;
  _Atomic_word _1136;
  float * _1139;
  long unsigned int _1140;
  int * _1142;
  unsigned int _1143;
  sizetype _1144;
  int * _1145;
  size_t * _1146;
  long unsigned int _1147;
  int * _1148;
  unsigned int _1149;
  sizetype _1150;
  int * _1151;
  size_t * _1152;
  long unsigned int pretmp_1153;
  int * _1154;
  unsigned int _1155;
  sizetype _1156;
  int * _1157;
  _Atomic_word * _1158;
  unsigned int _1159;
  _Atomic_word _1160;
  int _1162;
  _Atomic_word _1163;
  long unsigned int _1164;
  int _1165;
  long unsigned int _1166;
  int _1167;
  float * _1168;
  int * _1169;
  unsigned int _1170;
  bool _1171;
  int * _1172;
  size_t * _1173;
  long unsigned int _1174;
  int * _1175;
  unsigned int _1176;
  unsigned int _1177;
  int * _1178;
  size_t * _1179;
  long unsigned int _1180;
  int * _1181;
  unsigned int _1182;
  unsigned int _1183;
  int * _1184;
  _Atomic_word * _1185;
  unsigned int _1186;
  _Atomic_word _1187;
  int _1189;
  _Atomic_word _1190;
  sizetype _1192;
  int _1193;
  float & _1194;
  int _1195;
  int * _1196;
  unsigned int _1197;
  unsigned int ivtmp_1198;
  int * _1199;
  size_t * _1200;
  int * _1202;
  unsigned int _1203;
  int * _1205;
  size_t * _1206;
  int pretmp_1207;
  int * _1208;
  unsigned int _1209;
  int * _1211;
  _Atomic_word * _1212;
  unsigned int _1213;
  _Atomic_word _1214;
  int _1216;
  _Atomic_word _1217;
  sizetype _1220;
  long unsigned int _1221;
  unsigned int _1222;
  int * _1223;
  unsigned int _1224;
  int * _1226;
  size_t * _1227;
  int * _1229;
  unsigned int _1230;
  sizetype _1231;
  int * _1232;
  size_t * _1233;
  float * _1234;
  int * _1235;
  unsigned int _1236;
  sizetype _1237;
  int * _1238;
  float _1242;
  sizetype _1245;
  long unsigned int _1248;
  long unsigned int _1254;
  sizetype _1255;
  long unsigned int _1257;
  sizetype _1258;
  int _1260;
  sizetype _1264;
  sizetype _1267;
  sizetype _1394;
  int _1401;
  unsigned int _1402;
  unsigned long _1403;
  unsigned int _1409;
  unsigned long _1413;
  float & _1416;
  sizetype _1417;
  long unsigned int _1421;
  unsigned int ivtmp_1433;
  size_t * pretmp_1470;
  float * pretmp_1538;
  int _1572;

  <bb 2>:
  MEM[(streamsize *)&cout + 16B] = 6;
  MEM[(struct MSize *)&img + 64B].p = &img.rows;
  MEM[(struct MStep *)&img + 72B].p = &MEM[(struct MStep *)&img + 72B].buf;
  MEM[(size_t *)&img + 88B] = 0;
  MEM[(size_t *)&img + 80B] = 0;
  img.flags = 1124007936;
  img.cols = 0;
  img.rows = 0;
  img.dims = 0;
  img.datalimit = 0B;
  img.dataend = 0B;
  img.datastart = 0B;
  img.data = 0B;
  img.refcount = 0B;
  img.allocator = 0B;
  MEM[(struct MSize *)&imgGray + 64B].p = &imgGray.rows;
  MEM[(struct MStep *)&imgGray + 72B].p = &MEM[(struct MStep *)&imgGray + 72B].buf;
  MEM[(size_t *)&imgGray + 88B] = 0;
  MEM[(size_t *)&imgGray + 80B] = 0;
  imgGray.flags = 1124007936;
  imgGray.cols = 0;
  imgGray.rows = 0;
  imgGray.dims = 0;
  imgGray.datalimit = 0B;
  imgGray.dataend = 0B;
  imgGray.datastart = 0B;
  imgGray.data = 0B;
  imgGray.refcount = 0B;
  imgGray.allocator = 0B;
  MEM[(struct MSize *)&imgGrayf + 64B].p = &imgGrayf.rows;
  MEM[(struct MStep *)&imgGrayf + 72B].p = &MEM[(struct MStep *)&imgGrayf + 72B].buf;
  MEM[(size_t *)&imgGrayf + 88B] = 0;
  MEM[(size_t *)&imgGrayf + 80B] = 0;
  imgGrayf.flags = 1124007936;
  imgGrayf.cols = 0;
  imgGrayf.rows = 0;
  imgGrayf.dims = 0;
  imgGrayf.datalimit = 0B;
  imgGrayf.dataend = 0B;
  imgGrayf.datastart = 0B;
  imgGrayf.data = 0B;
  imgGrayf.refcount = 0B;
  imgGrayf.allocator = 0B;
  if (argc_58(D) == 2)
    goto <bb 3>;
  else
    goto <bb 19>;

  <bb 3>:
  _60 = MEM[(char * *)argv_59(D) + 8B];
  std::basic_string<char>::basic_string (&D.74502, _60, &D.74501);

  <bb 4>:
  D.74503 = cv::imread (&D.74502, 1); [return slot optimization]

  <bb 5>:
  _990 = D.74503.refcount;
  if (_990 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __sync_fetch_and_add_4 (_990, 1);

  <bb 7>:
  _63 = img.refcount;
  if (_63 != 0B)
    goto <bb 8>;
  else
    goto <bb 721>;

  <bb 8>:
  _1006 = __sync_fetch_and_add_4 (_63, 4294967295);
  if (_1006 == 1)
    goto <bb 719>;
  else
    goto <bb 721>;

  <bb 9>:
  img.datalimit = 0B;
  img.dataend = 0B;
  img.datastart = 0B;
  img.data = 0B;
  _1008 = img.size.p;
  *_1008 = 0;
  img.refcount = 0B;
  _991 = D.74503.flags;
  img.flags = _991;
  _992 = img.dims;
  if (_992 <= 2)
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 10>:
  _993 = D.74503.dims;
  if (_993 <= 2)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  img.dims = _993;
  _994 = D.74503.rows;
  img.rows = _994;
  _995 = D.74503.cols;
  img.cols = _995;
  _996 = MEM[(size_t * *)&img + 72B];
  _997 = MEM[(size_t * *)&D.74503 + 72B];
  _998 = MEM[(const size_t &)_997];
  *_996 = _998;
  _999 = MEM[(const size_t &)_997 + 8];
  MEM[(size_t &)_996 + 8] = _999;
  goto <bb 13>;

  <bb 12>:
  cv::Mat::copySize (&img, &D.74503);

  <bb 13>:
  _1000 = D.74503.data;
  img.data = _1000;
  _1001 = D.74503.datastart;
  img.datastart = _1001;
  _1002 = D.74503.dataend;
  img.dataend = _1002;
  _1003 = D.74503.datalimit;
  img.datalimit = _1003;
  _1004 = D.74503.refcount;
  img.refcount = _1004;
  _1005 = D.74503.allocator;
  img.allocator = _1005;
  cv::Mat::~Mat (&D.74503);
  goto <bb 15>;

<L171>:
  goto <bb 549> (<L71>);

  <bb 15>:
  D.74503 ={v} {CLOBBER};
  _57 = D.74502._M_dataplus._M_p;
  _525 = _57 + 18446744073709551592;
  if (_525 != &_S_empty_rep_storage)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_525, &D.82667);

  <bb 17>:
  D.82667 ={v} {CLOBBER};
  D.82667 ={v} {CLOBBER};
  D.74502 ={v} {CLOBBER};
  D.74502 ={v} {CLOBBER};
  D.74501 ={v} {CLOBBER};
  D.74501 ={v} {CLOBBER};
  cv::_OutputArray::_OutputArray (&D.74505, &imgGray);
  goto <bb 22>;

<L172>:
  goto <bb 712> (<L151>);

  <bb 19>:
  _519 = *argv_59(D);
  printf ("Usage: %s image\n", _519);
  goto <bb 21>;

<L173>:
  goto <bb 712> (<L151>);

  <bb 21>:
  exit (1);

  <bb 22>:
  cv::_InputArray::_InputArray (&D.74504, &img);
  goto <bb 24>;

<L174>:
  goto <bb 712> (<L151>);

  <bb 24>:
  cv::cvtColor (&D.74504, &D.74505, 6, 0);
  goto <bb 26>;

<L175>:
  goto <bb 712> (<L151>);

  <bb 26>:
  D.74504 ={v} {CLOBBER};
  D.74505 ={v} {CLOBBER};
  cv::_OutputArray::_OutputArray (&D.74506, &imgGrayf);
  goto <bb 28>;

<L176>:
  goto <bb 712> (<L151>);

  <bb 28>:
  cv::Mat::convertTo (&imgGray, &D.74506, 5, 3.92156862745098033773416545955114997923374176025390625e-3, 0.0);
  goto <bb 30>;

<L177>:
  goto <bb 712> (<L151>);

  <bb 30>:
  D.74506 ={v} {CLOBBER};
  _68 = MEM[(const struct MSize *)&img + 64B].p;
  _66 = *_68;
  _529 = MEM[(int *)_68 + 4B];
  roi.x = 0;
  roi.y = 0;
  roi.width = _529;
  roi.height = _66;
  cv::Mat::Mat (&D.74513, &imgGrayf, &roi);
  goto <bb 32>;

<L178>:
  goto <bb 712> (<L151>);

  <bb 32>:
  MEM[(struct MSize *)&img_region + 64B].p = &img_region.rows;
  MEM[(struct MStep *)&img_region + 72B].p = &MEM[(struct MStep *)&img_region + 72B].buf;
  MEM[(size_t *)&img_region + 88B] = 0;
  MEM[(size_t *)&img_region + 80B] = 0;
  img_region.flags = 1124007936;
  img_region.cols = 0;
  img_region.rows = 0;
  img_region.dims = 0;
  img_region.datalimit = 0B;
  img_region.dataend = 0B;
  img_region.datastart = 0B;
  img_region.data = 0B;
  img_region.refcount = 0B;
  img_region.allocator = 0B;
  cv::_OutputArray::_OutputArray (&D.83099, &img_region);

  <bb 33>:
  cv::Mat::copyTo (&D.74513, &D.83099);
  goto <bb 35>;

<L180>:
  goto <bb 37> (<L155>);

  <bb 35>:
  D.83099 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.74513);
  goto <bb 38>;

<L179>:

<L155>:
  D.83099 ={v} {CLOBBER};
  cv::Mat::~Mat (&img_region);
  resx 178

  <bb 38>:
  D.74513 ={v} {CLOBBER};
  cv::Mat::Mat (&D.74516, &imgGrayf, &roi);

  <bb 39>:
  MEM[(struct MSize *)&img_region_harris + 64B].p = &img_region_harris.rows;
  MEM[(struct MStep *)&img_region_harris + 72B].p = &MEM[(struct MStep *)&img_region_harris + 72B].buf;
  MEM[(size_t *)&img_region_harris + 88B] = 0;
  MEM[(size_t *)&img_region_harris + 80B] = 0;
  img_region_harris.flags = 1124007936;
  img_region_harris.cols = 0;
  img_region_harris.rows = 0;
  img_region_harris.dims = 0;
  img_region_harris.datalimit = 0B;
  img_region_harris.dataend = 0B;
  img_region_harris.datastart = 0B;
  img_region_harris.data = 0B;
  img_region_harris.refcount = 0B;
  img_region_harris.allocator = 0B;
  cv::_OutputArray::_OutputArray (&D.83104, &img_region_harris);

  <bb 40>:
  cv::Mat::copyTo (&D.74516, &D.83104);
  goto <bb 42>;

<L183>:
  goto <bb 44> (<L156>);

  <bb 42>:
  D.83104 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.74516);
  goto <bb 45>;

<L182>:

<L156>:
  D.83104 ={v} {CLOBBER};
  cv::Mat::~Mat (&img_region_harris);
  resx 180

  <bb 45>:
  D.74516 ={v} {CLOBBER};
  cv::Mat::Mat (&D.74519, &img, &roi);

  <bb 46>:
  MEM[(struct MSize *)&img_show + 64B].p = &img_show.rows;
  MEM[(struct MStep *)&img_show + 72B].p = &MEM[(struct MStep *)&img_show + 72B].buf;
  MEM[(size_t *)&img_show + 88B] = 0;
  MEM[(size_t *)&img_show + 80B] = 0;
  img_show.flags = 1124007936;
  img_show.cols = 0;
  img_show.rows = 0;
  img_show.dims = 0;
  img_show.datalimit = 0B;
  img_show.dataend = 0B;
  img_show.datastart = 0B;
  img_show.data = 0B;
  img_show.refcount = 0B;
  img_show.allocator = 0B;
  cv::_OutputArray::_OutputArray (&D.83109, &img_show);

  <bb 47>:
  cv::Mat::copyTo (&D.74519, &D.83109);
  goto <bb 49>;

<L186>:
  goto <bb 51> (<L157>);

  <bb 49>:
  D.83109 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.74519);
  goto <bb 52>;

<L185>:

<L157>:
  D.83109 ={v} {CLOBBER};
  cv::Mat::~Mat (&img_show);
  resx 182

  <bb 52>:
  D.74519 ={v} {CLOBBER};
  cv::Mat::Mat (&D.74522, &img, &roi);

  <bb 53>:
  MEM[(struct MSize *)&img_show_harris + 64B].p = &img_show_harris.rows;
  MEM[(struct MStep *)&img_show_harris + 72B].p = &MEM[(struct MStep *)&img_show_harris + 72B].buf;
  MEM[(size_t *)&img_show_harris + 88B] = 0;
  MEM[(size_t *)&img_show_harris + 80B] = 0;
  img_show_harris.flags = 1124007936;
  img_show_harris.cols = 0;
  img_show_harris.rows = 0;
  img_show_harris.dims = 0;
  img_show_harris.datalimit = 0B;
  img_show_harris.dataend = 0B;
  img_show_harris.datastart = 0B;
  img_show_harris.data = 0B;
  img_show_harris.refcount = 0B;
  img_show_harris.allocator = 0B;
  cv::_OutputArray::_OutputArray (&D.83114, &img_show_harris);

  <bb 54>:
  cv::Mat::copyTo (&D.74522, &D.83114);
  goto <bb 56>;

<L189>:
  goto <bb 58> (<L158>);

  <bb 56>:
  D.83114 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.74522);
  goto <bb 59>;

<L188>:

<L158>:
  D.83114 ={v} {CLOBBER};
  cv::Mat::~Mat (&img_show_harris);
  resx 184

  <bb 59>:
  D.74522 ={v} {CLOBBER};
  cv::Mat::Mat (&D.74525, &img, &roi);

  <bb 60>:
  MEM[(struct MSize *)&img_show_pipe + 64B].p = &img_show_pipe.rows;
  MEM[(struct MStep *)&img_show_pipe + 72B].p = &MEM[(struct MStep *)&img_show_pipe + 72B].buf;
  MEM[(size_t *)&img_show_pipe + 88B] = 0;
  MEM[(size_t *)&img_show_pipe + 80B] = 0;
  img_show_pipe.flags = 1124007936;
  img_show_pipe.cols = 0;
  img_show_pipe.rows = 0;
  img_show_pipe.dims = 0;
  img_show_pipe.datalimit = 0B;
  img_show_pipe.dataend = 0B;
  img_show_pipe.datastart = 0B;
  img_show_pipe.data = 0B;
  img_show_pipe.refcount = 0B;
  img_show_pipe.allocator = 0B;
  cv::_OutputArray::_OutputArray (&D.83119, &img_show_pipe);

  <bb 61>:
  cv::Mat::copyTo (&D.74525, &D.83119);
  goto <bb 63>;

<L192>:
  goto <bb 65> (<L159>);

  <bb 63>:
  D.83119 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.74525);
  goto <bb 66>;

<L191>:

<L159>:
  D.83119 ={v} {CLOBBER};
  cv::Mat::~Mat (&img_show_pipe);
  resx 186

  <bb 66>:
  D.74525 ={v} {CLOBBER};
  MEM[(struct MSize *)&opencv_harris + 64B].p = &opencv_harris.rows;
  MEM[(struct MStep *)&opencv_harris + 72B].p = &MEM[(struct MStep *)&opencv_harris + 72B].buf;
  MEM[(size_t *)&opencv_harris + 88B] = 0;
  MEM[(size_t *)&opencv_harris + 80B] = 0;
  opencv_harris.flags = 1124007936;
  opencv_harris.cols = 0;
  opencv_harris.rows = 0;
  opencv_harris.dims = 0;
  opencv_harris.datalimit = 0B;
  opencv_harris.dataend = 0B;
  opencv_harris.datastart = 0B;
  opencv_harris.data = 0B;
  opencv_harris.refcount = 0B;
  opencv_harris.allocator = 0B;
  cv::Mat::Mat (&D.75833.D.74999, 3, 3, 5);

  <bb 67>:
  D.76068 = cv::operator<< <float, float> (&D.75833, -1.0e+0); [return slot optimization]

  <bb 68>:
  _93 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_93] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&D.76068].D.76059.D.75966);
  goto <bb 70>;

<L195>:
  goto <bb 578> (<L89>);

  <bb 70>:
  _95 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_95] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 72>;

<L196>:
  goto <bb 578> (<L89>);

  <bb 72>:
  _96 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_96] = -2.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 74>;

<L197>:
  goto <bb 578> (<L89>);

  <bb 74>:
  _97 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_97] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 76>;

<L198>:
  goto <bb 578> (<L89>);

  <bb 76>:
  _98 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_98] = 2.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 78>;

<L199>:
  goto <bb 578> (<L89>);

  <bb 78>:
  _99 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_99] = -1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 80>;

<L200>:
  goto <bb 578> (<L89>);

  <bb 80>:
  _100 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_100] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 82>;

<L201>:
  goto <bb 578> (<L89>);

  <bb 82>:
  _101 = MEM[(uchar * *)&D.76068 + 16B];
  MEM[(float &)_101] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76068]);
  goto <bb 84>;

<L202>:
  goto <bb 578> (<L89>);

  <bb 84>:
  _102 = MEM[(const struct Mat * *)&D.76068];
  cv::Mat_<float>::Mat_ (&D.76075, _102);
  goto <bb 86>;

<L203>:
  goto <bb 578> (<L89>);

  <bb 86>:
  cv::Mat::Mat (&gradXKern, &D.76075.D.74999);

  <bb 87>:
  cv::Mat::~Mat (&D.76075.D.74999);

  <bb 88>:
  D.76075 ={v} {CLOBBER};
  D.76075 ={v} {CLOBBER};
  D.76068 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.75833.D.74999);

  <bb 89>:
  D.75833 ={v} {CLOBBER};
  D.75833 ={v} {CLOBBER};
  D.76077 = cv::operator* (8.3333335816860198974609375e-2, &gradXKern); [return slot optimization]

  <bb 90>:
  _106 = D.76077.op;
  _530 = _106->_vptr.MatOp;
  _531 = MEM[(int (*__vtbl_ptr_type) () *)_530 + 24B];
  OBJ_TYPE_REF(_531;(const struct MatOp)_106->3) (_106, &D.76077, &gradXKern, -1);

  <bb 91>:
  cv::MatExpr::~MatExpr (&D.76077);
  goto <bb 93>;

<L205>:
  goto <bb 691> (<L144>);

  <bb 93>:
  D.76077 ={v} {CLOBBER};
  cv::Mat::Mat (&D.76095.D.74999, 3, 3, 5);
  goto <bb 95>;

<L206>:
  goto <bb 691> (<L144>);

  <bb 95>:
  D.76096 = cv::operator<< <float, float> (&D.76095, -1.0e+0); [return slot optimization]

  <bb 96>:
  _111 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_111] = -2.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&D.76096].D.76059.D.75966);
  goto <bb 98>;

<L208>:
  goto <bb 589> (<L95>);

  <bb 98>:
  _113 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_113] = -1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 100>;

<L209>:
  goto <bb 589> (<L95>);

  <bb 100>:
  _114 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_114] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 102>;

<L210>:
  goto <bb 589> (<L95>);

  <bb 102>:
  _115 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_115] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 104>;

<L211>:
  goto <bb 589> (<L95>);

  <bb 104>:
  _116 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_116] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 106>;

<L212>:
  goto <bb 589> (<L95>);

  <bb 106>:
  _117 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_117] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 108>;

<L213>:
  goto <bb 589> (<L95>);

  <bb 108>:
  _118 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_118] = 2.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 110>;

<L214>:
  goto <bb 589> (<L95>);

  <bb 110>:
  _119 = MEM[(uchar * *)&D.76096 + 16B];
  MEM[(float &)_119] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76096]);
  goto <bb 112>;

<L215>:
  goto <bb 589> (<L95>);

  <bb 112>:
  _120 = MEM[(const struct Mat * *)&D.76096];
  cv::Mat_<float>::Mat_ (&D.76097, _120);
  goto <bb 114>;

<L216>:
  goto <bb 589> (<L95>);

  <bb 114>:
  cv::Mat::Mat (&gradYKern, &D.76097.D.74999);

  <bb 115>:
  cv::Mat::~Mat (&D.76097.D.74999);

  <bb 116>:
  D.76097 ={v} {CLOBBER};
  D.76097 ={v} {CLOBBER};
  D.76096 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76095.D.74999);

  <bb 117>:
  D.76095 ={v} {CLOBBER};
  D.76095 ={v} {CLOBBER};
  D.76099 = cv::operator* (8.3333335816860198974609375e-2, &gradYKern); [return slot optimization]

  <bb 118>:
  _124 = D.76099.op;
  _532 = _124->_vptr.MatOp;
  _533 = MEM[(int (*__vtbl_ptr_type) () *)_532 + 24B];
  OBJ_TYPE_REF(_533;(const struct MatOp)_124->3) (_124, &D.76099, &gradYKern, -1);

  <bb 119>:
  cv::MatExpr::~MatExpr (&D.76099);
  goto <bb 121>;

<L218>:
  goto <bb 688> (<L143>);

  <bb 121>:
  D.76099 ={v} {CLOBBER};
  cv::Mat::Mat (&D.76101.D.74999, 3, 3, 5);
  goto <bb 123>;

<L219>:
  goto <bb 688> (<L143>);

  <bb 123>:
  cv::MatConstIterator::MatConstIterator (&MEM[(struct MatConstIterator_ *)&commaInitializer].D.75966, &D.76101);

  <bb 124>:
  _90 = MEM[(uchar * *)&commaInitializer + 16B];
  MEM[(float &)_90] = 0.0;
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&commaInitializer].D.76059.D.75966);
  goto <bb 126>;

<L221>:
  goto <bb 600> (<L101>);

  <bb 126>:
  _1016 = MEM[(const struct MatConstIterator &)&commaInitializer].m;
  MEM[(struct MatConstIterator *)&D.76105].m = _1016;
  _1017 = MEM[(const struct MatConstIterator &)&commaInitializer].elemSize;
  MEM[(struct MatConstIterator *)&D.76105].elemSize = _1017;
  _1018 = MEM[(const struct MatConstIterator &)&commaInitializer].ptr;
  MEM[(struct MatConstIterator *)&D.76105].ptr = _1018;
  _1019 = MEM[(const struct MatConstIterator &)&commaInitializer].sliceStart;
  MEM[(struct MatConstIterator *)&D.76105].sliceStart = _1019;
  _1020 = MEM[(const struct MatConstIterator &)&commaInitializer].sliceEnd;
  MEM[(struct MatConstIterator *)&D.76105].sliceEnd = _1020;
  commaInitializer ={v} {CLOBBER};
  MEM[(float &)_1018] = 1.25e-1;
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&D.76105].D.76059.D.75966);
  goto <bb 128>;

<L222>:
  goto <bb 600> (<L101>);

  <bb 128>:
  _131 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_131] = 6.25e-2;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 130>;

<L223>:
  goto <bb 600> (<L101>);

  <bb 130>:
  _132 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_132] = 1.25e-1;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 132>;

<L224>:
  goto <bb 600> (<L101>);

  <bb 132>:
  _133 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_133] = 2.5e-1;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 134>;

<L225>:
  goto <bb 600> (<L101>);

  <bb 134>:
  _134 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_134] = 1.25e-1;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 136>;

<L226>:
  goto <bb 600> (<L101>);

  <bb 136>:
  _135 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_135] = 6.25e-2;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 138>;

<L227>:
  goto <bb 600> (<L101>);

  <bb 138>:
  _136 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_136] = 1.25e-1;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 140>;

<L228>:
  goto <bb 600> (<L101>);

  <bb 140>:
  _137 = MEM[(uchar * *)&D.76105 + 16B];
  MEM[(float &)_137] = 6.25e-2;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76105]);
  goto <bb 142>;

<L229>:
  goto <bb 600> (<L101>);

  <bb 142>:
  _138 = MEM[(const struct Mat * *)&D.76105];
  cv::Mat_<float>::Mat_ (&D.76109, _138);
  goto <bb 144>;

<L230>:
  goto <bb 600> (<L101>);

  <bb 144>:
  cv::Mat::Mat (&gaussKern, &D.76109.D.74999);

  <bb 145>:
  cv::Mat::~Mat (&D.76109.D.74999);

  <bb 146>:
  D.76109 ={v} {CLOBBER};
  D.76109 ={v} {CLOBBER};
  D.76105 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76101.D.74999);

  <bb 147>:
  D.76101 ={v} {CLOBBER};
  D.76101 ={v} {CLOBBER};
  cv::Mat::Mat (&D.76112.D.74999, 3, 3, 5);

  <bb 148>:
  D.76113 = cv::operator<< <float, float> (&D.76112, 1.0e+0); [return slot optimization]

  <bb 149>:
  _143 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_143] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(struct MatIterator_ *)&D.76113].D.76059.D.75966);
  goto <bb 151>;

<L233>:
  goto <bb 609> (<L106>);

  <bb 151>:
  _145 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_145] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 153>;

<L234>:
  goto <bb 609> (<L106>);

  <bb 153>:
  _146 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_146] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 155>;

<L235>:
  goto <bb 609> (<L106>);

  <bb 155>:
  _147 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_147] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 157>;

<L236>:
  goto <bb 609> (<L106>);

  <bb 157>:
  _148 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_148] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 159>;

<L237>:
  goto <bb 609> (<L106>);

  <bb 159>:
  _149 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_149] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 161>;

<L238>:
  goto <bb 609> (<L106>);

  <bb 161>:
  _150 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_150] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 163>;

<L239>:
  goto <bb 609> (<L106>);

  <bb 163>:
  _151 = MEM[(uchar * *)&D.76113 + 16B];
  MEM[(float &)_151] = 1.0e+0;
  cv::MatConstIterator::operator++ (&MEM[(void *)&D.76113]);
  goto <bb 165>;

<L240>:
  goto <bb 609> (<L106>);

  <bb 165>:
  _152 = MEM[(const struct Mat * *)&D.76113];
  cv::Mat_<float>::Mat_ (&D.76114, _152);
  goto <bb 167>;

<L241>:
  goto <bb 609> (<L106>);

  <bb 167>:
  cv::Mat::Mat (&sumKern, &D.76114.D.74999);

  <bb 168>:
  cv::Mat::~Mat (&D.76114.D.74999);

  <bb 169>:
  D.76114 ={v} {CLOBBER};
  D.76114 ={v} {CLOBBER};
  D.76113 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76112.D.74999);

  <bb 170>:
  D.76112 ={v} {CLOBBER};
  D.76112 ={v} {CLOBBER};

  <bb 171>:
  # i_1218 = PHI <i_180(205), 0(170)>
  # ivtmp_565 = PHI <ivtmp_1129(205), 2(170)>
  _159 = cv::getTickCount ();

  <bb 172>:
  t_start_160 = (double) _159;
  cv::_OutputArray::_OutputArray (&D.76118, &opencv_harris);
  goto <bb 174>;

<L243>:
  goto <bb 682> (<L141>);

  <bb 174>:
  cv::_InputArray::_InputArray (&D.76117, &img_region);
  goto <bb 176>;

<L244>:
  goto <bb 682> (<L141>);

  <bb 176>:
  cv::cornerHarris (&D.76117, &D.76118, 3, 3, 4.0000000000000000832667268468867405317723751068115234375e-2, 4);
  goto <bb 178>;

<L245>:
  goto <bb 682> (<L141>);

  <bb 178>:
  D.76117 ={v} {CLOBBER};
  D.76118 ={v} {CLOBBER};
  _167 = cv::getTickCount ();
  goto <bb 180>;

<L246>:
  goto <bb 682> (<L141>);

  <bb 180>:
  t_end_168 = (double) _167;
  _169 = t_end_168 - t_start_160;
  _171 = cv::getTickFrequency ();
  goto <bb 182>;

<L247>:
  goto <bb 682> (<L141>);

  <bb 182>:
  _172 = _169 / _171;
  _173 = _172 * 1.0e+3;
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "OpenCV", 6);
  goto <bb 184>;

<L248>:
  goto <bb 682> (<L141>);

  <bb 184>:
  std::__ostream_insert<char, std::char_traits<char> > (&cout, " time = ", 8);
  goto <bb 186>;

<L249>:
  goto <bb 682> (<L141>);

  <bb 186>:
  _156 = std::basic_ostream<char>::_M_insert<double> (&cout, _173);
  goto <bb 188>;

<L250>:
  goto <bb 682> (<L141>);

  <bb 188>:
  std::__ostream_insert<char, std::char_traits<char> > (_156, " ms", 3);
  goto <bb 190>;

<L251>:
  goto <bb 682> (<L141>);

  <bb 190>:
  _178 = MEM[(struct basic_ostream *)_156]._vptr.basic_ostream;
  _1032 = MEM[(long int *)_178 + -24B];
  _1033 = (sizetype) _1032;
  _1034 = _156 + _1033;
  _798 = MEM[(const struct basic_ios *)_1034]._M_ctype;
  if (_798 == 0B)
    goto <bb 191>;
  else
    goto <bb 193>;

  <bb 191>:
  std::__throw_bad_cast ();

<L252>:
  goto <bb 682> (<L141>);

  <bb 193>:
  _1039 = MEM[(const struct ctype *)_798]._M_widen_ok;
  if (_1039 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  _1042 = MEM[(const struct ctype *)_798]._M_widen[10];
  goto <bb 200>;

  <bb 195>:
  std::ctype<char>::_M_widen_init (_798);
  goto <bb 197>;

<L253>:
  goto <bb 682> (<L141>);

  <bb 197>:
  _1047 = MEM[(const struct ctype *)_798].D.18134._vptr.facet;
  _1048 = MEM[(int (*__vtbl_ptr_type) () *)_1047 + 48B];
  PROF_1052 = [obj_type_ref] OBJ_TYPE_REF(_1048;(const struct ctype)_798->6);
  if (PROF_1052 == do_widen)
    goto <bb 200>;
  else
    goto <bb 198>;

  <bb 198>:
  _1054 = OBJ_TYPE_REF(_1048;(const struct ctype)_798->6) (_798, 10);
  goto <bb 200>;

<L254>:
  goto <bb 682> (<L141>);

  <bb 200>:
  # _1045 = PHI <_1042(194), 10(197), _1054(198)>
  _1036 = (int) _1045;
  _1037 = std::basic_ostream<char>::put (_156, _1036);
  goto <bb 202>;

<L255>:
  goto <bb 682> (<L141>);

  <bb 202>:
  std::basic_ostream<char>::flush (_1037);
  goto <bb 204>;

<L256>:
  goto <bb 682> (<L141>);

  <bb 204>:
  i_180 = i_1218 + 1;
  ivtmp_1129 = ivtmp_565 - 1;
  if (ivtmp_1129 != 0)
    goto <bb 205>;
  else
    goto <bb 206>;

  <bb 205>:
  goto <bb 171>;

  <bb 206>:
  harris = 0B;
  _184 = _66 + 2;
  _185 = _529 + 2;
  _186 = _184 * _185;
  _187 = (long unsigned int) _186;
  _188 = _187 * 4;
  img_ref_190 = malloc (_188);
  _579 = _66 + 1;
  if (_579 >= 0)
    goto <bb 207>;
  else
    goto <bb 761>;

  <bb 207>:
  pretmp_24 = _529 + 1;
  pretmp_597 = MEM[(uchar * *)&img_region + 16B];
  pretmp_598 = MEM[(size_t * *)&img_region + 72B];
  goto <bb 217>;

  <bb 208>:

  <bb 209>:
  # j_578 = PHI <0(220), j_206(208)>
  ii_193 = i_582 + -1;
  if (j_578 > 1)
    goto <bb 210>;
  else
    goto <bb 213>;

  <bb 210>:
  if (_529 >= j_578)
    goto <bb 211>;
  else
    goto <bb 212>;

  <bb 211>:
  jj_195 = j_578 + -1;
  goto <bb 213>;

  <bb 212>:
  jj_196 = _529 + -1;

  <bb 213>:
  # jj_12 = PHI <jj_196(212), 0(209), jj_195(211)>
  _198 = j_578 + pretmp_1207;
  _199 = (long unsigned int) _198;
  _200 = _199 * 4;
  _201 = img_ref_190 + _200;
  _535 = (long unsigned int) ii_193;
  _536 = pretmp_6 * _535;
  _537 = (long unsigned int) jj_12;
  _538 = _537 * 4;
  _539 = _538 + _536;
  _540 = pretmp_597 + _539;
  _204 = *_540;
  *_201 = _204;
  j_206 = j_578 + 1;
  if (pretmp_24 >= j_206)
    goto <bb 208>;
  else
    goto <bb 214>;

  <bb 214>:

  <bb 215>:
  i_207 = i_582 + 1;
  if (i_207 <= _579)
    goto <bb 216>;
  else
    goto <bb 760>;

  <bb 216>:

  <bb 217>:
  # i_582 = PHI <0(207), i_207(216)>
  if (pretmp_24 >= 0)
    goto <bb 218>;
  else
    goto <bb 215>;

  <bb 218>:
  pretmp_1207 = _185 * i_582;
  pretmp_6 = *pretmp_598;
  if (i_582 > 1)
    goto <bb 219>;
  else
    goto <bb 229>;

  <bb 219>:
  if (_66 >= i_582)
    goto <bb 220>;
  else
    goto <bb 221>;

  <bb 220>:
  goto <bb 209>;

  <bb 221>:

  <bb 222>:
  # j_274 = PHI <0(221), j_1026(228)>
  ii_1272 = _66 + -1;
  if (j_274 > 1)
    goto <bb 223>;
  else
    goto <bb 226>;

  <bb 223>:
  if (_529 >= j_274)
    goto <bb 225>;
  else
    goto <bb 224>;

  <bb 224>:
  jj_613 = _529 + -1;
  goto <bb 226>;

  <bb 225>:
  jj_1266 = j_274 + -1;

  <bb 226>:
  # jj_594 = PHI <0(222), jj_613(224), jj_1266(225)>
  _1260 = j_274 + pretmp_1207;
  _588 = (long unsigned int) _1260;
  _1257 = _588 * 4;
  _1168 = img_ref_190 + _1257;
  _1254 = (long unsigned int) ii_1272;
  _585 = pretmp_6 * _1254;
  _1248 = (long unsigned int) jj_594;
  _1147 = _1248 * 4;
  _1245 = _1147 + _585;
  _583 = pretmp_597 + _1245;
  _1242 = *_583;
  *_1168 = _1242;
  j_1026 = j_274 + 1;
  if (pretmp_24 >= j_1026)
    goto <bb 228>;
  else
    goto <bb 227>;

  <bb 227>:
  goto <bb 215>;

  <bb 228>:
  goto <bb 222>;

  <bb 229>:

  <bb 230>:
  # j_1141 = PHI <0(229), j_273(236)>
  if (j_1141 > 1)
    goto <bb 231>;
  else
    goto <bb 234>;

  <bb 231>:
  if (_529 >= j_1141)
    goto <bb 233>;
  else
    goto <bb 232>;

  <bb 232>:
  jj_534 = _529 + -1;
  goto <bb 234>;

  <bb 233>:
  jj_247 = j_1141 + -1;

  <bb 234>:
  # jj_233 = PHI <0(230), jj_534(232), jj_247(233)>
  _234 = j_1141 + pretmp_1207;
  _543 = (long unsigned int) _234;
  _544 = _543 * 4;
  _545 = img_ref_190 + _544;
  _235 = 0;
  _236 = 0;
  _237 = (long unsigned int) jj_233;
  _271 = _237 * 4;
  _272 = _271 + _236;
  _552 = pretmp_597 + _272;
  _553 = *_552;
  *_545 = _553;
  j_273 = j_1141 + 1;
  if (pretmp_24 >= j_273)
    goto <bb 236>;
  else
    goto <bb 235>;

  <bb 235>:
  goto <bb 215>;

  <bb 236>:
  goto <bb 230>;

  <bb 237>:
  pretmp_1538 = harris;

  <bb 238>:
  # i_608 = PHI <i_228(237), 0(761)>
  # prephitmp_865 = PHI <pretmp_1538(237), 0B(761)>
  # ivtmp_527 = PHI <ivtmp_526(237), 2(761)>
  if (prephitmp_865 != 0B)
    goto <bb 239>;
  else
    goto <bb 240>;

  <bb 239>:
  free (prephitmp_865);

  <bb 240>:
  _211 = cv::getTickCount ();
  goto <bb 242>;

<L257>:
  goto <bb 682> (<L141>);

  <bb 242>:
  t_start_212 = (double) _211;
  harris_base (_529, _66, img_ref_190, &harris);
  _215 = cv::getTickCount ();
  goto <bb 244>;

<L258>:
  goto <bb 682> (<L141>);

  <bb 244>:
  t_end_216 = (double) _215;
  _217 = t_end_216 - t_start_212;
  _219 = cv::getTickFrequency ();
  goto <bb 246>;

<L259>:
  goto <bb 682> (<L141>);

  <bb 246>:
  _220 = _217 / _219;
  _221 = _220 * 1.0e+3;
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Reference", 9);
  goto <bb 248>;

<L260>:
  goto <bb 682> (<L141>);

  <bb 248>:
  std::__ostream_insert<char, std::char_traits<char> > (&cout, " time = ", 8);
  goto <bb 250>;

<L261>:
  goto <bb 682> (<L141>);

  <bb 250>:
  _541 = std::basic_ostream<char>::_M_insert<double> (&cout, _221);
  goto <bb 252>;

<L262>:
  goto <bb 682> (<L141>);

  <bb 252>:
  std::__ostream_insert<char, std::char_traits<char> > (_541, " ms", 3);
  goto <bb 254>;

<L263>:
  goto <bb 682> (<L141>);

  <bb 254>:
  _226 = MEM[(struct basic_ostream *)_541]._vptr.basic_ostream;
  _1069 = MEM[(long int *)_226 + -24B];
  _1070 = (sizetype) _1069;
  _1071 = _541 + _1070;
  _800 = MEM[(const struct basic_ios *)_1071]._M_ctype;
  if (_800 == 0B)
    goto <bb 255>;
  else
    goto <bb 257>;

  <bb 255>:
  std::__throw_bad_cast ();

<L264>:
  goto <bb 682> (<L141>);

  <bb 257>:
  _1076 = MEM[(const struct ctype *)_800]._M_widen_ok;
  if (_1076 != 0)
    goto <bb 258>;
  else
    goto <bb 259>;

  <bb 258>:
  _1079 = MEM[(const struct ctype *)_800]._M_widen[10];
  goto <bb 264>;

  <bb 259>:
  std::ctype<char>::_M_widen_init (_800);
  goto <bb 261>;

<L265>:
  goto <bb 682> (<L141>);

  <bb 261>:
  _1084 = MEM[(const struct ctype *)_800].D.18134._vptr.facet;
  _1085 = MEM[(int (*__vtbl_ptr_type) () *)_1084 + 48B];
  PROF_1089 = [obj_type_ref] OBJ_TYPE_REF(_1085;(const struct ctype)_800->6);
  if (PROF_1089 == do_widen)
    goto <bb 264>;
  else
    goto <bb 262>;

  <bb 262>:
  _1091 = OBJ_TYPE_REF(_1085;(const struct ctype)_800->6) (_800, 10);
  goto <bb 264>;

<L266>:
  goto <bb 682> (<L141>);

  <bb 264>:
  # _1082 = PHI <_1079(258), 10(261), _1091(262)>
  _1073 = (int) _1082;
  _1074 = std::basic_ostream<char>::put (_541, _1073);
  goto <bb 266>;

<L267>:
  goto <bb 682> (<L141>);

  <bb 266>:
  std::basic_ostream<char>::flush (_1074);
  goto <bb 268>;

<L268>:
  goto <bb 682> (<L141>);

  <bb 268>:
  i_228 = i_608 + 1;
  ivtmp_526 = ivtmp_527 - 1;
  if (ivtmp_526 != 0)
    goto <bb 237>;
  else
    goto <bb 269>;

  <bb 269>:
  _229 = MEM[(int *)&img_region];
  _542 = _229 & 4095;
  _230 = _529 + -2;
  _231 = _66 + -2;
  cv::Mat::Mat (&result_ref, _231, _230, _542);
  goto <bb 271>;

<L269>:
  goto <bb 682> (<L141>);

  <bb 271>:
  if (_231 > 0)
    goto <bb 272>;
  else
    goto <bb 758>;

  <bb 272>:
  pretmp_571 = harris;
  pretmp_808 = MEM[(uchar * *)&result_ref + 16B];
  pretmp_810 = MEM[(size_t * *)&result_ref + 72B];
  goto <bb 295>;

  <bb 273>:
  goto <bb 283>;

  <bb 274>:

  <bb 275>:
  # j_1191 = PHI <0(274), j_1428(276)>
  _1087 = (long unsigned int) j_1191;
  _603 = _1087 * 4;
  _607 = _603 + pretmp_581;
  _606 = pretmp_808 + _607;
  _874 = j_1191 + 2;
  _1165 = _874 + pretmp_680;
  _1174 = (long unsigned int) _1165;
  _1180 = _1174 * 4;
  _609 = pretmp_571 + _1180;
  _584 = *_609;
  *_606 = _584;
  j_1428 = j_1191 + 1;
  if (_230 > j_1428)
    goto <bb 276>;
  else
    goto <bb 291>;

  <bb 276>:
  goto <bb 275>;

  <bb 277>:
  niters.1277_290 = _1183 + 4294967294;
  _1072 = (sizetype) pretmp_680;
  _1417 = _1072 + 2;
  _1092 = _1417 * 4;
  vectp.1278_1418 = pretmp_571 + _1092;
  _1413 = (unsigned long) vectp.1278_1418;
  _286 = _1413 & 15;
  _1403 = _286 >> 2;
  _1035 = -_1403;
  _1402 = (unsigned int) _1035;
  _1055 = _1402 & 3;
  prolog_loop_niters.1279_1086 = MIN_EXPR <niters.1277_290, _1055>;
  if (prolog_loop_niters.1279_1086 == 0)
    goto <bb 281>;
  else
    goto <bb 278>;

  <bb 278>:
  # j_830 = PHI <0(277)>
  # ivtmp_87 = PHI <0(277)>

  <bb 763>:
  # j_1049 = PHI <j_830(278), j_1130(279)>
  # ivtmp_263 = PHI <ivtmp_87(278), ivtmp_1105(279)>
  _528 = (long unsigned int) j_1049;
  _1221 = _528 * 4;
  _1220 = _1221 + pretmp_581;
  _1194 = pretmp_808 + _1220;
  _1193 = j_1049 + 2;
  _1167 = _1193 + pretmp_680;
  _1166 = (long unsigned int) _1167;
  _1140 = _1166 * 4;
  _1139 = pretmp_571 + _1140;
  _560 = *_1139;
  *_1194 = _560;
  j_1130 = j_1049 + 1;
  ivtmp_1105 = ivtmp_263 + 1;
  if (ivtmp_1105 < prolog_loop_niters.1279_1086)
    goto <bb 279>;
  else
    goto <bb 280>;

  <bb 279>:
  goto <bb 763>;

  <bb 280>:
  # j_1127 = PHI <j_1130(763)>
  if (niters.1277_290 == prolog_loop_niters.1279_1086)
    goto <bb 290>;
  else
    goto <bb 281>;

  <bb 281>:
  # j_1431 = PHI <j_1127(280), 0(277)>
  prolog_loop_adjusted_niters.1280_1426 = (sizetype) prolog_loop_niters.1279_1086;
  niters.1281_264 = niters.1277_290 - prolog_loop_niters.1279_1086;
  _262 = niters.1281_264 + 4294967292;
  _1103 = _262 >> 2;
  bnd.1282_1424 = _1103 + 1;
  ratio_mult_vf.1283_1104 = bnd.1282_1424 << 2;
  _225 = (unsigned int) _529;
  _1409 = _225 - prolog_loop_niters.1279_1086;
  _223 = _1409 + 4294967293;
  if (_223 <= 2)
    goto <bb 287>;
  else
    goto <bb 282>;

  <bb 282>:
  _1043 = (sizetype) pretmp_680;
  _1046 = _1043 + prolog_loop_adjusted_niters.1280_1426;
  _1040 = _1046 + 2;
  _1041 = _1040 * 4;
  vectp.1286_1053 = pretmp_571 + _1041;
  _1394 = prolog_loop_adjusted_niters.1280_1426 * 4;
  _175 = pretmp_581 + _1394;
  vectp.1289_177 = pretmp_808 + _175;

  <bb 283>:
  # j_572 = PHI <j_1431(282), j_245(273)>
  # vectp.1285_176 = PHI <vectp.1286_1053(282), vectp.1285_1031(273)>
  # vectp.1288_1029 = PHI <vectp.1289_177(282), vectp.1288_1030(273)>
  # ivtmp_244 = PHI <0(282), ivtmp_1021(273)>
  _546 = (long unsigned int) j_572;
  _547 = _546 * 4;
  _548 = _547 + pretmp_581;
  _549 = pretmp_808 + _548;
  _238 = j_572 + 2;
  _239 = _238 + pretmp_680;
  _240 = (long unsigned int) _239;
  _241 = _240 * 4;
  _242 = pretmp_571 + _241;
  vect__243.1287_1396 = MEM[(float *)vectp.1285_176];
  _243 = *_242;
  MEM[(float &)vectp.1288_1029] = vect__243.1287_1396;
  j_245 = j_572 + 1;
  vectp.1285_1031 = vectp.1285_176 + 16;
  vectp.1288_1030 = vectp.1288_1029 + 16;
  ivtmp_1021 = ivtmp_244 + 1;
  if (ivtmp_1021 < bnd.1282_1424)
    goto <bb 273>;
  else
    goto <bb 286>;

  <bb 284>:
  # j_1094 = PHI <j_1411(285), j_1066(287)>
  _803 = (long unsigned int) j_1094;
  _1421 = _803 * 4;
  _1093 = _1421 + pretmp_581;
  _1416 = pretmp_808 + _1093;
  _1090 = j_1094 + 2;
  _1080 = _1090 + pretmp_680;
  _1083 = (long unsigned int) _1080;
  _1077 = _1083 * 4;
  _1078 = pretmp_571 + _1077;
  _224 = *_1078;
  *_1416 = _224;
  j_1411 = j_1094 + 1;
  if (_230 > j_1411)
    goto <bb 285>;
  else
    goto <bb 288>;

  <bb 285>:
  goto <bb 284>;

  <bb 286>:
  # j_1067 = PHI <j_245(283)>
  _1401 = (int) ratio_mult_vf.1283_1104;
  tmp.1284_1056 = _1401 + j_1431;
  if (niters.1281_264 == ratio_mult_vf.1283_1104)
    goto <bb 289>;
  else
    goto <bb 287>;

  <bb 287>:
  # j_1066 = PHI <tmp.1284_1056(286), j_1431(281)>
  goto <bb 284>;

  <bb 288>:

  <bb 289>:

  <bb 290>:

  <bb 291>:

  <bb 292>:
  i_246 = i_577 + 1;
  if (_231 > i_246)
    goto <bb 294>;
  else
    goto <bb 293>;

  <bb 293>:
  pretmp_203 = pretmp_571;
  goto <bb 759>;

  <bb 294>:

  <bb 295>:
  # i_577 = PHI <0(272), i_246(294)>
  if (_230 > 0)
    goto <bb 296>;
  else
    goto <bb 292>;

  <bb 296>:
  pretmp_679 = i_577 + 2;
  pretmp_680 = _185 * pretmp_679;
  pretmp_4 = *pretmp_810;
  pretmp_1153 = (long unsigned int) i_577;
  pretmp_581 = pretmp_4 * pretmp_1153;
  _1183 = (unsigned int) _529;
  _1177 = _1183 + 4294967294;
  _1171 = _1177 > 12;
  _1156 = (sizetype) pretmp_680;
  _1150 = _1156 + 6;
  _1144 = _1150 * 4;
  _1064 = pretmp_571 + _1144;
  _1024 = pretmp_808 + pretmp_581;
  _1007 = _1024 >= _1064;
  _261 = pretmp_581 + 16;
  _174 = pretmp_808 + _261;
  _1081 = (sizetype) pretmp_680;
  _610 = _1081 + 2;
  _1061 = _610 * 4;
  _1234 = pretmp_571 + _1061;
  _1124 = _174 <= _1234;
  _605 = _1007 | _1124;
  _227 = _605 & _1171;
  if (_227 != 0)
    goto <bb 277>;
  else
    goto <bb 274>;

  <bb 297>:
  pretmp_564 = harris;

  <bb 298>:
  # i_587 = PHI <i_267(297), 0(759)>
  # prephitmp_567 = PHI <pretmp_564(297), prephitmp_1(759)>
  # ivtmp_1433 = PHI <ivtmp_1051(297), 2(759)>
  if (prephitmp_567 != 0B)
    goto <bb 299>;
  else
    goto <bb 300>;

  <bb 299>:
  free (prephitmp_567);

  <bb 300>:
  _250 = cv::getTickCount ();

  <bb 301>:
  t_start_251 = (double) _250;
  harris_opt (_529, _66, img_ref_190, &harris);
  _254 = cv::getTickCount ();
  goto <bb 303>;

<L271>:
  goto <bb 679> (<L140>);

  <bb 303>:
  t_end_255 = (double) _254;
  _256 = t_end_255 - t_start_251;
  _258 = cv::getTickFrequency ();
  goto <bb 305>;

<L272>:
  goto <bb 679> (<L140>);

  <bb 305>:
  _259 = _256 / _258;
  _260 = _259 * 1.0e+3;
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Optimized", 9);
  goto <bb 307>;

<L273>:
  goto <bb 679> (<L140>);

  <bb 307>:
  std::__ostream_insert<char, std::char_traits<char> > (&cout, " time = ", 8);
  goto <bb 309>;

<L274>:
  goto <bb 679> (<L140>);

  <bb 309>:
  _550 = std::basic_ostream<char>::_M_insert<double> (&cout, _260);
  goto <bb 311>;

<L275>:
  goto <bb 679> (<L140>);

  <bb 311>:
  std::__ostream_insert<char, std::char_traits<char> > (_550, " ms", 3);
  goto <bb 313>;

<L276>:
  goto <bb 679> (<L140>);

  <bb 313>:
  _265 = MEM[(struct basic_ostream *)_550]._vptr.basic_ostream;
  _1106 = MEM[(long int *)_265 + -24B];
  _1107 = (sizetype) _1106;
  _1108 = _550 + _1107;
  _802 = MEM[(const struct basic_ios *)_1108]._M_ctype;
  if (_802 == 0B)
    goto <bb 314>;
  else
    goto <bb 316>;

  <bb 314>:
  std::__throw_bad_cast ();

<L277>:
  goto <bb 679> (<L140>);

  <bb 316>:
  _1113 = MEM[(const struct ctype *)_802]._M_widen_ok;
  if (_1113 != 0)
    goto <bb 317>;
  else
    goto <bb 318>;

  <bb 317>:
  _1116 = MEM[(const struct ctype *)_802]._M_widen[10];
  goto <bb 323>;

  <bb 318>:
  std::ctype<char>::_M_widen_init (_802);
  goto <bb 320>;

<L278>:
  goto <bb 679> (<L140>);

  <bb 320>:
  _1121 = MEM[(const struct ctype *)_802].D.18134._vptr.facet;
  _1122 = MEM[(int (*__vtbl_ptr_type) () *)_1121 + 48B];
  PROF_1126 = [obj_type_ref] OBJ_TYPE_REF(_1122;(const struct ctype)_802->6);
  if (PROF_1126 == do_widen)
    goto <bb 323>;
  else
    goto <bb 321>;

  <bb 321>:
  _1128 = OBJ_TYPE_REF(_1122;(const struct ctype)_802->6) (_802, 10);
  goto <bb 323>;

<L279>:
  goto <bb 679> (<L140>);

  <bb 323>:
  # _1119 = PHI <_1116(317), 10(320), _1128(321)>
  _1110 = (int) _1119;
  _1111 = std::basic_ostream<char>::put (_550, _1110);
  goto <bb 325>;

<L280>:
  goto <bb 679> (<L140>);

  <bb 325>:
  std::basic_ostream<char>::flush (_1111);
  goto <bb 327>;

<L281>:
  goto <bb 679> (<L140>);

  <bb 327>:
  i_267 = i_587 + 1;
  ivtmp_1051 = ivtmp_1433 - 1;
  if (ivtmp_1051 != 0)
    goto <bb 297>;
  else
    goto <bb 328>;

  <bb 328>:
  _268 = MEM[(int *)&img_region];
  _551 = _268 & 4095;
  cv::Mat::Mat (&result_opt, _231, _230, _551);
  goto <bb 330>;

<L282>:
  goto <bb 679> (<L140>);

  <bb 330>:
  if (_231 > 0)
    goto <bb 331>;
  else
    goto <bb 356>;

  <bb 331>:
  pretmp_860 = MEM[(uchar * *)&result_opt + 16B];
  pretmp_1470 = MEM[(size_t * *)&result_opt + 72B];
  pretmp_848 = harris;
  goto <bb 353>;

  <bb 332>:
  goto <bb 342>;

  <bb 333>:

  <bb 334>:
  # j_880 = PHI <0(333), j_832(335)>
  _878 = (long unsigned int) j_880;
  _875 = _878 * 4;
  _872 = _875 + pretmp_842;
  _870 = pretmp_860 + _872;
  _869 = j_880 + 2;
  _864 = _869 + pretmp_852;
  _859 = (long unsigned int) _864;
  _858 = _859 * 4;
  _855 = pretmp_848 + _858;
  _854 = *_855;
  *_870 = _854;
  j_832 = j_880 + 1;
  if (_230 > j_832)
    goto <bb 335>;
  else
    goto <bb 350>;

  <bb 335>:
  goto <bb 334>;

  <bb 336>:
  niters.1264_829 = _404 + 4294967294;
  _820 = (sizetype) pretmp_852;
  _818 = _820 + 2;
  _815 = _818 * 4;
  vectp.1265_822 = pretmp_848 + _815;
  _600 = (unsigned long) vectp.1265_822;
  _595 = _600 & 15;
  _592 = _595 >> 2;
  _591 = -_592;
  _586 = (unsigned int) _591;
  _192 = _586 & 3;
  prolog_loop_niters.1266_805 = MIN_EXPR <_192, niters.1264_829>;
  if (prolog_loop_niters.1266_805 == 0)
    goto <bb 340>;
  else
    goto <bb 337>;

  <bb 337>:
  # j_1114 = PHI <0(336)>
  # ivtmp_16 = PHI <0(336)>

  <bb 762>:
  # j_191 = PHI <j_1114(337), j_819(338)>
  # ivtmp_839 = PHI <ivtmp_16(337), ivtmp_849(338)>
  _9 = (long unsigned int) j_191;
  _7 = _9 * 4;
  _3 = _7 + pretmp_842;
  _2 = pretmp_860 + _3;
  _1572 = j_191 + 2;
  _1195 = _1572 + pretmp_852;
  _1164 = (long unsigned int) _1195;
  _868 = _1164 * 4;
  _835 = pretmp_848 + _868;
  _828 = *_835;
  *_2 = _828;
  j_819 = j_191 + 1;
  ivtmp_849 = ivtmp_839 + 1;
  if (ivtmp_849 < prolog_loop_niters.1266_805)
    goto <bb 338>;
  else
    goto <bb 339>;

  <bb 338>:
  goto <bb 762>;

  <bb 339>:
  # j_675 = PHI <j_819(762)>
  if (prolog_loop_niters.1266_805 == niters.1264_829)
    goto <bb 349>;
  else
    goto <bb 340>;

  <bb 340>:
  # j_682 = PHI <j_675(339), 0(336)>
  prolog_loop_adjusted_niters.1267_845 = (sizetype) prolog_loop_niters.1266_805;
  niters.1268_862 = niters.1264_829 - prolog_loop_niters.1266_805;
  _601 = niters.1268_862 + 4294967292;
  _678 = _601 >> 2;
  bnd.1269_8 = _678 + 1;
  ratio_mult_vf.1270_812 = bnd.1269_8 << 2;
  _14 = (unsigned int) _529;
  _1038 = _14 - prolog_loop_niters.1266_805;
  _1222 = _1038 + 4294967293;
  if (_1222 <= 2)
    goto <bb 346>;
  else
    goto <bb 341>;

  <bb 341>:
  _1267 = (sizetype) pretmp_852;
  _1264 = prolog_loop_adjusted_niters.1267_845 + _1267;
  _1258 = _1264 + 2;
  _1255 = _1258 * 4;
  vectp.1273_1270 = pretmp_848 + _1255;
  _1237 = prolog_loop_adjusted_niters.1267_845 * 4;
  _1231 = pretmp_842 + _1237;
  vectp.1276_1240 = pretmp_860 + _1231;

  <bb 342>:
  # j_569 = PHI <j_682(341), j_283(332)>
  # vectp.1272_1252 = PHI <vectp.1273_1270(341), vectp.1272_1246(332)>
  # vectp.1275_1225 = PHI <vectp.1276_1240(341), vectp.1275_1210(332)>
  # ivtmp_282 = PHI <0(341), ivtmp_1198(332)>
  _555 = (long unsigned int) j_569;
  _556 = _555 * 4;
  _557 = _556 + pretmp_842;
  _558 = pretmp_860 + _557;
  _276 = j_569 + 2;
  _277 = _276 + pretmp_852;
  _278 = (long unsigned int) _277;
  _279 = _278 * 4;
  _280 = pretmp_848 + _279;
  vect__281.1274_1243 = MEM[(float *)vectp.1272_1252];
  _281 = *_280;
  MEM[(float &)vectp.1275_1225] = vect__281.1274_1243;
  j_283 = j_569 + 1;
  vectp.1272_1246 = vectp.1272_1252 + 16;
  vectp.1275_1210 = vectp.1275_1225 + 16;
  ivtmp_1198 = ivtmp_282 + 1;
  if (ivtmp_1198 < bnd.1269_8)
    goto <bb 332>;
  else
    goto <bb 345>;

  <bb 343>:
  # j_809 = PHI <j_1059(344), j_1219(346)>
  _23 = (long unsigned int) j_809;
  _179 = _23 * 4;
  _1192 = _179 + pretmp_842;
  _1050 = pretmp_860 + _1192;
  _611 = j_809 + 2;
  _22 = _611 + pretmp_852;
  _599 = (long unsigned int) _22;
  _13 = _599 * 4;
  _593 = pretmp_848 + _13;
  _18 = *_593;
  *_1050 = _18;
  j_1059 = j_809 + 1;
  if (_230 > j_1059)
    goto <bb 344>;
  else
    goto <bb 347>;

  <bb 344>:
  goto <bb 343>;

  <bb 345>:
  # j_1075 = PHI <j_283(342)>
  _1088 = (int) ratio_mult_vf.1270_812;
  tmp.1271_614 = j_682 + _1088;
  if (ratio_mult_vf.1270_812 == niters.1268_862)
    goto <bb 348>;
  else
    goto <bb 346>;

  <bb 346>:
  # j_1219 = PHI <tmp.1271_614(345), j_682(340)>
  goto <bb 343>;

  <bb 347>:

  <bb 348>:

  <bb 349>:

  <bb 350>:

  <bb 351>:
  i_284 = i_566 + 1;
  if (_231 > i_284)
    goto <bb 352>;
  else
    goto <bb 355>;

  <bb 352>:

  <bb 353>:
  # i_566 = PHI <0(331), i_284(352)>
  if (_230 > 0)
    goto <bb 354>;
  else
    goto <bb 351>;

  <bb 354>:
  pretmp_850 = i_566 + 2;
  pretmp_852 = _185 * pretmp_850;
  pretmp_838 = *pretmp_1470;
  pretmp_840 = (long unsigned int) i_566;
  pretmp_842 = pretmp_838 * pretmp_840;
  _404 = (unsigned int) _529;
  _574 = _404 + 4294967294;
  _568 = _574 > 12;
  _910 = (sizetype) pretmp_852;
  _909 = _910 + 6;
  _908 = _909 * 4;
  _905 = pretmp_848 + _908;
  _902 = pretmp_860 + pretmp_842;
  _900 = _902 >= _905;
  _899 = pretmp_842 + 16;
  _898 = pretmp_860 + _899;
  _895 = (sizetype) pretmp_852;
  _892 = _895 + 2;
  _890 = _892 * 4;
  _889 = pretmp_848 + _890;
  _888 = _889 >= _898;
  _885 = _888 | _900;
  _882 = _568 & _885;
  if (_882 != 0)
    goto <bb 336>;
  else
    goto <bb 333>;

  <bb 355>:

  <bb 356>:
  _285 = MEM[(int *)&img_region];
  _559 = _285 & 4095;
  cv::Mat::Mat (&diffCVOpt, _231, _230, _559);

  <bb 357>:
  _288 = MEM[(int *)&img_region];
  _561 = _288 & 4095;
  cv::Mat::Mat (&diffOptCV, _231, _230, _561);

  <bb 358>:
  std::basic_string<char>::basic_string (&D.76145, "OpenCV Result", &D.76144);

  <bb 359>:
  cv::namedWindow (&D.76145, 0);

  <bb 360>:
  _562 = D.76145._M_dataplus._M_p;
  _563 = _562 + 18446744073709551592;
  if (_563 != &_S_empty_rep_storage)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_563, &D.82855);

  <bb 362>:
  D.82855 ={v} {CLOBBER};
  D.82855 ={v} {CLOBBER};
  D.76145 ={v} {CLOBBER};
  D.76145 ={v} {CLOBBER};
  D.76144 ={v} {CLOBBER};
  D.76144 ={v} {CLOBBER};
  std::basic_string<char>::basic_string (&D.76148, "Reference Result", &D.76147);
  goto <bb 364>;

<L286>:
  goto <bb 670> (<L137>);

  <bb 364>:
  cv::namedWindow (&D.76148, 0);

  <bb 365>:
  _296 = D.76148._M_dataplus._M_p;
  _294 = _296 + 18446744073709551592;
  if (_294 != &_S_empty_rep_storage)
    goto <bb 366>;
  else
    goto <bb 367>;

  <bb 366>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_294, &D.82858);

  <bb 367>:
  D.82858 ={v} {CLOBBER};
  D.82858 ={v} {CLOBBER};
  D.76148 ={v} {CLOBBER};
  D.76148 ={v} {CLOBBER};
  D.76147 ={v} {CLOBBER};
  D.76147 ={v} {CLOBBER};
  std::basic_string<char>::basic_string (&D.76151, "Optimized Result", &D.76150);
  goto <bb 369>;

<L287>:
  goto <bb 670> (<L137>);

  <bb 369>:
  cv::namedWindow (&D.76151, 0);

  <bb 370>:
  _302 = D.76151._M_dataplus._M_p;
  _300 = _302 + 18446744073709551592;
  if (_300 != &_S_empty_rep_storage)
    goto <bb 371>;
  else
    goto <bb 372>;

  <bb 371>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_300, &D.82861);

  <bb 372>:
  D.82861 ={v} {CLOBBER};
  D.82861 ={v} {CLOBBER};
  D.76151 ={v} {CLOBBER};
  D.76151 ={v} {CLOBBER};
  D.76150 ={v} {CLOBBER};
  D.76150 ={v} {CLOBBER};
  std::basic_string<char>::basic_string (&D.76154, "absdiff ref opt", &D.76153);
  goto <bb 374>;

<L288>:
  goto <bb 670> (<L137>);

  <bb 374>:
  cv::namedWindow (&D.76154, 0);

  <bb 375>:
  _308 = D.76154._M_dataplus._M_p;
  _306 = _308 + 18446744073709551592;
  if (_306 != &_S_empty_rep_storage)
    goto <bb 376>;
  else
    goto <bb 377>;

  <bb 376>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_306, &D.82864);

  <bb 377>:
  D.82864 ={v} {CLOBBER};
  D.82864 ={v} {CLOBBER};
  D.76154 ={v} {CLOBBER};
  D.76154 ={v} {CLOBBER};
  D.76153 ={v} {CLOBBER};
  D.76153 ={v} {CLOBBER};

  <bb 378>:
  c_317 = cv::waitKey (10);
  goto <bb 380>;

<L289>:
  goto <bb 670> (<L137>);

  <bb 380>:
  _318 = (signed char) c_317;
  if (_318 == 27)
    goto <bb 515>;
  else
    goto <bb 381>;

  <bb 381>:
  D.76158 = cv::operator* (&opencv_harris, 1.0e+4); [return slot optimization]
  goto <bb 383>;

<L290>:
  goto <bb 670> (<L137>);

  <bb 383>:
  cv::_InputArray::_InputArray (&D.76162, &D.76158);

  <bb 384>:
  std::basic_string<char>::basic_string (&D.76161, "OpenCV Result", &D.76160);

  <bb 385>:
  cv::imshow (&D.76161, &D.76162);

  <bb 386>:
  _314 = D.76161._M_dataplus._M_p;
  _312 = _314 + 18446744073709551592;
  if (_312 != &_S_empty_rep_storage)
    goto <bb 388>;
  else
    goto <bb 387>;

  <bb 387>:
  goto <bb 393>;

  <bb 388>:
  if (__gthrw___pthread_key_create != 0B)
    goto <bb 389>;
  else
    goto <bb 390>;

  <bb 389>:
  _1131 = &MEM[(struct _Rep *)_314 + -24B].D.14022._M_refcount;
  _1132 = __atomic_fetch_add_4 (_1131, 4294967295, 4);
  _1133 = (_Atomic_word) _1132;
  goto <bb 391>;

  <bb 390>:
  __result_1134 = MEM[(_Atomic_word *)_314 + -8B];
  _1135 = __result_1134 + -1;
  MEM[(_Atomic_word *)_314 + -8B] = _1135;

  <bb 391>:
  # _1136 = PHI <_1133(389), __result_1134(390)>
  if (_1136 <= 0)
    goto <bb 392>;
  else
    goto <bb 387>;

  <bb 392>:
  std::basic_string<char>::_Rep::_M_destroy (_312, &D.82867);

  <bb 393>:
  D.82867 ={v} {CLOBBER};
  D.82867 ={v} {CLOBBER};
  D.76161 ={v} {CLOBBER};
  D.76161 ={v} {CLOBBER};
  D.76160 ={v} {CLOBBER};
  D.76160 ={v} {CLOBBER};
  D.76162 ={v} {CLOBBER};
  _1142 = MEM[(struct Mat *)&D.76158 + 208B].refcount;
  if (_1142 != 0B)
    goto <bb 394>;
  else
    goto <bb 724>;

  <bb 394>:
  _1143 = __sync_fetch_and_add_4 (_1142, 4294967295);
  if (_1143 == 1)
    goto <bb 722>;
  else
    goto <bb 724>;

  <bb 395>:
  MEM[(struct Mat *)&D.76158 + 208B].datalimit = 0B;
  MEM[(struct Mat *)&D.76158 + 208B].dataend = 0B;
  MEM[(struct Mat *)&D.76158 + 208B].datastart = 0B;
  MEM[(struct Mat *)&D.76158 + 208B].data = 0B;
  _1145 = MEM[(struct Mat *)&D.76158 + 208B].size.p;
  *_1145 = 0;
  MEM[(struct Mat *)&D.76158 + 208B].refcount = 0B;
  _328 = MEM[(struct Mat *)&D.76158 + 208B].step.p;
  if (&MEM[(struct Mat *)&D.76158 + 208B].step.buf != _328)
    goto <bb 397>;
  else
    goto <bb 396>;

  <bb 396>:
  MEM[(struct Mat *)&D.76158 + 208B] ={v} {CLOBBER};
  _1148 = MEM[(struct Mat *)&D.76158 + 112B].refcount;
  if (_1148 != 0B)
    goto <bb 398>;
  else
    goto <bb 727>;

  <bb 397>:
  cv::fastFree (_328);
  goto <bb 396>;

  <bb 398>:
  _1149 = __sync_fetch_and_add_4 (_1148, 4294967295);
  if (_1149 == 1)
    goto <bb 725>;
  else
    goto <bb 727>;

  <bb 399>:
  MEM[(struct Mat *)&D.76158 + 112B].datalimit = 0B;
  MEM[(struct Mat *)&D.76158 + 112B].dataend = 0B;
  MEM[(struct Mat *)&D.76158 + 112B].datastart = 0B;
  MEM[(struct Mat *)&D.76158 + 112B].data = 0B;
  _1151 = MEM[(struct Mat *)&D.76158 + 112B].size.p;
  *_1151 = 0;
  MEM[(struct Mat *)&D.76158 + 112B].refcount = 0B;
  _1146 = MEM[(struct Mat *)&D.76158 + 112B].step.p;
  if (&MEM[(struct Mat *)&D.76158 + 112B].step.buf != _1146)
    goto <bb 401>;
  else
    goto <bb 400>;

  <bb 400>:
  MEM[(struct Mat *)&D.76158 + 112B] ={v} {CLOBBER};
  _1154 = MEM[(struct Mat *)&D.76158 + 16B].refcount;
  if (_1154 != 0B)
    goto <bb 402>;
  else
    goto <bb 730>;

  <bb 401>:
  cv::fastFree (_1146);
  goto <bb 400>;

  <bb 402>:
  _1155 = __sync_fetch_and_add_4 (_1154, 4294967295);
  if (_1155 == 1)
    goto <bb 728>;
  else
    goto <bb 730>;

  <bb 403>:
  MEM[(struct Mat *)&D.76158 + 16B].datalimit = 0B;
  MEM[(struct Mat *)&D.76158 + 16B].dataend = 0B;
  MEM[(struct Mat *)&D.76158 + 16B].datastart = 0B;
  MEM[(struct Mat *)&D.76158 + 16B].data = 0B;
  _1157 = MEM[(struct Mat *)&D.76158 + 16B].size.p;
  *_1157 = 0;
  MEM[(struct Mat *)&D.76158 + 16B].refcount = 0B;
  _1152 = MEM[(struct Mat *)&D.76158 + 16B].step.p;
  if (&MEM[(struct Mat *)&D.76158 + 16B].step.buf != _1152)
    goto <bb 405>;
  else
    goto <bb 404>;

  <bb 404>:
  D.76158 ={v} {CLOBBER};
  D.76158 ={v} {CLOBBER};
  D.76163 = cv::operator* (&result_ref, 1.0e+4); [return slot optimization]
  goto <bb 414>;

  <bb 405>:
  cv::fastFree (_1152);
  goto <bb 404>;

<L295>:
  goto <bb 670> (<L137>);

<L296>:
  goto <bb 670> (<L137>);

<L293>:

<L160>:
  cv::Mat::~Mat (&D.76158.b);
  resx 190

<L297>:
  goto <bb 412> (<L161>);

<L294>:

<L161>:
  cv::Mat::~Mat (&D.76158.a);
  resx 188

<L298>:
  goto <bb 670> (<L137>);

  <bb 414>:
  cv::_InputArray::_InputArray (&D.76167, &D.76163);

  <bb 415>:
  std::basic_string<char>::basic_string (&D.76166, "Reference Result", &D.76165);

  <bb 416>:
  cv::imshow (&D.76166, &D.76167);

  <bb 417>:
  _325 = D.76166._M_dataplus._M_p;
  _323 = _325 + 18446744073709551592;
  if (_323 != &_S_empty_rep_storage)
    goto <bb 419>;
  else
    goto <bb 418>;

  <bb 418>:
  goto <bb 424>;

  <bb 419>:
  if (__gthrw___pthread_key_create != 0B)
    goto <bb 420>;
  else
    goto <bb 421>;

  <bb 420>:
  _1158 = &MEM[(struct _Rep *)_325 + -24B].D.14022._M_refcount;
  _1159 = __atomic_fetch_add_4 (_1158, 4294967295, 4);
  _1160 = (_Atomic_word) _1159;
  goto <bb 422>;

  <bb 421>:
  __result_1161 = MEM[(_Atomic_word *)_325 + -8B];
  _1162 = __result_1161 + -1;
  MEM[(_Atomic_word *)_325 + -8B] = _1162;

  <bb 422>:
  # _1163 = PHI <_1160(420), __result_1161(421)>
  if (_1163 <= 0)
    goto <bb 423>;
  else
    goto <bb 418>;

  <bb 423>:
  std::basic_string<char>::_Rep::_M_destroy (_323, &D.82870);

  <bb 424>:
  D.82870 ={v} {CLOBBER};
  D.82870 ={v} {CLOBBER};
  D.76166 ={v} {CLOBBER};
  D.76166 ={v} {CLOBBER};
  D.76165 ={v} {CLOBBER};
  D.76165 ={v} {CLOBBER};
  D.76167 ={v} {CLOBBER};
  _1169 = MEM[(struct Mat *)&D.76163 + 208B].refcount;
  if (_1169 != 0B)
    goto <bb 425>;
  else
    goto <bb 733>;

  <bb 425>:
  _1170 = __sync_fetch_and_add_4 (_1169, 4294967295);
  if (_1170 == 1)
    goto <bb 731>;
  else
    goto <bb 733>;

  <bb 426>:
  MEM[(struct Mat *)&D.76163 + 208B].datalimit = 0B;
  MEM[(struct Mat *)&D.76163 + 208B].dataend = 0B;
  MEM[(struct Mat *)&D.76163 + 208B].datastart = 0B;
  MEM[(struct Mat *)&D.76163 + 208B].data = 0B;
  _1172 = MEM[(struct Mat *)&D.76163 + 208B].size.p;
  *_1172 = 0;
  MEM[(struct Mat *)&D.76163 + 208B].refcount = 0B;
  _339 = MEM[(struct Mat *)&D.76163 + 208B].step.p;
  if (&MEM[(struct Mat *)&D.76163 + 208B].step.buf != _339)
    goto <bb 428>;
  else
    goto <bb 427>;

  <bb 427>:
  MEM[(struct Mat *)&D.76163 + 208B] ={v} {CLOBBER};
  _1175 = MEM[(struct Mat *)&D.76163 + 112B].refcount;
  if (_1175 != 0B)
    goto <bb 429>;
  else
    goto <bb 736>;

  <bb 428>:
  cv::fastFree (_339);
  goto <bb 427>;

  <bb 429>:
  _1176 = __sync_fetch_and_add_4 (_1175, 4294967295);
  if (_1176 == 1)
    goto <bb 734>;
  else
    goto <bb 736>;

  <bb 430>:
  MEM[(struct Mat *)&D.76163 + 112B].datalimit = 0B;
  MEM[(struct Mat *)&D.76163 + 112B].dataend = 0B;
  MEM[(struct Mat *)&D.76163 + 112B].datastart = 0B;
  MEM[(struct Mat *)&D.76163 + 112B].data = 0B;
  _1178 = MEM[(struct Mat *)&D.76163 + 112B].size.p;
  *_1178 = 0;
  MEM[(struct Mat *)&D.76163 + 112B].refcount = 0B;
  _1173 = MEM[(struct Mat *)&D.76163 + 112B].step.p;
  if (&MEM[(struct Mat *)&D.76163 + 112B].step.buf != _1173)
    goto <bb 432>;
  else
    goto <bb 431>;

  <bb 431>:
  MEM[(struct Mat *)&D.76163 + 112B] ={v} {CLOBBER};
  _1181 = MEM[(struct Mat *)&D.76163 + 16B].refcount;
  if (_1181 != 0B)
    goto <bb 433>;
  else
    goto <bb 739>;

  <bb 432>:
  cv::fastFree (_1173);
  goto <bb 431>;

  <bb 433>:
  _1182 = __sync_fetch_and_add_4 (_1181, 4294967295);
  if (_1182 == 1)
    goto <bb 737>;
  else
    goto <bb 739>;

  <bb 434>:
  MEM[(struct Mat *)&D.76163 + 16B].datalimit = 0B;
  MEM[(struct Mat *)&D.76163 + 16B].dataend = 0B;
  MEM[(struct Mat *)&D.76163 + 16B].datastart = 0B;
  MEM[(struct Mat *)&D.76163 + 16B].data = 0B;
  _1184 = MEM[(struct Mat *)&D.76163 + 16B].size.p;
  *_1184 = 0;
  MEM[(struct Mat *)&D.76163 + 16B].refcount = 0B;
  _1179 = MEM[(struct Mat *)&D.76163 + 16B].step.p;
  if (&MEM[(struct Mat *)&D.76163 + 16B].step.buf != _1179)
    goto <bb 436>;
  else
    goto <bb 435>;

  <bb 435>:
  D.76163 ={v} {CLOBBER};
  D.76163 ={v} {CLOBBER};
  D.76168 = cv::operator* (&result_opt, 1.0e+4); [return slot optimization]
  goto <bb 445>;

  <bb 436>:
  cv::fastFree (_1179);
  goto <bb 435>;

<L303>:
  goto <bb 670> (<L137>);

<L304>:
  goto <bb 670> (<L137>);

<L301>:

<L162>:
  cv::Mat::~Mat (&D.76163.b);
  resx 194

<L305>:
  goto <bb 443> (<L163>);

<L302>:

<L163>:
  cv::Mat::~Mat (&D.76163.a);
  resx 192

<L306>:
  goto <bb 670> (<L137>);

  <bb 445>:
  cv::_InputArray::_InputArray (&D.76172, &D.76168);

  <bb 446>:
  std::basic_string<char>::basic_string (&D.76171, "Optimized Result", &D.76170);

  <bb 447>:
  cv::imshow (&D.76171, &D.76172);

  <bb 448>:
  _336 = D.76171._M_dataplus._M_p;
  _334 = _336 + 18446744073709551592;
  if (_334 != &_S_empty_rep_storage)
    goto <bb 450>;
  else
    goto <bb 449>;

  <bb 449>:
  goto <bb 455>;

  <bb 450>:
  if (__gthrw___pthread_key_create != 0B)
    goto <bb 451>;
  else
    goto <bb 452>;

  <bb 451>:
  _1185 = &MEM[(struct _Rep *)_336 + -24B].D.14022._M_refcount;
  _1186 = __atomic_fetch_add_4 (_1185, 4294967295, 4);
  _1187 = (_Atomic_word) _1186;
  goto <bb 453>;

  <bb 452>:
  __result_1188 = MEM[(_Atomic_word *)_336 + -8B];
  _1189 = __result_1188 + -1;
  MEM[(_Atomic_word *)_336 + -8B] = _1189;

  <bb 453>:
  # _1190 = PHI <_1187(451), __result_1188(452)>
  if (_1190 <= 0)
    goto <bb 454>;
  else
    goto <bb 449>;

  <bb 454>:
  std::basic_string<char>::_Rep::_M_destroy (_334, &D.82873);

  <bb 455>:
  D.82873 ={v} {CLOBBER};
  D.82873 ={v} {CLOBBER};
  D.76171 ={v} {CLOBBER};
  D.76171 ={v} {CLOBBER};
  D.76170 ={v} {CLOBBER};
  D.76170 ={v} {CLOBBER};
  D.76172 ={v} {CLOBBER};
  _1196 = MEM[(struct Mat *)&D.76168 + 208B].refcount;
  if (_1196 != 0B)
    goto <bb 456>;
  else
    goto <bb 742>;

  <bb 456>:
  _1197 = __sync_fetch_and_add_4 (_1196, 4294967295);
  if (_1197 == 1)
    goto <bb 740>;
  else
    goto <bb 742>;

  <bb 457>:
  MEM[(struct Mat *)&D.76168 + 208B].datalimit = 0B;
  MEM[(struct Mat *)&D.76168 + 208B].dataend = 0B;
  MEM[(struct Mat *)&D.76168 + 208B].datastart = 0B;
  MEM[(struct Mat *)&D.76168 + 208B].data = 0B;
  _1199 = MEM[(struct Mat *)&D.76168 + 208B].size.p;
  *_1199 = 0;
  MEM[(struct Mat *)&D.76168 + 208B].refcount = 0B;
  _350 = MEM[(struct Mat *)&D.76168 + 208B].step.p;
  if (&MEM[(struct Mat *)&D.76168 + 208B].step.buf != _350)
    goto <bb 459>;
  else
    goto <bb 458>;

  <bb 458>:
  MEM[(struct Mat *)&D.76168 + 208B] ={v} {CLOBBER};
  _1202 = MEM[(struct Mat *)&D.76168 + 112B].refcount;
  if (_1202 != 0B)
    goto <bb 460>;
  else
    goto <bb 745>;

  <bb 459>:
  cv::fastFree (_350);
  goto <bb 458>;

  <bb 460>:
  _1203 = __sync_fetch_and_add_4 (_1202, 4294967295);
  if (_1203 == 1)
    goto <bb 743>;
  else
    goto <bb 745>;

  <bb 461>:
  MEM[(struct Mat *)&D.76168 + 112B].datalimit = 0B;
  MEM[(struct Mat *)&D.76168 + 112B].dataend = 0B;
  MEM[(struct Mat *)&D.76168 + 112B].datastart = 0B;
  MEM[(struct Mat *)&D.76168 + 112B].data = 0B;
  _1205 = MEM[(struct Mat *)&D.76168 + 112B].size.p;
  *_1205 = 0;
  MEM[(struct Mat *)&D.76168 + 112B].refcount = 0B;
  _1200 = MEM[(struct Mat *)&D.76168 + 112B].step.p;
  if (&MEM[(struct Mat *)&D.76168 + 112B].step.buf != _1200)
    goto <bb 463>;
  else
    goto <bb 462>;

  <bb 462>:
  MEM[(struct Mat *)&D.76168 + 112B] ={v} {CLOBBER};
  _1208 = MEM[(struct Mat *)&D.76168 + 16B].refcount;
  if (_1208 != 0B)
    goto <bb 464>;
  else
    goto <bb 748>;

  <bb 463>:
  cv::fastFree (_1200);
  goto <bb 462>;

  <bb 464>:
  _1209 = __sync_fetch_and_add_4 (_1208, 4294967295);
  if (_1209 == 1)
    goto <bb 746>;
  else
    goto <bb 748>;

  <bb 465>:
  MEM[(struct Mat *)&D.76168 + 16B].datalimit = 0B;
  MEM[(struct Mat *)&D.76168 + 16B].dataend = 0B;
  MEM[(struct Mat *)&D.76168 + 16B].datastart = 0B;
  MEM[(struct Mat *)&D.76168 + 16B].data = 0B;
  _1211 = MEM[(struct Mat *)&D.76168 + 16B].size.p;
  *_1211 = 0;
  MEM[(struct Mat *)&D.76168 + 16B].refcount = 0B;
  _1206 = MEM[(struct Mat *)&D.76168 + 16B].step.p;
  if (&MEM[(struct Mat *)&D.76168 + 16B].step.buf != _1206)
    goto <bb 467>;
  else
    goto <bb 466>;

  <bb 466>:
  D.76168 ={v} {CLOBBER};
  D.76168 ={v} {CLOBBER};
  cv::_OutputArray::_OutputArray (&D.76175, &diffCVOpt);
  goto <bb 476>;

  <bb 467>:
  cv::fastFree (_1206);
  goto <bb 466>;

<L311>:
  goto <bb 670> (<L137>);

<L312>:
  goto <bb 670> (<L137>);

<L309>:

<L164>:
  cv::Mat::~Mat (&D.76168.b);
  resx 198

<L313>:
  goto <bb 474> (<L165>);

<L310>:

<L165>:
  cv::Mat::~Mat (&D.76168.a);
  resx 196

<L314>:
  goto <bb 670> (<L137>);

  <bb 476>:
  cv::_InputArray::_InputArray (&D.76174, &result_ref);
  goto <bb 478>;

<L315>:
  goto <bb 670> (<L137>);

  <bb 478>:
  cv::_InputArray::_InputArray (&D.76173, &result_opt);
  goto <bb 480>;

<L316>:
  goto <bb 670> (<L137>);

  <bb 480>:
  cv::absdiff (&D.76173, &D.76174, &D.76175);
  goto <bb 482>;

<L317>:
  goto <bb 670> (<L137>);

  <bb 482>:
  D.76173 ={v} {CLOBBER};
  D.76174 ={v} {CLOBBER};
  D.76175 ={v} {CLOBBER};
  D.76176 = cv::operator* (&diffCVOpt, 1.0e+4); [return slot optimization]
  goto <bb 484>;

<L318>:
  goto <bb 670> (<L137>);

  <bb 484>:
  cv::_InputArray::_InputArray (&D.76180, &D.76176);

  <bb 485>:
  std::basic_string<char>::basic_string (&D.76179, "absdiff ref opt", &D.76178);

  <bb 486>:
  cv::imshow (&D.76179, &D.76180);

  <bb 487>:
  _347 = D.76179._M_dataplus._M_p;
  _345 = _347 + 18446744073709551592;
  if (_345 != &_S_empty_rep_storage)
    goto <bb 489>;
  else
    goto <bb 488>;

  <bb 488>:
  goto <bb 494>;

  <bb 489>:
  if (__gthrw___pthread_key_create != 0B)
    goto <bb 490>;
  else
    goto <bb 491>;

  <bb 490>:
  _1212 = &MEM[(struct _Rep *)_347 + -24B].D.14022._M_refcount;
  _1213 = __atomic_fetch_add_4 (_1212, 4294967295, 4);
  _1214 = (_Atomic_word) _1213;
  goto <bb 492>;

  <bb 491>:
  __result_1215 = MEM[(_Atomic_word *)_347 + -8B];
  _1216 = __result_1215 + -1;
  MEM[(_Atomic_word *)_347 + -8B] = _1216;

  <bb 492>:
  # _1217 = PHI <_1214(490), __result_1215(491)>
  if (_1217 <= 0)
    goto <bb 493>;
  else
    goto <bb 488>;

  <bb 493>:
  std::basic_string<char>::_Rep::_M_destroy (_345, &D.82876);

  <bb 494>:
  D.82876 ={v} {CLOBBER};
  D.82876 ={v} {CLOBBER};
  D.76179 ={v} {CLOBBER};
  D.76179 ={v} {CLOBBER};
  D.76178 ={v} {CLOBBER};
  D.76178 ={v} {CLOBBER};
  D.76180 ={v} {CLOBBER};
  _1223 = MEM[(struct Mat *)&D.76176 + 208B].refcount;
  if (_1223 != 0B)
    goto <bb 495>;
  else
    goto <bb 751>;

  <bb 495>:
  _1224 = __sync_fetch_and_add_4 (_1223, 4294967295);
  if (_1224 == 1)
    goto <bb 749>;
  else
    goto <bb 751>;

  <bb 496>:
  MEM[(struct Mat *)&D.76176 + 208B].datalimit = 0B;
  MEM[(struct Mat *)&D.76176 + 208B].dataend = 0B;
  MEM[(struct Mat *)&D.76176 + 208B].datastart = 0B;
  MEM[(struct Mat *)&D.76176 + 208B].data = 0B;
  _1226 = MEM[(struct Mat *)&D.76176 + 208B].size.p;
  *_1226 = 0;
  MEM[(struct Mat *)&D.76176 + 208B].refcount = 0B;
  _368 = MEM[(struct Mat *)&D.76176 + 208B].step.p;
  if (&MEM[(struct Mat *)&D.76176 + 208B].step.buf != _368)
    goto <bb 498>;
  else
    goto <bb 497>;

  <bb 497>:
  MEM[(struct Mat *)&D.76176 + 208B] ={v} {CLOBBER};
  _1229 = MEM[(struct Mat *)&D.76176 + 112B].refcount;
  if (_1229 != 0B)
    goto <bb 499>;
  else
    goto <bb 754>;

  <bb 498>:
  cv::fastFree (_368);
  goto <bb 497>;

  <bb 499>:
  _1230 = __sync_fetch_and_add_4 (_1229, 4294967295);
  if (_1230 == 1)
    goto <bb 752>;
  else
    goto <bb 754>;

  <bb 500>:
  MEM[(struct Mat *)&D.76176 + 112B].datalimit = 0B;
  MEM[(struct Mat *)&D.76176 + 112B].dataend = 0B;
  MEM[(struct Mat *)&D.76176 + 112B].datastart = 0B;
  MEM[(struct Mat *)&D.76176 + 112B].data = 0B;
  _1232 = MEM[(struct Mat *)&D.76176 + 112B].size.p;
  *_1232 = 0;
  MEM[(struct Mat *)&D.76176 + 112B].refcount = 0B;
  _1227 = MEM[(struct Mat *)&D.76176 + 112B].step.p;
  if (&MEM[(struct Mat *)&D.76176 + 112B].step.buf != _1227)
    goto <bb 502>;
  else
    goto <bb 501>;

  <bb 501>:
  MEM[(struct Mat *)&D.76176 + 112B] ={v} {CLOBBER};
  _1235 = MEM[(struct Mat *)&D.76176 + 16B].refcount;
  if (_1235 != 0B)
    goto <bb 503>;
  else
    goto <bb 757>;

  <bb 502>:
  cv::fastFree (_1227);
  goto <bb 501>;

  <bb 503>:
  _1236 = __sync_fetch_and_add_4 (_1235, 4294967295);
  if (_1236 == 1)
    goto <bb 755>;
  else
    goto <bb 757>;

  <bb 504>:
  MEM[(struct Mat *)&D.76176 + 16B].datalimit = 0B;
  MEM[(struct Mat *)&D.76176 + 16B].dataend = 0B;
  MEM[(struct Mat *)&D.76176 + 16B].datastart = 0B;
  MEM[(struct Mat *)&D.76176 + 16B].data = 0B;
  _1238 = MEM[(struct Mat *)&D.76176 + 16B].size.p;
  *_1238 = 0;
  MEM[(struct Mat *)&D.76176 + 16B].refcount = 0B;
  _1233 = MEM[(struct Mat *)&D.76176 + 16B].step.p;
  if (&MEM[(struct Mat *)&D.76176 + 16B].step.buf != _1233)
    goto <bb 506>;
  else
    goto <bb 505>;

  <bb 505>:
  D.76176 ={v} {CLOBBER};
  goto <bb 514>;

  <bb 506>:
  cv::fastFree (_1233);
  goto <bb 505>;

<L323>:
  goto <bb 670> (<L137>);

<L321>:

<L166>:
  cv::Mat::~Mat (&D.76176.b);
  resx 202

<L324>:
  goto <bb 512> (<L167>);

<L322>:

<L167>:
  cv::Mat::~Mat (&D.76176.a);
  resx 200

<L325>:
  goto <bb 670> (<L137>);

  <bb 514>:
  D.76176 ={v} {CLOBBER};
  goto <bb 378>;

  <bb 515>:
  free (img_ref_190);
  harris.23_402 = harris;
  free (harris.23_402);
  cv::Mat::~Mat (&diffOptCV);
  goto <bb 517>;

<L326>:
  goto <bb 673> (<L138>);

  <bb 517>:
  cv::Mat::~Mat (&diffCVOpt);
  goto <bb 519>;

<L327>:
  goto <bb 676> (<L139>);

  <bb 519>:
  cv::Mat::~Mat (&result_opt);
  goto <bb 521>;

<L328>:
  goto <bb 679> (<L140>);

  <bb 521>:
  cv::Mat::~Mat (&result_ref);
  goto <bb 523>;

<L329>:
  goto <bb 682> (<L141>);

  <bb 523>:
  cv::Mat::~Mat (&sumKern);
  goto <bb 525>;

<L330>:
  goto <bb 685> (<L142>);

  <bb 525>:
  cv::Mat::~Mat (&gaussKern);
  goto <bb 527>;

<L331>:
  goto <bb 688> (<L143>);

  <bb 527>:
  cv::Mat::~Mat (&gradYKern);
  goto <bb 529>;

<L332>:
  goto <bb 691> (<L144>);

  <bb 529>:
  cv::Mat::~Mat (&gradXKern);
  goto <bb 531>;

<L333>:
  goto <bb 694> (<L145>);

  <bb 531>:
  cv::Mat::~Mat (&opencv_harris);

  <bb 532>:
  cv::Mat::~Mat (&img_show_pipe);
  goto <bb 534>;

<L335>:
  goto <bb 700> (<L147>);

  <bb 534>:
  cv::Mat::~Mat (&img_show_harris);
  goto <bb 536>;

<L336>:
  goto <bb 703> (<L148>);

  <bb 536>:
  cv::Mat::~Mat (&img_show);
  goto <bb 538>;

<L337>:
  goto <bb 706> (<L149>);

  <bb 538>:
  cv::Mat::~Mat (&img_region_harris);
  goto <bb 540>;

<L338>:
  goto <bb 709> (<L150>);

  <bb 540>:
  cv::Mat::~Mat (&img_region);
  goto <bb 542>;

<L339>:
  goto <bb 712> (<L151>);

  <bb 542>:
  cv::Mat::~Mat (&imgGrayf);

  <bb 543>:
  cv::Mat::~Mat (&imgGray);

  <bb 544>:
  cv::Mat::~Mat (&img);
  img ={v} {CLOBBER};
  imgGray ={v} {CLOBBER};
  imgGrayf ={v} {CLOBBER};
  roi ={v} {CLOBBER};
  img_region ={v} {CLOBBER};
  img_region_harris ={v} {CLOBBER};
  img_show ={v} {CLOBBER};
  img_show_harris ={v} {CLOBBER};
  img_show_pipe ={v} {CLOBBER};
  opencv_harris ={v} {CLOBBER};
  gradXKern ={v} {CLOBBER};
  gradYKern ={v} {CLOBBER};
  gaussKern ={v} {CLOBBER};
  sumKern ={v} {CLOBBER};
  harris ={v} {CLOBBER};
  result_ref ={v} {CLOBBER};
  result_opt ={v} {CLOBBER};
  diffCVOpt ={v} {CLOBBER};
  diffOptCV ={v} {CLOBBER};
  return 0;

<L170>:

<L70>:
  cv::Mat::~Mat (&D.74503);
  D.74503 ={v} {CLOBBER};
  resx 7

<L342>:
  goto <bb 549> (<L71>);

<L169>:

<L71>:
  _365 = D.74502._M_dataplus._M_p;
  _363 = _365 + 18446744073709551592;
  if (_363 != &_S_empty_rep_storage)
    goto <bb 550>;
  else
    goto <bb 551>;

  <bb 550>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_363, &D.82879);

  <bb 551>:
  D.82879 ={v} {CLOBBER};
  D.82879 ={v} {CLOBBER};
  D.74502 ={v} {CLOBBER};
  D.74502 ={v} {CLOBBER};
  resx 6

<L343>:
  goto <bb 712> (<L151>);

<L76>:
  cv::Mat::~Mat (&D.74513);
  D.74513 ={v} {CLOBBER};
  resx 19

<L344>:
  goto <bb 712> (<L151>);

<L77>:
  cv::Mat::~Mat (&img_region);
  resx 21

<L345>:
  goto <bb 712> (<L151>);

<L78>:
  cv::Mat::~Mat (&D.74516);
  D.74516 ={v} {CLOBBER};
  resx 24

<L346>:
  goto <bb 709> (<L150>);

<L79>:
  cv::Mat::~Mat (&img_region_harris);
  resx 26

<L347>:
  goto <bb 709> (<L150>);

<L80>:
  cv::Mat::~Mat (&D.74519);
  D.74519 ={v} {CLOBBER};
  resx 29

<L348>:
  goto <bb 706> (<L149>);

<L81>:
  cv::Mat::~Mat (&img_show);
  resx 31

<L349>:
  goto <bb 706> (<L149>);

<L82>:
  cv::Mat::~Mat (&D.74522);
  D.74522 ={v} {CLOBBER};
  resx 34

<L350>:
  goto <bb 703> (<L148>);

<L83>:
  cv::Mat::~Mat (&img_show_harris);
  resx 36

<L351>:
  goto <bb 703> (<L148>);

<L84>:
  cv::Mat::~Mat (&D.74525);
  D.74525 ={v} {CLOBBER};
  resx 39

<L352>:
  goto <bb 700> (<L147>);

<L85>:
  cv::Mat::~Mat (&img_show_pipe);
  resx 41

<L353>:
  goto <bb 700> (<L147>);

<L86>:
  cv::Mat::~Mat (&D.76075.D.74999);
  D.76075 ={v} {CLOBBER};
  D.76075 ={v} {CLOBBER};
  resx 47

<L354>:
  goto <bb 578> (<L89>);

<L87>:
  cv::Mat::~Mat (&gradXKern);
  resx 49

<L355>:
  goto <bb 578> (<L89>);

<L194>:

<L89>:
  D.76068 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.75833.D.74999);
  D.75833 ={v} {CLOBBER};
  D.75833 ={v} {CLOBBER};
  resx 45

<L356>:
  goto <bb 694> (<L145>);

<L90>:
  cv::Mat::~Mat (&gradXKern);
  resx 54

<L357>:
  goto <bb 694> (<L145>);

<L91>:
  cv::MatExpr::~MatExpr (&D.76077);
  D.76077 ={v} {CLOBBER};
  resx 57

<L358>:
  goto <bb 691> (<L144>);

<L92>:
  cv::Mat::~Mat (&D.76097.D.74999);
  D.76097 ={v} {CLOBBER};
  D.76097 ={v} {CLOBBER};
  resx 61

<L359>:
  goto <bb 589> (<L95>);

<L93>:
  cv::Mat::~Mat (&gradYKern);
  resx 63

<L360>:
  goto <bb 589> (<L95>);

<L207>:

<L95>:
  D.76096 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76095.D.74999);
  D.76095 ={v} {CLOBBER};
  D.76095 ={v} {CLOBBER};
  resx 59

<L361>:
  goto <bb 691> (<L144>);

<L96>:
  cv::Mat::~Mat (&gradYKern);
  resx 68

<L362>:
  goto <bb 691> (<L144>);

<L97>:
  cv::MatExpr::~MatExpr (&D.76099);
  D.76099 ={v} {CLOBBER};
  resx 71

<L363>:
  goto <bb 688> (<L143>);

<L98>:
  cv::Mat::~Mat (&D.76109.D.74999);
  D.76109 ={v} {CLOBBER};
  D.76109 ={v} {CLOBBER};
  resx 75

<L364>:
  goto <bb 600> (<L101>);

<L99>:
  cv::Mat::~Mat (&gaussKern);
  resx 77

<L365>:
  goto <bb 600> (<L101>);

<L220>:

<L101>:
  D.76105 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76101.D.74999);
  D.76101 ={v} {CLOBBER};
  D.76101 ={v} {CLOBBER};
  resx 73

<L366>:
  goto <bb 688> (<L143>);

<L102>:
  cv::Mat::~Mat (&gaussKern);
  resx 82

<L367>:
  goto <bb 688> (<L143>);

<L103>:
  cv::Mat::~Mat (&D.76114.D.74999);
  D.76114 ={v} {CLOBBER};
  D.76114 ={v} {CLOBBER};
  resx 87

<L368>:
  goto <bb 609> (<L106>);

<L104>:
  cv::Mat::~Mat (&sumKern);
  resx 89

<L369>:
  goto <bb 609> (<L106>);

<L232>:

<L106>:
  D.76113 ={v} {CLOBBER};
  cv::Mat::~Mat (&D.76112.D.74999);
  D.76112 ={v} {CLOBBER};
  D.76112 ={v} {CLOBBER};
  resx 85

<L370>:
  goto <bb 685> (<L142>);

<L107>:
  cv::Mat::~Mat (&sumKern);
  resx 94

<L371>:
  goto <bb 685> (<L142>);

<L110>:
  _466 = D.76145._M_dataplus._M_p;
  _516 = _466 + 18446744073709551592;
  if (_516 != &_S_empty_rep_storage)
    goto <bb 614>;
  else
    goto <bb 615>;

  <bb 614>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_516, &D.82890);

  <bb 615>:
  D.82890 ={v} {CLOBBER};
  D.82890 ={v} {CLOBBER};
  D.76145 ={v} {CLOBBER};
  D.76145 ={v} {CLOBBER};
  resx 106

<L372>:
  goto <bb 670> (<L137>);

<L112>:
  _455 = D.76148._M_dataplus._M_p;
  _453 = _455 + 18446744073709551592;
  if (_453 != &_S_empty_rep_storage)
    goto <bb 618>;
  else
    goto <bb 619>;

  <bb 618>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_453, &D.82893);

  <bb 619>:
  D.82893 ={v} {CLOBBER};
  D.82893 ={v} {CLOBBER};
  D.76148 ={v} {CLOBBER};
  D.76148 ={v} {CLOBBER};
  resx 110

<L373>:
  goto <bb 670> (<L137>);

<L114>:
  _451 = D.76151._M_dataplus._M_p;
  _449 = _451 + 18446744073709551592;
  if (_449 != &_S_empty_rep_storage)
    goto <bb 622>;
  else
    goto <bb 623>;

  <bb 622>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_449, &D.82896);

  <bb 623>:
  D.82896 ={v} {CLOBBER};
  D.82896 ={v} {CLOBBER};
  D.76151 ={v} {CLOBBER};
  D.76151 ={v} {CLOBBER};
  resx 114

<L374>:
  goto <bb 670> (<L137>);

<L116>:
  _447 = D.76154._M_dataplus._M_p;
  _445 = _447 + 18446744073709551592;
  if (_445 != &_S_empty_rep_storage)
    goto <bb 626>;
  else
    goto <bb 627>;

  <bb 626>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_445, &D.82899);

  <bb 627>:
  D.82899 ={v} {CLOBBER};
  D.82899 ={v} {CLOBBER};
  D.76154 ={v} {CLOBBER};
  D.76154 ={v} {CLOBBER};
  resx 118

<L375>:
  goto <bb 670> (<L137>);

<L118>:
  _443 = D.76161._M_dataplus._M_p;
  _441 = _443 + 18446744073709551592;
  if (_441 != &_S_empty_rep_storage)
    goto <bb 630>;
  else
    goto <bb 631>;

  <bb 630>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_441, &D.82902);

  <bb 631>:
  D.82902 ={v} {CLOBBER};
  D.82902 ={v} {CLOBBER};
  D.76161 ={v} {CLOBBER};
  D.76161 ={v} {CLOBBER};
  resx 124

<L376>:
  goto <bb 634> (<L119>);

<L292>:

<L119>:
  resx 122

<L377>:
  goto <bb 637> (<L121>);

<L291>:

<L121>:
  D.76160 ={v} {CLOBBER};
  D.76160 ={v} {CLOBBER};
  D.76162 ={v} {CLOBBER};
  cv::MatExpr::~MatExpr (&D.76158);
  D.76158 ={v} {CLOBBER};
  resx 121

<L378>:
  goto <bb 670> (<L137>);

<L122>:
  _396 = D.76166._M_dataplus._M_p;
  _394 = _396 + 18446744073709551592;
  if (_394 != &_S_empty_rep_storage)
    goto <bb 640>;
  else
    goto <bb 641>;

  <bb 640>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_394, &D.82905);

  <bb 641>:
  D.82905 ={v} {CLOBBER};
  D.82905 ={v} {CLOBBER};
  D.76166 ={v} {CLOBBER};
  D.76166 ={v} {CLOBBER};
  resx 132

<L379>:
  goto <bb 644> (<L123>);

<L300>:

<L123>:
  resx 130

<L380>:
  goto <bb 647> (<L125>);

<L299>:

<L125>:
  D.76165 ={v} {CLOBBER};
  D.76165 ={v} {CLOBBER};
  D.76167 ={v} {CLOBBER};
  cv::MatExpr::~MatExpr (&D.76163);
  D.76163 ={v} {CLOBBER};
  resx 129

<L381>:
  goto <bb 670> (<L137>);

<L126>:
  _389 = D.76171._M_dataplus._M_p;
  _387 = _389 + 18446744073709551592;
  if (_387 != &_S_empty_rep_storage)
    goto <bb 650>;
  else
    goto <bb 651>;

  <bb 650>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_387, &D.82908);

  <bb 651>:
  D.82908 ={v} {CLOBBER};
  D.82908 ={v} {CLOBBER};
  D.76171 ={v} {CLOBBER};
  D.76171 ={v} {CLOBBER};
  resx 140

<L382>:
  goto <bb 654> (<L127>);

<L308>:

<L127>:
  resx 138

<L383>:
  goto <bb 657> (<L129>);

<L307>:

<L129>:
  D.76170 ={v} {CLOBBER};
  D.76170 ={v} {CLOBBER};
  D.76172 ={v} {CLOBBER};
  cv::MatExpr::~MatExpr (&D.76168);
  D.76168 ={v} {CLOBBER};
  resx 137

<L384>:
  goto <bb 670> (<L137>);

<L133>:
  _382 = D.76179._M_dataplus._M_p;
  _380 = _382 + 18446744073709551592;
  if (_380 != &_S_empty_rep_storage)
    goto <bb 660>;
  else
    goto <bb 661>;

  <bb 660>:
  std::basic_string<char>::_Rep::_ZNSs4_Rep10_M_disposeERKSaIcE.part.5 (_380, &D.82911);

  <bb 661>:
  D.82911 ={v} {CLOBBER};
  D.82911 ={v} {CLOBBER};
  D.76179 ={v} {CLOBBER};
  D.76179 ={v} {CLOBBER};
  resx 154

<L385>:
  goto <bb 664> (<L134>);

<L320>:

<L134>:
  resx 152

<L386>:
  goto <bb 667> (<L136>);

<L319>:

<L136>:
  D.76178 ={v} {CLOBBER};
  D.76178 ={v} {CLOBBER};
  D.76180 ={v} {CLOBBER};
  cv::MatExpr::~MatExpr (&D.76176);
  D.76176 ={v} {CLOBBER};
  resx 151

<L387>:
  goto <bb 670> (<L137>);

<L285>:

<L137>:
  D.76173 ={v} {CLOBBER};
  D.76174 ={v} {CLOBBER};
  D.76175 ={v} {CLOBBER};
  D.76153 ={v} {CLOBBER};
  D.76153 ={v} {CLOBBER};
  D.76150 ={v} {CLOBBER};
  D.76150 ={v} {CLOBBER};
  D.76147 ={v} {CLOBBER};
  D.76147 ={v} {CLOBBER};
  D.76144 ={v} {CLOBBER};
  D.76144 ={v} {CLOBBER};
  cv::Mat::~Mat (&diffOptCV);
  resx 104

<L388>:
  goto <bb 673> (<L138>);

<L284>:

<L138>:
  cv::Mat::~Mat (&diffCVOpt);
  resx 103

<L389>:
  goto <bb 676> (<L139>);

<L283>:

<L139>:
  cv::Mat::~Mat (&result_opt);
  resx 102

<L390>:
  goto <bb 679> (<L140>);

<L270>:

<L140>:
  cv::Mat::~Mat (&result_ref);
  resx 101

<L391>:
  goto <bb 682> (<L141>);

<L242>:

<L141>:
  D.76117 ={v} {CLOBBER};
  D.76118 ={v} {CLOBBER};
  cv::Mat::~Mat (&sumKern);
  resx 96

<L392>:
  goto <bb 685> (<L142>);

<L231>:

<L142>:
  cv::Mat::~Mat (&gaussKern);
  resx 84

<L393>:
  goto <bb 688> (<L143>);

<L217>:

<L143>:
  cv::Mat::~Mat (&gradYKern);
  resx 70

<L394>:
  goto <bb 691> (<L144>);

<L204>:

<L144>:
  cv::Mat::~Mat (&gradXKern);
  resx 56

<L395>:
  goto <bb 694> (<L145>);

<L193>:

<L145>:
  cv::Mat::~Mat (&opencv_harris);
  resx 44

<L396>:
  goto <bb 697> (<L146>);

<L334>:

<L146>:
  cv::Mat::~Mat (&img_show_pipe);
  resx 43

<L397>:
  goto <bb 700> (<L147>);

<L190>:

<L147>:
  cv::Mat::~Mat (&img_show_harris);
  resx 38

<L398>:
  goto <bb 703> (<L148>);

<L187>:

<L148>:
  cv::Mat::~Mat (&img_show);
  resx 33

<L399>:
  goto <bb 706> (<L149>);

<L184>:

<L149>:
  cv::Mat::~Mat (&img_region_harris);
  resx 28

<L400>:
  goto <bb 709> (<L150>);

<L181>:

<L150>:
  cv::Mat::~Mat (&img_region);
  resx 23

<L401>:
  goto <bb 712> (<L151>);

<L168>:

<L151>:
  D.74506 ={v} {CLOBBER};
  D.74504 ={v} {CLOBBER};
  D.74505 ={v} {CLOBBER};
  D.74501 ={v} {CLOBBER};
  D.74501 ={v} {CLOBBER};
  cv::Mat::~Mat (&imgGrayf);
  resx 4

<L402>:
  goto <bb 715> (<L152>);

<L340>:

<L152>:
  cv::Mat::~Mat (&imgGray);
  resx 3

<L403>:
  goto <bb 718> (<L153>);

<L341>:

<L153>:
  cv::Mat::~Mat (&img);
  resx 2

  <bb 719>:
  cv::Mat::deallocate (&img);
  goto <bb 9>;

<L404>:
  goto <bb 546> (<L70>);

  <bb 721>:
  goto <bb 9>;

  <bb 722>:
  cv::Mat::deallocate (&D.76158.c);
  goto <bb 395>;

<L405>:
  goto <bb 409> (<L160>);

  <bb 724>:
  goto <bb 395>;

  <bb 725>:
  cv::Mat::deallocate (&D.76158.b);
  goto <bb 399>;

<L406>:
  goto <bb 412> (<L161>);

  <bb 727>:
  goto <bb 399>;

  <bb 728>:
  cv::Mat::deallocate (&D.76158.a);
  goto <bb 403>;

<L407>:
  goto <bb 670> (<L137>);

  <bb 730>:
  goto <bb 403>;

  <bb 731>:
  cv::Mat::deallocate (&D.76163.c);
  goto <bb 426>;

<L408>:
  goto <bb 440> (<L162>);

  <bb 733>:
  goto <bb 426>;

  <bb 734>:
  cv::Mat::deallocate (&D.76163.b);
  goto <bb 430>;

<L409>:
  goto <bb 443> (<L163>);

  <bb 736>:
  goto <bb 430>;

  <bb 737>:
  cv::Mat::deallocate (&D.76163.a);
  goto <bb 434>;

<L410>:
  goto <bb 670> (<L137>);

  <bb 739>:
  goto <bb 434>;

  <bb 740>:
  cv::Mat::deallocate (&D.76168.c);
  goto <bb 457>;

<L411>:
  goto <bb 471> (<L164>);

  <bb 742>:
  goto <bb 457>;

  <bb 743>:
  cv::Mat::deallocate (&D.76168.b);
  goto <bb 461>;

<L412>:
  goto <bb 474> (<L165>);

  <bb 745>:
  goto <bb 461>;

  <bb 746>:
  cv::Mat::deallocate (&D.76168.a);
  goto <bb 465>;

<L413>:
  goto <bb 670> (<L137>);

  <bb 748>:
  goto <bb 465>;

  <bb 749>:
  cv::Mat::deallocate (&D.76176.c);
  goto <bb 496>;

<L414>:
  goto <bb 509> (<L166>);

  <bb 751>:
  goto <bb 496>;

  <bb 752>:
  cv::Mat::deallocate (&D.76176.b);
  goto <bb 500>;

<L415>:
  goto <bb 512> (<L167>);

  <bb 754>:
  goto <bb 500>;

  <bb 755>:
  cv::Mat::deallocate (&D.76176.a);
  goto <bb 504>;

<L416>:
  goto <bb 670> (<L137>);

  <bb 757>:
  goto <bb 504>;

  <bb 758>:
  pretmp_589 = harris;

  <bb 759>:
  # prephitmp_1 = PHI <pretmp_571(293), pretmp_589(758)>
  goto <bb 298>;

  <bb 760>:

  <bb 761>:
  goto <bb 238>;

}



;; Function (static initializers for harris.cpp) (_GLOBAL__sub_I__Z10harris_optiiPfRS_, funcdef_no=4428, decl_uid=79074, symbol_order=2651) (executed once)

(static initializers for harris.cpp) ()
{
  <bb 2>:
  std::ios_base::Init::Init (&__ioinit);
  __cxa_atexit (__comp_dtor , &__ioinit, &__dso_handle);
  return;

}


